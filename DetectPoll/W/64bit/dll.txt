
Kernel32.dll, DWORD WINAPI SetFilePointer(
  __in         HANDLE hFile,
  __in         LONG lDistanceToMove,
  __inout_opt  PLONG lpDistanceToMoveHigh,
  __in         DWORD dwMoveMethod
);

Kernel32.dll, BOOL WINAPI ReadFile(
  __in         HANDLE hFile,
  __out        LPVOID lpBuffer,
  __in         DWORD nNumberOfBytesToRead,
  __out_opt    LPDWORD lpNumberOfBytesRead,
  __inout_opt  LPOVERLAPPED lpOverlapped
);

Kernel32.dll, BOOL WINAPI ReadFileEx(
  __in       HANDLE hFile,
  __out_opt  LPVOID lpBuffer,
  __in       DWORD nNumberOfBytesToRead,
  __inout    LPOVERLAPPED lpOverlapped,
  __in_opt   LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
);

Kernel32.dll, BOOL WINAPI WriteFile(
  __in         HANDLE hFile,
  __in         LPCVOID lpBuffer,
  __in         DWORD nNumberOfBytesToWrite,
  __out_opt    LPDWORD lpNumberOfBytesWritten,
  __inout_opt  LPOVERLAPPED lpOverlapped
);

Kernel32.dll, BOOL WINAPI WriteFileEx(
  __in      HANDLE hFile,
  __in_opt  LPCVOID lpBuffer,
  __in      DWORD nNumberOfBytesToWrite,
  __inout   LPOVERLAPPED lpOverlapped,
  __in_opt  LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
);

Kernel32.dll, DWORD WINAPI SearchPathA(
  __in_opt   LPCTSTR lpPath,
  __in       LPCTSTR lpFileName,
  __in_opt   LPCTSTR lpExtension,
  __in       DWORD nBufferLength,
  __out      LPTSTR lpBuffer,
  __out_opt  LPTSTR *lpFilePart
);

Kernel32.dll, DWORD WINAPI SearchPathW(
  __in_opt   LPCTSTR lpPath,
  __in       LPCTSTR lpFileName,
  __in_opt   LPCTSTR lpExtension,
  __in       DWORD nBufferLength,
  __out      LPTSTR lpBuffer,
  __out_opt  LPTSTR *lpFilePart
);

Kernel32.dll, DWORD WINAPI GetFileSize(
  __in       HANDLE hFile,
  __out_opt  LPDWORD lpFileSizeHigh
);

Kernel32.dll, BOOL WINAPI GetFileSizeEx(
  __in   HANDLE hFile,
  __out  PLARGE_INTEGER lpFileSize
);

Kernel32.dll, DWORD WINAPI GetFullPathNameA(
  __in   LPCTSTR lpFileName,
  __in   DWORD nBufferLength,
  __out  LPTSTR lpBuffer,
  __out  LPTSTR *lpFilePart
);

Kernel32.dll, DWORD WINAPI GetFullPathNameW(
  __in   LPCTSTR lpFileName,
  __in   DWORD nBufferLength,
  __out  LPTSTR lpBuffer,
  __out  LPTSTR *lpFilePart
);

Kernel32.dll, BOOL WINAPI MoveFileA(
  __in  LPCTSTR lpExistingFileName,
  __in  LPCTSTR lpNewFileName
);

Kernel32.dll, BOOL WINAPI MoveFileW(
  __in  LPCTSTR lpExistingFileName,
  __in  LPCTSTR lpNewFileName
);

Kernel32.dll, BOOL WINAPI MoveFileExA(
  __in      LPCTSTR lpExistingFileName,
  __in_opt  LPCTSTR lpNewFileName,
  __in      DWORD dwFlags
);

Kernel32.dll, BOOL WINAPI MoveFileExW(
  __in      LPCTSTR lpExistingFileName,
  __in_opt  LPCTSTR lpNewFileName,
  __in      DWORD dwFlags
);

Kernel32.dll, BOOL WINAPI GetSystemPowerStatus(
  __out  LPSYSTEM_POWER_STATUS lpSystemPowerStatus
);

kernel32.dll, DWORD WINAPI GetPrivateProfileStringA(
  __in   LPCTSTR lpAppName,
  __in   LPCTSTR lpKeyName,
  __in   LPCTSTR lpDefault,
  __out  LPTSTR lpReturnedString,
  __in   DWORD nSize,
  __in   LPCTSTR lpFileName
);

kernel32.dll, DWORD WINAPI GetPrivateProfileStringW(
  __in   LPCTSTR lpAppName,
  __in   LPCTSTR lpKeyName,
  __in   LPCTSTR lpDefault,
  __out  LPTSTR lpReturnedString,
  __in   DWORD nSize,
  __in   LPCTSTR lpFileName
);

kernel32.dll, BOOL WINAPI GetPrivateProfileStructA(
  __in   LPCTSTR lpszSection,
  __in   LPCTSTR lpszKey,
  __out  LPVOID lpStruct,
  __in   UINT uSizeStruct,
  __in   LPCTSTR szFile
);

kernel32.dll, BOOL WINAPI GetPrivateProfileStructW(
  __in   LPCTSTR lpszSection,
  __in   LPCTSTR lpszKey,
  __out  LPVOID lpStruct,
  __in   UINT uSizeStruct,
  __in   LPCTSTR szFile
);

kernel32.dll, HANDLE WINAPI CreateToolhelp32Snapshot(
  __in  DWORD dwFlags,
  __in  DWORD th32ProcessID
);

kernel32.dll, DWORD WINAPI WaitForMultipleObjects(
  __in  DWORD nCount,
  __in  const HANDLE *lpHandles,
  __in  BOOL bWaitAll,
  __in  DWORD dwMilliseconds
);

kernel32.dll, BOOL WINAPI CopyFileA(
  __in  LPCTSTR lpExistingFileName,
  __in  LPCTSTR lpNewFileName,
  __in  BOOL bFailIfExists
);

kernel32.dll, BOOL WINAPI CopyFileW(
  __in  LPCTSTR lpExistingFileName,
  __in  LPCTSTR lpNewFileName,
  __in  BOOL bFailIfExists
);

kernel32.dll, BOOL WINAPI CopyFileExA(
  __in      LPCTSTR lpExistingFileName,
  __in      LPCTSTR lpNewFileName,
  __in_opt  LPPROGRESS_ROUTINE lpProgressRoutine,
  __in_opt  LPVOID lpData,
  __in_opt  LPBOOL pbCancel,
  __in      DWORD dwCopyFlags
);

kernel32.dll, BOOL WINAPI CopyFileExW(
  __in      LPCTSTR lpExistingFileName,
  __in      LPCTSTR lpNewFileName,
  __in_opt  LPPROGRESS_ROUTINE lpProgressRoutine,
  __in_opt  LPVOID lpData,
  __in_opt  LPBOOL pbCancel,
  __in      DWORD dwCopyFlags
);

kernel32.dll, DWORD WINAPI WaitForSingleObject(
  __in  HANDLE hHandle,
  __in  DWORD dwMilliseconds
);

kernel32.dll, BOOL WINAPI QueryFullProcessImageNameA(
  __in     HANDLE hProcess,
  __in     DWORD dwFlags,
  __out    LPTSTR lpExeName,
  __inout  PDWORD lpdwSize
);

kernel32.dll, BOOL WINAPI QueryFullProcessImageNameW(
  __in     HANDLE hProcess,
  __in     DWORD dwFlags,
  __out    LPTSTR lpExeName,
  __inout  PDWORD lpdwSize
);

kernel32.dll, HANDLE WINAPI CreateFileA(
  __in      LPCTSTR lpFileName,
  __in      DWORD dwDesiredAccess,
  __in      DWORD dwShareMode,
  __in_opt  LPSECURITY_ATTRIBUTES lpSecurityAttributes,
  __in      DWORD dwCreationDisposition,
  __in      DWORD dwFlagsAndAttributes,
  __in_opt  HANDLE hTemplateFile
);

kernel32.dll, HANDLE WINAPI CreateFileW(
  __in      LPCTSTR lpFileName,
  __in      DWORD dwDesiredAccess,
  __in      DWORD dwShareMode,
  __in_opt  LPSECURITY_ATTRIBUTES lpSecurityAttributes,
  __in      DWORD dwCreationDisposition,
  __in      DWORD dwFlagsAndAttributes,
  __in_opt  HANDLE hTemplateFile
);

kernel32.dll, BOOL WINAPI DeviceIoControl(
  __in         HANDLE hDevice,
  __in         DWORD dwIoControlCode,
  __in_opt     LPVOID lpInBuffer,
  __in         DWORD nInBufferSize,
  __out_opt    LPVOID lpOutBuffer,
  __in         DWORD nOutBufferSize,
  __out_opt    LPDWORD lpBytesReturned,
  __inout_opt  LPOVERLAPPED lpOverlapped
);

kernel32.dll, HANDLE WINAPI FindFirstFileExA(
  __in        LPCTSTR lpFileName,
  __in        FINDEX_INFO_LEVELS fInfoLevelId,
  __out       LPVOID lpFindFileData,
  __in        FINDEX_SEARCH_OPS fSearchOp,
  __reserved  LPVOID lpSearchFilter,
  __in        DWORD dwAdditionalFlags
);

kernel32.dll, HANDLE WINAPI FindFirstFileExW(
  __in        LPCTSTR lpFileName,
  __in        FINDEX_INFO_LEVELS fInfoLevelId,
  __out       LPVOID lpFindFileData,
  __in        FINDEX_SEARCH_OPS fSearchOp,
  __reserved  LPVOID lpSearchFilter,
  __in        DWORD dwAdditionalFlags
);

kernel32.dll, HMODULE WINAPI LoadLibraryExA(
  __in        LPCTSTR lpFileName,
  __reserved  HANDLE hFile,
  __in        DWORD dwFlags
);

kernel32.dll, HMODULE WINAPI LoadLibraryExW(
  __in        LPCTSTR lpFileName,
  __reserved  HANDLE hFile,
  __in        DWORD dwFlags
);

Kernel32.dll, DWORD WINAPI SleepEx(
  __in  DWORD dwMilliseconds,
  __in  BOOL bAlertable
);

kernel32.dll, LPVOID WINAPI TlsGetValue(
  __in  DWORD dwTlsIndex
);

kernel32.dll, BOOL WINAPI DeleteFileA(
  __in  LPCTSTR lpFileName
);

kernel32.dll, BOOL WINAPI DeleteFileW(
  __in  LPCTSTR lpFileName
);

kernel32.dll, VOID WINAPI Sleep(
  __in  DWORD dwMilliseconds
);

kernel32.dll, BOOL WINAPI SetFileAttributesA(
  __in  LPCTSTR lpFileName,
  __in  DWORD dwFileAttributes
);

kernel32.dll, BOOL WINAPI SetFileAttributesW(
  __in  LPCTSTR lpFileName,
  __in  DWORD dwFileAttributes
);

kernel32.dll, UINT WINAPI GetTempFileNameA(
  __in   LPCTSTR lpPathName,
  __in   LPCTSTR lpPrefixString,
  __in   UINT uUnique,
  __out  LPTSTR lpTempFileName
);

kernel32.dll, UINT WINAPI GetTempFileNameW(
  __in   LPCTSTR lpPathName,
  __in   LPCTSTR lpPrefixString,
  __in   UINT uUnique,
  __out  LPTSTR lpTempFileName
);

kernel32.dll, BOOL WINAPI FindClose(
  __inout  HANDLE hFindFile
);

Kernel32.dll, VOID WINAPI InitOnceInitialize(
    __out PINIT_ONCE InitOnce
);

Kernel32.dll, BOOL WINAPI InitOnceExecuteOnce(
    __inout PINIT_ONCE InitOnce,
    __in __callback PINIT_ONCE_FN InitFn,
    __inout_opt PVOID Parameter,
    __deref_opt_out_opt LPVOID *Context
);

Kernel32.dll, BOOL WINAPI InitOnceBeginInitialize(
    __inout LPINIT_ONCE lpInitOnce,
    __in DWORD dwFlags,
    __out PBOOL fPending,
    __deref_opt_out_opt LPVOID *lpContext
);

Kernel32.dll, BOOL WINAPI InitOnceComplete(
    __inout LPINIT_ONCE lpInitOnce,
    __in DWORD dwFlags,
    __in_opt LPVOID lpContext
);

Kernel32.dll, VOID WINAPI InitializeSRWLock(
     __out PSRWLOCK SRWLock
);

Kernel32.dll, VOID WINAPI ReleaseSRWLockExclusive(
     __inout PSRWLOCK SRWLock
);

Kernel32.dll, VOID WINAPI ReleaseSRWLockShared(
     __inout PSRWLOCK SRWLock
);

Kernel32.dll, VOID WINAPI AcquireSRWLockExclusive(
     __inout PSRWLOCK SRWLock
);

Kernel32.dll, VOID WINAPI AcquireSRWLockShared(
     __inout PSRWLOCK SRWLock
);

Kernel32.dll, BOOLEAN WINAPI TryAcquireSRWLockExclusive(
    __inout PSRWLOCK SRWLock
);

Kernel32.dll, BOOLEAN WINAPI TryAcquireSRWLockShared(
    __inout PSRWLOCK SRWLock
);

Kernel32.dll, VOID WINAPI InitializeConditionVariable(
    __out PCONDITION_VARIABLE ConditionVariable
);

Kernel32.dll, VOID WINAPI WakeConditionVariable(
    __inout PCONDITION_VARIABLE ConditionVariable
);

Kernel32.dll, VOID WINAPI WakeAllConditionVariable(
    __inout PCONDITION_VARIABLE ConditionVariable
);

Kernel32.dll, BOOL WINAPI SleepConditionVariableCS(
    __inout PCONDITION_VARIABLE ConditionVariable,
    __inout PCRITICAL_SECTION CriticalSection,
    __in DWORD dwMilliseconds
);

Kernel32.dll, PVOID WINAPI EncodePointer(
    __in_opt PVOID Ptr
);

Kernel32.dll, PVOID WINAPI DecodePointer(
    __in_opt PVOID Ptr
);

Kernel32.dll, PVOID WINAPI EncodeSystemPointer(
    __in_opt PVOID Ptr
);

Kernel32.dll, PVOID WINAPI DecodeSystemPointer(
    __in_opt PVOID Ptr
);

Kernel32.dll, LONG WINAPI InterlockedIncrement(
    __inout LONG volatile *lpAddend
);

Kernel32.dll, LONG WINAPI InterlockedDecrement(
    __inout LONG volatile *lpAddend
);

Kernel32.dll, LONG WINAPI InterlockedExchange(
    __inout LONG volatile *Target,
    __in    LONG Value
);

Kernel32.dll, LONG WINAPI InterlockedExchangeAdd(
    __inout LONG volatile *Addend,
    __in    LONG Value
);

Kernel32.dll, LONG WINAPI InterlockedCompareExchange(
    __inout LONG volatile *Destination,
    __in    LONG Exchange,
    __in    LONG Comperand
);

Kernel32.dll, LONGLONG WINAPI InterlockedCompareExchange64(
    __inout LONGLONG volatile *Destination,
    __in    LONGLONG Exchange,
    __in    LONGLONG Comperand
);

Kernel32.dll, VOID WINAPI InitializeSListHead(
    __inout PSLIST_HEADER ListHead
);

Kernel32.dll, PSLIST_ENTRY WINAPI InterlockedPopEntrySList(
    __inout PSLIST_HEADER ListHead
);

Kernel32.dll, PSLIST_ENTRY WINAPI InterlockedPushEntrySList(
    __inout PSLIST_HEADER ListHead,
    __inout PSLIST_ENTRY ListEntry
);

Kernel32.dll, PSLIST_ENTRY WINAPI InterlockedFlushSList(
    __inout PSLIST_HEADER ListHead
);

Kernel32.dll, USHORT WINAPI QueryDepthSList(
    __in PSLIST_HEADER ListHead
);

Kernel32.dll, LPVOID WINAPI LockResource(
    __in HGLOBAL hResData
);

Kernel32.dll, BOOL WINAPI FreeLibrary(
    __in HMODULE hLibModule
);

Kernel32.dll, VOID WINAPI FreeLibraryAndExitThread(
    __in HMODULE hLibModule,
    __in DWORD dwExitCode
);

Kernel32.dll, BOOL WINAPI DisableThreadLibraryCalls(
    __in HMODULE hLibModule
);

Kernel32.dll, FARPROC WINAPI GetProcAddress(
    __in HMODULE hModule,
    __in LPCSTR lpProcName
);


Kernel32.dll, HGLOBAL WINAPI GlobalAlloc(
    __in UINT uFlags,
    __in SIZE_T dwBytes
);

Kernel32.dll, HGLOBAL WINAPI GlobalReAlloc(
    __in HGLOBAL hMem,
    __in SIZE_T dwBytes,
    __in UINT uFlags
);

Kernel32.dll, SIZE_T WINAPI GlobalSize(
    __in HGLOBAL hMem
);

Kernel32.dll, UINT WINAPI GlobalFlags(
    __in HGLOBAL hMem
);

Kernel32.dll, LPVOID WINAPI GlobalLock(
    __in HGLOBAL hMem
);

Kernel32.dll, HGLOBAL WINAPI GlobalHandle(
    __in LPCVOID pMem
);

Kernel32.dll, BOOL WINAPI GlobalUnlock(
    __in HGLOBAL hMem
);

Kernel32.dll, HGLOBAL WINAPI GlobalFree(
    __deref HGLOBAL hMem
);

Kernel32.dll, SIZE_T WINAPI GlobalCompact(
    __in DWORD dwMinFree
);

Kernel32.dll, VOID WINAPI GlobalFix(
    __in HGLOBAL hMem
);

Kernel32.dll, VOID WINAPI GlobalUnfix(
    __in HGLOBAL hMem
);

Kernel32.dll, LPVOID WINAPI GlobalWire(
    __in HGLOBAL hMem
);

Kernel32.dll, BOOL WINAPI GlobalUnWire(
    __in HGLOBAL hMem
);

Kernel32.dll, VOID WINAPI GlobalMemoryStatus(
    __out LPMEMORYSTATUS lpBuffer
);

Kernel32.dll, BOOL WINAPI GlobalMemoryStatusEx(
    __out LPMEMORYSTATUSEX lpBuffer
);

Kernel32.dll, HLOCAL WINAPI LocalAlloc(
    __in UINT uFlags,
    __in SIZE_T uBytes
);

Kernel32.dll, HLOCAL WINAPI LocalReAlloc(
    __in HLOCAL hMem,
    __in SIZE_T uBytes,
    __in UINT uFlags
);

Kernel32.dll, LPVOID WINAPI LocalLock(
    __in HLOCAL hMem
);

Kernel32.dll, HLOCAL WINAPI LocalHandle(
    __in LPCVOID pMem
);

Kernel32.dll, BOOL WINAPI LocalUnlock(
    __in HLOCAL hMem
);

Kernel32.dll, SIZE_T WINAPI LocalSize(
    __in HLOCAL hMem
);

Kernel32.dll, UINT WINAPI LocalFlags(
    __in HLOCAL hMem
);

Kernel32.dll, HLOCAL WINAPI LocalFree(
    __deref HLOCAL hMem
);

Kernel32.dll, SIZE_T WINAPI LocalShrink(
    __in HLOCAL hMem,
    __in UINT cbNewSize
);

Kernel32.dll, SIZE_T WINAPI LocalCompact(
    __in UINT uMinFree
);

Kernel32.dll, BOOL WINAPI FlushInstructionCache(
    __in HANDLE hProcess,
    __in_bcount_opt LPCVOID lpBaseAddress,
    __in SIZE_T dwSize
);

Kernel32.dll, VOID WINAPI FlushProcessWriteBuffers(
    void aaa
);

Kernel32.dll, BOOL WINAPI QueryThreadCycleTime(
    __in HANDLE ThreadHandle,
    __out PULONG64 CycleTime
);

Kernel32.dll, BOOL WINAPI QueryProcessCycleTime(
    __in HANDLE ProcessHandle,
    __out PULONG64 CycleTime
);

Kernel32.dll, BOOL WINAPI QueryIdleProcessorCycleTime(
    __inout PULONG BufferLength,
    __out_bcount_opt PULONG64 ProcessorIdleCycleTime
);

Kernel32.dll, BOOL WINAPI QueryIdleProcessorCycleTimeEx(
    __in USHORT Group,
    __inout PULONG BufferLength,
    __out_bcount_opt PULONG64 ProcessorIdleCycleTime
);

Kernel32.dll, LPVOID WINAPI VirtualAlloc(
    __in_opt LPVOID lpAddress,
    __in     SIZE_T dwSize,
    __in     DWORD flAllocationType,
    __in     DWORD flProtect
);

Kernel32.dll, BOOL WINAPI VirtualFree(
    __in LPVOID lpAddress,
    __in SIZE_T dwSize,
    __in DWORD dwFreeType
);

Kernel32.dll, BOOL WINAPI VirtualProtect(
    __in  LPVOID lpAddress,
    __in  SIZE_T dwSize,
    __in  DWORD flNewProtect,
    __out PDWORD lpflOldProtect
);

Kernel32.dll, SIZE_T WINAPI VirtualQuery(
    __in_opt LPCVOID lpAddress,
    __out_bcount_part PMEMORY_BASIC_INFORMATION lpBuffer,
    __in     SIZE_T dwLength
);

Kernel32.dll, LPVOID WINAPI VirtualAllocEx(
    __in     HANDLE hProcess,
    __in_opt LPVOID lpAddress,
    __in     SIZE_T dwSize,
    __in     DWORD flAllocationType,
    __in     DWORD flProtect
);

Kernel32.dll, LPVOID WINAPI VirtualAllocExNuma(
    __in     HANDLE hProcess,
    __in_opt LPVOID lpAddress,
    __in     SIZE_T dwSize,
    __in     DWORD  flAllocationType,
    __in     DWORD  flProtect,
    __in     DWORD  nndPreferred
);

Kernel32.dll, UINT WINAPI GetWriteWatch(
    __in DWORD dwFlags,
    __in PVOID lpBaseAddress,
    __in SIZE_T dwRegionSize,
    __out_ecount_part PVOID *lpAddresses,
    __inout ULONG_PTR *lpdwCount,
    __out PULONG lpdwGranularity
);

Kernel32.dll, UINT WINAPI ResetWriteWatch(
    __in LPVOID lpBaseAddress,
    __in SIZE_T dwRegionSize
);

Kernel32.dll, SIZE_T WINAPI GetLargePageMinimum(
    void aaa
);

Kernel32.dll, UINT WINAPI EnumSystemFirmwareTables(
    __in DWORD FirmwareTableProviderSignature,
    __out_bcount_part_opt PVOID pFirmwareTableEnumBuffer,
    __in DWORD BufferSize
);

Kernel32.dll, UINT WINAPI GetSystemFirmwareTable(
    __in DWORD FirmwareTableProviderSignature,
    __in DWORD FirmwareTableID,
    __out_bcount_part_opt PVOID pFirmwareTableBuffer,
    __in DWORD BufferSize
);

Kernel32.dll, BOOL WINAPI GetPhysicallyInstalledSystemMemory(
    __out PULONGLONG TotalMemoryInKilobytes
);

Kernel32.dll, BOOL WINAPI VirtualFreeEx(
    __in HANDLE hProcess,
    __in LPVOID lpAddress,
    __in SIZE_T dwSize,
    __in DWORD  dwFreeType
);

Kernel32.dll, BOOL WINAPI VirtualProtectEx(
    __in  HANDLE hProcess,
    __in  LPVOID lpAddress,
    __in  SIZE_T dwSize,
    __in  DWORD flNewProtect,
    __out PDWORD lpflOldProtect
);

Kernel32.dll, SIZE_T WINAPI VirtualQueryEx(
    __in     HANDLE hProcess,
    __in_opt LPCVOID lpAddress,
    __out_bcount_part PMEMORY_BASIC_INFORMATION lpBuffer,
    __in     SIZE_T dwLength
);

Kernel32.dll, HANDLE WINAPI HeapCreate(
    __in DWORD flOptions,
    __in SIZE_T dwInitialSize,
    __in SIZE_T dwMaximumSize
);

Kernel32.dll, BOOL WINAPI HeapDestroy(
    __in HANDLE hHeap
);

Kernel32.dll, LPVOID WINAPI HeapAlloc(
    __in HANDLE hHeap,
    __in DWORD dwFlags,
    __in SIZE_T dwBytes
);

Kernel32.dll, LPVOID WINAPI HeapReAlloc(
    __inout HANDLE hHeap,
    __in    DWORD dwFlags,
    __deref LPVOID lpMem,
    __in    SIZE_T dwBytes
);

Kernel32.dll, BOOL WINAPI HeapFree(
    __inout HANDLE hHeap,
    __in    DWORD dwFlags,
    __drv_freesMem __post __notvalid __deref LPVOID lpMem
);

Kernel32.dll, SIZE_T WINAPI HeapSize(
    __in HANDLE hHeap,
    __in DWORD dwFlags,
    __in LPCVOID lpMem
);

Kernel32.dll, BOOL WINAPI HeapValidate(
    __in     HANDLE hHeap,
    __in     DWORD dwFlags,
    __in_opt LPCVOID lpMem
);

Kernel32.dll, SIZE_T WINAPI HeapCompact(
    __in HANDLE hHeap,
    __in DWORD dwFlags
);

Kernel32.dll, HANDLE WINAPI GetProcessHeap(
    void aaa
);

Kernel32.dll, DWORD WINAPI GetProcessHeaps(
    __in DWORD NumberOfHeaps,
    __out_ecount_part PHANDLE ProcessHeaps
);

Kernel32.dll, BOOL WINAPI HeapLock(
    __in HANDLE hHeap
);

Kernel32.dll, BOOL WINAPI HeapUnlock(
    __in HANDLE hHeap
);

Kernel32.dll, BOOL WINAPI HeapWalk(
    __in    HANDLE hHeap,
    __inout LPPROCESS_HEAP_ENTRY lpEntry
);

Kernel32.dll, BOOL WINAPI HeapSetInformation(
    __in_opt HANDLE HeapHandle,
    __in HEAP_INFORMATION_CLASS HeapInformationClass,
    __in_bcount_opt PVOID HeapInformation,
    __in SIZE_T HeapInformationLength
);

Kernel32.dll, BOOL WINAPI HeapQueryInformation(
    __in_opt HANDLE HeapHandle,
    __in HEAP_INFORMATION_CLASS HeapInformationClass,
    __out_bcount_part_opt PVOID HeapInformation,
    __in SIZE_T HeapInformationLength,
    __out_opt PSIZE_T ReturnLength
);

Kernel32.dll, BOOL WINAPI GetBinaryTypeA(
    __in  LPCSTR lpApplicationName,
    __out LPDWORD  lpBinaryType
);

Kernel32.dll, BOOL WINAPI GetBinaryTypew(
    __in  LPCSTR lpApplicationName,
    __out LPDWORD  lpBinaryType
);

Kernel32.dll, DWORD WINAPI GetShortPathNameA(
    __in LPCSTR lpszLongPath,
    __out_ecount_part_opt LPSTR  lpszShortPath,
    __in DWORD cchBuffer
);

Kernel32.dll, DWORD WINAPI GetLongPathNameW(
    __in LPCSTR lpszShortPath,
    __out_ecount_part_opt LPSTR  lpszLongPath,
    __in DWORD cchBuffer
);

Kernel32.dll, DWORD WINAPI GetLongPathNameTransactedA(
    __in     LPCSTR lpszShortPath,
    __out_ecount_part_opt LPSTR  lpszLongPath,
    __in     DWORD cchBuffer,
    __in     HANDLE hTransaction
);

Kernel32.dll, DWORD WINAPI GetLongPathNameTransactedW(
    __in     LPCSTR lpszShortPath,
    __out_ecount_part_opt LPSTR  lpszLongPath,
    __in     DWORD cchBuffer,
    __in     HANDLE hTransaction
);

Kernel32.dll, BOOL WINAPI GetProcessAffinityMask(
    __in  HANDLE hProcess,
    __out PDWORD_PTR lpProcessAffinityMask,
    __out PDWORD_PTR lpSystemAffinityMask
);

Kernel32.dll, BOOL WINAPI SetProcessAffinityMask(
    __in HANDLE hProcess,
    __in DWORD_PTR dwProcessAffinityMask
);

Kernel32.dll, BOOL WINAPI GetProcessGroupAffinity(
    __in HANDLE hProcess,
    __inout PUSHORT GroupCount,
    __out_ecount PUSHORT GroupArray
);

Kernel32.dll, BOOL WINAPI GetProcessHandleCount(
    __in  HANDLE hProcess,
    __out PDWORD pdwHandleCount
);

Kernel32.dll, BOOL WINAPI GetProcessTimes(
    __in  HANDLE hProcess,
    __out LPFILETIME lpCreationTime,
    __out LPFILETIME lpExitTime,
    __out LPFILETIME lpKernelTime,
    __out LPFILETIME lpUserTime
);

Kernel32.dll, BOOL WINAPI GetProcessIoCounters(
    __in  HANDLE hProcess,
    __out PIO_COUNTERS lpIoCounters
);

Kernel32.dll, BOOL WINAPI GetProcessWorkingSetSize(
    __in  HANDLE hProcess,
    __out PSIZE_T lpMinimumWorkingSetSize,
    __out PSIZE_T lpMaximumWorkingSetSize
);

Kernel32.dll, BOOL WINAPI GetProcessWorkingSetSizeEx(
    __in  HANDLE hProcess,
    __out PSIZE_T lpMinimumWorkingSetSize,
    __out PSIZE_T lpMaximumWorkingSetSize,
    __out PDWORD Flags
);

Kernel32.dll, BOOL WINAPI SetProcessWorkingSetSize(
    __in HANDLE hProcess,
    __in SIZE_T dwMinimumWorkingSetSize,
    __in SIZE_T dwMaximumWorkingSetSize
);

Kernel32.dll, BOOL WINAPI SetProcessWorkingSetSizeEx(
    __in HANDLE hProcess,
    __in SIZE_T dwMinimumWorkingSetSize,
    __in SIZE_T dwMaximumWorkingSetSize,
    __in DWORD Flags
);

Kernel32.dll, BOOL WINAPI SetProcessAffinityUpdateMode(
    __in HANDLE hProcess,
    __in DWORD dwFlags
);

Kernel32.dll, BOOL WINAPI QueryProcessAffinityUpdateMode(
    __in HANDLE hProcess,
    __out_opt LPDWORD lpdwFlags
);

Kernel32.dll, HANDLE WINAPI OpenProcess(
    __in DWORD dwDesiredAccess,
    __in BOOL bInheritHandle,
    __in DWORD dwProcessId
);

Kernel32.dll, HANDLE WINAPI GetCurrentProcess(
    void aaa
);

Kernel32.dll, DWORD WINAPI GetCurrentProcessId(
    void aaa
);

Kernel32.dll, VOID WINAPI ExitProcess(
    __in UINT uExitCode
);

Kernel32.dll, BOOL WINAPI TerminateProcess(
    __in HANDLE hProcess,
    __in UINT uExitCode
);

Kernel32.dll, BOOL WINAPI GetExitCodeProcess(
    __in  HANDLE hProcess,
    __out LPDWORD lpExitCode
);

Kernel32.dll, VOID WINAPI FatalExit(
    __in int ExitCode
);

Kernel32.dll, LPCH WINAPI GetEnvironmentStrings(
    void aaa
);

Kernel32.dll, BOOL WINAPI SetEnvironmentStringsA(
    __in LPCH NewEnvironment
);

Kernel32.dll, BOOL WINAPI SetEnvironmentStringsW(
    __in LPCH NewEnvironment
);

Kernel32.dll, BOOL WINAPI FreeEnvironmentStringsA(
    __in LPCH bbb
);

Kernel32.dll, BOOL WINAPI FreeEnvironmentStringsW(
    __in LPCH bbb
);

Kernel32.dll, VOID WINAPI RaiseException(
    __in DWORD dwExceptionCode,
    __in DWORD dwExceptionFlags,
    __in DWORD nNumberOfArguments,
    __in_ecount_opt CONST ULONG_PTR *lpArguments
);

Kernel32.dll, VOID WINAPI RaiseFailFastException(
    __in_opt PEXCEPTION_RECORD pExceptionRecord,
    __in PCONTEXT pContextRecord,
    __in DWORD dwFlags
);

Kernel32.dll, LONG WINAPI UnhandledExceptionFilter(
    __in struct _EXCEPTION_POINTERS *ExceptionInfo
);

Kernel32.dll, LPTOP_LEVEL_EXCEPTION_FILTER WINAPI SetUnhandledExceptionFilter(
    __in_opt LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter
);

Kernel32.dll, LPVOID WINAPI CreateFiber(
    __in     SIZE_T dwStackSize,
    __in     LPFIBER_START_ROUTINE lpStartAddress,
    __in_opt LPVOID lpParameter
);

Kernel32.dll, LPVOID WINAPI CreateFiberEx(
    __in     SIZE_T dwStackCommitSize,
    __in     SIZE_T dwStackReserveSize,
    __in     DWORD dwFlags,
    __in     LPFIBER_START_ROUTINE lpStartAddress,
    __in_opt LPVOID lpParameter
);

Kernel32.dll, VOID WINAPI DeleteFiber(
    __in LPVOID lpFiber
);

Kernel32.dll, LPVOID WINAPI ConvertThreadToFiber(
    __in_opt LPVOID lpParameter
);

Kernel32.dll, LPVOID WINAPI ConvertThreadToFiberEx(
    __in_opt LPVOID lpParameter,
    __in     DWORD dwFlags
);

Kernel32.dll, BOOL WINAPI ConvertFiberToThread(
    void aaa
);

Kernel32.dll, BOOL WINAPI IsThreadAFiber(
    void aaa
);

Kernel32.dll, VOID WINAPI SwitchToFiber(
    __in LPVOID lpFiber
);

Kernel32.dll, BOOL WINAPI SwitchToThread(
    void aaa
);

Kernel32.dll, HANDLE WINAPI CreateThread(
    __in_opt  LPSECURITY_ATTRIBUTES lpThreadAttributes,
    __in      SIZE_T dwStackSize,
    __in      LPTHREAD_START_ROUTINE lpStartAddress,
    __in_opt  LPVOID lpParameter,
    __in      DWORD dwCreationFlags,
    __out_opt LPDWORD lpThreadId
);

Kernel32.dll, HANDLE WINAPI CreateRemoteThread(
    __in      HANDLE hProcess,
    __in_opt  LPSECURITY_ATTRIBUTES lpThreadAttributes,
    __in      SIZE_T dwStackSize,
    __in      LPTHREAD_START_ROUTINE lpStartAddress,
    __in_opt  LPVOID lpParameter,
    __in      DWORD dwCreationFlags,
    __out_opt LPDWORD lpThreadId
);

Kernel32.dll, HANDLE WINAPI CreateRemoteThreadEx(
    __in      HANDLE hProcess,
    __in_opt  LPSECURITY_ATTRIBUTES lpThreadAttributes,
    __in      SIZE_T dwStackSize,
    __in      LPTHREAD_START_ROUTINE lpStartAddress,
    __in_opt  LPVOID lpParameter,
    __in      DWORD dwCreationFlags,
    __in_opt  LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
    __out_opt LPDWORD lpThreadId
);

Kernel32.dll, HANDLE WINAPI GetCurrentThread(
    void aaa
);

Kernel32.dll, DWORD WINAPI GetCurrentThreadId(
    void aaa
);

Kernel32.dll, BOOL WINAPI SetThreadStackGuarantee(
    __inout PULONG StackSizeInBytes
);

Kernel32.dll, DWORD WINAPI GetProcessIdOfThread(
    __in HANDLE Thread
);

Kernel32.dll, DWORD WINAPI GetThreadId(
    __in HANDLE Thread
);

Kernel32.dll, DWORD WINAPI GetProcessId(
    __in HANDLE Process
);

Kernel32.dll, DWORD WINAPI GetCurrentProcessorNumber(
    void aaa
);

Kernel32.dll, VOID WINAPI GetCurrentProcessorNumberEx(
    __out PPROCESSOR_NUMBER ProcNumber
);

Kernel32.dll, BOOL WINAPI GetThreadGroupAffinity(
    __in HANDLE hThread,
    __out PGROUP_AFFINITY GroupAffinity
);

Kernel32.dll, DWORD_PTR WINAPI SetThreadAffinityMask(
    __in HANDLE hThread,
    __in DWORD_PTR dwThreadAffinityMask
);

Kernel32.dll, BOOL WINAPI SetThreadGroupAffinity(
    __in HANDLE hThread,
    __in CONST GROUP_AFFINITY *GroupAffinity,
    __out_opt PGROUP_AFFINITY PreviousGroupAffinity
);

Kernel32.dll, BOOL WINAPI SetThreadIdealProcessorEx(
    __in HANDLE hThread,
    __in PPROCESSOR_NUMBER lpIdealProcessor,
    __out_opt PPROCESSOR_NUMBER lpPreviousIdealProcessor
);

Kernel32.dll, BOOL WINAPI GetThreadIdealProcessorEx(
    __in HANDLE hThread,
    __out PPROCESSOR_NUMBER lpIdealProcessor
);

Kernel32.dll, DWORD WINAPI SetThreadIdealProcessor(
    __in HANDLE hThread,
    __in DWORD dwIdealProcessor
);

Kernel32.dll, BOOL WINAPI SetProcessDEPPolicy(
    __in DWORD dwFlags
);

Kernel32.dll, BOOL WINAPI GetProcessDEPPolicy(
    __in HANDLE hProcess,
    __out LPDWORD lpFlags,
    __out PBOOL lpPermanent
);

Kernel32.dll, BOOL WINAPI SetProcessPriorityBoost(
    __in HANDLE hProcess,
    __in BOOL bDisablePriorityBoost
);

Kernel32.dll, BOOL WINAPI GetProcessPriorityBoost(
    __in  HANDLE hProcess,
    __out PBOOL  pDisablePriorityBoost
);

Kernel32.dll, BOOL WINAPI RequestWakeupLatency(
    __in LATENCY_TIME latency
);

Kernel32.dll, BOOL WINAPI IsSystemResumeAutomatic(
    void aaa
);

Kernel32.dll, HANDLE WINAPI OpenThread(
    __in DWORD dwDesiredAccess,
    __in BOOL bInheritHandle,
    __in DWORD dwThreadId
);

Kernel32.dll, BOOL WINAPI SetThreadPriority(
    __in HANDLE hThread,
    __in int nPriority
);

Kernel32.dll, BOOL WINAPI SetThreadPriorityBoost(
    __in HANDLE hThread,
    __in BOOL bDisablePriorityBoost
);

Kernel32.dll, BOOL WINAPI GetThreadPriorityBoost(
    __in  HANDLE hThread,
    __out PBOOL pDisablePriorityBoost
);

Kernel32.dll, int WINAPI GetThreadPriority(
    __in HANDLE hThread
);

Kernel32.dll, BOOL WINAPI GetThreadTimes(
    __in  HANDLE hThread,
    __out LPFILETIME lpCreationTime,
    __out LPFILETIME lpExitTime,
    __out LPFILETIME lpKernelTime,
    __out LPFILETIME lpUserTime
);

Kernel32.dll, BOOL WINAPI GetThreadIOPendingFlag(
    __in  HANDLE hThread,
    __out PBOOL  lpIOIsPending
);

Kernel32.dll, VOID WINAPI ExitThread(
    __in DWORD dwExitCode
);

Kernel32.dll, BOOL WINAPI TerminateThread(
    __in HANDLE hThread,
    __in DWORD dwExitCode
);

Kernel32.dll, BOOL WINAPI GetExitCodeThread(
    __in  HANDLE hThread,
    __out LPDWORD lpExitCode
);

Kernel32.dll, BOOL WINAPI GetThreadSelectorEntry(
    __in  HANDLE hThread,
    __in  DWORD dwSelector,
    __out LPLDT_ENTRY lpSelectorEntry
);

Kernel32.dll, EXECUTION_STATE WINAPI SetThreadExecutionState(
    __in EXECUTION_STATE esFlags
);

Kernel32.dll, DWORD WINAPI GetLastError(
    void aaa
);

Kernel32.dll, VOID WINAPI SetLastError(
    __in DWORD dwErrCode
);

Kernel32.dll, VOID WINAPI RestoreLastError(
    __in DWORD dwErrCode
);

Kernel32.dll, BOOL WINAPI GetOverlappedResult(
    __in  HANDLE hFile,
    __in  LPOVERLAPPED lpOverlapped,
    __out LPDWORD lpNumberOfBytesTransferred,
    __in  BOOL bWait
);

Kernel32.dll, HANDLE WINAPI CreateIoCompletionPort(
    __in     HANDLE FileHandle,
    __in_opt HANDLE ExistingCompletionPort,
    __in     ULONG_PTR CompletionKey,
    __in     DWORD NumberOfConcurrentThreads
);

Kernel32.dll, BOOL WINAPI GetQueuedCompletionStatus(
    __in  HANDLE CompletionPort,
    __out LPDWORD lpNumberOfBytesTransferred,
    __out PULONG_PTR lpCompletionKey,
    __out LPOVERLAPPED *lpOverlapped,
    __in  DWORD dwMilliseconds
);

Kernel32.dll, BOOL WINAPI GetQueuedCompletionStatusEx(
    __in  HANDLE CompletionPort,
    __out_ecount_part LPOVERLAPPED_ENTRY lpCompletionPortEntries,
    __in  ULONG ulCount,
    __out PULONG ulNumEntriesRemoved,
    __in  DWORD dwMilliseconds,
    __in  BOOL fAlertable
);

Kernel32.dll, BOOL WINAPI PostQueuedCompletionStatus(
    __in     HANDLE CompletionPort,
    __in     DWORD dwNumberOfBytesTransferred,
    __in     ULONG_PTR dwCompletionKey,
    __in_opt LPOVERLAPPED lpOverlapped
);

Kernel32.dll, BOOL WINAPI SetFileCompletionNotificationModes(
    __in HANDLE FileHandle,
    __in UCHAR Flags
);

Kernel32.dll, BOOL WINAPI SetFileIoOverlappedRange(
    __in HANDLE FileHandle,
    __in PUCHAR OverlappedRangeStart,
    __in ULONG Length
);

Kernel32.dll, UINT WINAPI GetErrorMode(
    void aaa
);

Kernel32.dll, UINT WINAPI SetErrorMode(
    __in UINT uMode
);

Kernel32.dll, DWORD WINAPI GetThreadErrorMode(
    void aaa
);

Kernel32.dll, BOOL WINAPI SetThreadErrorMode(
    __in DWORD dwNewMode,
    __in_opt LPDWORD lpOldMode
);

Kernel32.dll, BOOL WINAPI ReadProcessMemory(
    __in      HANDLE hProcess,
    __in      LPCVOID lpBaseAddress,
    __out_bcount_part LPVOID lpBuffer,
    __in      SIZE_T nSize,
    __out_opt SIZE_T * lpNumberOfBytesRead
);

Kernel32.dll, BOOL WINAPI WriteProcessMemory(
    __in      HANDLE hProcess,
    __in      LPVOID lpBaseAddress,
    __in_bcount LPCVOID lpBuffer,
    __in      SIZE_T nSize,
    __out_opt SIZE_T * lpNumberOfBytesWritten
);

Kernel32.dll, BOOL WINAPI GetThreadContext(
    __in    HANDLE hThread,
    __inout LPCONTEXT lpContext
);

Kernel32.dll, BOOL WINAPI SetThreadContext(
    __in HANDLE hThread,
    __in CONST CONTEXT *lpContext
);

Kernel32.dll, BOOL WINAPI Wow64GetThreadContext(
    __in    HANDLE hThread,
    __inout PWOW64_CONTEXT lpContext
);

Kernel32.dll, BOOL WINAPI Wow64GetThreadSelectorEntry(
    __in HANDLE hThread,
    __in DWORD dwSelector,
    __out PWOW64_LDT_ENTRY lpSelectorEntry
);

Kernel32.dll, BOOL WINAPI Wow64SetThreadContext(
    __in HANDLE hThread,
    __in CONST WOW64_CONTEXT *lpContext
);

Kernel32.dll, DWORD WINAPI SuspendThread(
    __in HANDLE hThread
);

Kernel32.dll, DWORD WINAPI Wow64SuspendThread(
    __in HANDLE hThread
);

Kernel32.dll, DWORD WINAPI ResumeThread(
    __in HANDLE hThread
);

Kernel32.dll, DWORD WINAPI QueueUserAPC(
    __in PAPCFUNC pfnAPC,
    __in HANDLE hThread,
    __in ULONG_PTR dwData
);

Kernel32.dll, BOOL WINAPI IsDebuggerPresent(
    void aaa
);

Kernel32.dll, BOOL WINAPI CheckRemoteDebuggerPresent(
    __in  HANDLE hProcess,
    __out PBOOL pbDebuggerPresent
);

Kernel32.dll, VOID WINAPI DebugBreak(
    void aaa
);

Kernel32.dll, BOOL WINAPI WaitForDebugEvent(
    __in LPDEBUG_EVENT lpDebugEvent,
    __in DWORD dwMilliseconds
);

Kernel32.dll, BOOL WINAPI ContinueDebugEvent(
    __in DWORD dwProcessId,
    __in DWORD dwThreadId,
    __in DWORD dwContinueStatus
);

Kernel32.dll, BOOL WINAPI DebugActiveProcess(
    __in DWORD dwProcessId
);

Kernel32.dll, BOOL WINAPI DebugActiveProcessStop(
    __in DWORD dwProcessId
);

Kernel32.dll, BOOL WINAPI DebugSetProcessKillOnExit(
    __in BOOL KillOnExit
);

Kernel32.dll, BOOL WINAPI DebugBreakProcess(
    __in HANDLE Process
);

Kernel32.dll, VOID WINAPI InitializeCriticalSection(
    __out LPCRITICAL_SECTION lpCriticalSection
);

Kernel32.dll, VOID WINAPI EnterCriticalSection(
    __inout LPCRITICAL_SECTION lpCriticalSection
);

Kernel32.dll, VOID WINAPI LeaveCriticalSection(
    __inout LPCRITICAL_SECTION lpCriticalSection
);

Kernel32.dll, BOOL WINAPI InitializeCriticalSectionAndSpinCount(
    __out LPCRITICAL_SECTION lpCriticalSection,
    __in  DWORD dwSpinCount
);

Kernel32.dll, BOOL WINAPI InitializeCriticalSectionEx(
    __out LPCRITICAL_SECTION lpCriticalSection,
    __in  DWORD dwSpinCount,
    __in  DWORD Flags
);

Kernel32.dll, DWORD WINAPI SetCriticalSectionSpinCount(
    __inout LPCRITICAL_SECTION lpCriticalSection,
    __in    DWORD dwSpinCount
);

Kernel32.dll, BOOL WINAPI TryEnterCriticalSection(
    __inout LPCRITICAL_SECTION lpCriticalSection
);

Kernel32.dll, VOID WINAPI DeleteCriticalSection(
    __inout LPCRITICAL_SECTION lpCriticalSection
);

Kernel32.dll, BOOL WINAPI SetEvent(
    __in HANDLE hEvent
);

Kernel32.dll, BOOL WINAPI ResetEvent(
    __in HANDLE hEvent
);

Kernel32.dll, BOOL WINAPI PulseEvent(
    __in HANDLE hEvent
);

Kernel32.dll, BOOL WINAPI ReleaseSemaphore(
    __in      HANDLE hSemaphore,
    __in      LONG lReleaseCount,
    __out_opt LPLONG lpPreviousCount
);

Kernel32.dll, BOOL WINAPI ReleaseMutex(
    __in HANDLE hMutex
);

Kernel32.dll, HGLOBAL WINAPI LoadResource(
    __in_opt HMODULE hModule,
    __in HRSRC hResInfo
);

Kernel32.dll, DWORD WINAPI SizeofResource(
    __in_opt HMODULE hModule,
    __in HRSRC hResInfo
);

Kernel32.dll, ATOM WINAPI GlobalDeleteAtom(
    __in ATOM nAtom
);

Kernel32.dll, BOOL WINAPI InitAtomTable(
    __in DWORD nSize
);

Kernel32.dll, ATOM WINAPI DeleteAtom(
    __in ATOM nAtom
);

Kernel32.dll, UINT WINAPI SetHandleCount(
    __in UINT uNumber
);

Kernel32.dll, DWORD WINAPI GetLogicalDrives(
    void aaa
);

Kernel32.dll, BOOL WINAPI LockFile(
    __in HANDLE hFile,
    __in DWORD dwFileOffsetLow,
    __in DWORD dwFileOffsetHigh,
    __in DWORD nNumberOfBytesToLockLow,
    __in DWORD nNumberOfBytesToLockHigh
);

Kernel32.dll, BOOL WINAPI UnlockFile(
    __in HANDLE hFile,
    __in DWORD dwFileOffsetLow,
    __in DWORD dwFileOffsetHigh,
    __in DWORD nNumberOfBytesToUnlockLow,
    __in DWORD nNumberOfBytesToUnlockHigh
);

Kernel32.dll, BOOL WINAPI LockFileEx(
    __in       HANDLE hFile,
    __in       DWORD dwFlags,
    __reserved DWORD dwReserved,
    __in       DWORD nNumberOfBytesToLockLow,
    __in       DWORD nNumberOfBytesToLockHigh,
    __inout    LPOVERLAPPED lpOverlapped
);

Kernel32.dll, BOOL WINAPI UnlockFileEx(
    __in       HANDLE hFile,
    __reserved DWORD dwReserved,
    __in       DWORD nNumberOfBytesToUnlockLow,
    __in       DWORD nNumberOfBytesToUnlockHigh,
    __inout    LPOVERLAPPED lpOverlapped
);

Kernel32.dll, BOOL WINAPI GetFileInformationByHandle(
    __in  HANDLE hFile,
    __out LPBY_HANDLE_FILE_INFORMATION lpFileInformation
);

Kernel32.dll, DWORD WINAPI GetFileType(
    __in HANDLE hFile
);



Kernel32.dll, HANDLE WINAPI GetStdHandle(
    __in DWORD nStdHandle
);

Kernel32.dll, BOOL WINAPI SetStdHandle(
    __in DWORD nStdHandle,
    __in HANDLE hHandle
);

Kernel32.dll, BOOL WINAPI SetStdHandleEx(
    __in      DWORD nStdHandle,
    __in      HANDLE hHandle,
    __out_opt PHANDLE phPrevValue
);


Kernel32.dll, BOOL WINAPI FlushFileBuffers(
    __in HANDLE hFile
);

Kernel32.dll, BOOL WINAPI RequestDeviceWakeup(
    __in HANDLE hDevice
);

Kernel32.dll, BOOL WINAPI CancelDeviceWakeupRequest(
    __in HANDLE hDevice
);

Kernel32.dll, BOOL WINAPI GetDevicePowerState(
    __in  HANDLE hDevice,
    __out BOOL *pfOn
);

Kernel32.dll, BOOL WINAPI SetMessageWaitingIndicator(
    __in HANDLE hMsgIndicator,
    __in ULONG ulMsgCount
);

Kernel32.dll, BOOL WINAPI SetEndOfFile(
    __in HANDLE hFile
);

Kernel32.dll, BOOL WINAPI SetFilePointerEx(
    __in      HANDLE hFile,
    __in      LARGE_INTEGER liDistanceToMove,
    __out_opt PLARGE_INTEGER lpNewFilePointer,
    __in      DWORD dwMoveMethod
);

Kernel32.dll, BOOL WINAPI GetFileTime(
    __in      HANDLE hFile,
    __out_opt LPFILETIME lpCreationTime,
    __out_opt LPFILETIME lpLastAccessTime,
    __out_opt LPFILETIME lpLastWriteTime
);

Kernel32.dll, BOOL WINAPI SetFileTime(
    __in     HANDLE hFile,
    __in_opt CONST FILETIME *lpCreationTime,
    __in_opt CONST FILETIME *lpLastAccessTime,
    __in_opt CONST FILETIME *lpLastWriteTime
);

Kernel32.dll, BOOL WINAPI SetFileValidData(
    __in HANDLE hFile,
    __in LONGLONG ValidDataLength
);

Kernel32.dll, BOOL WINAPI SetFileShortNameA(
    __in HANDLE hFile,
    __in LPCSTR lpShortName
);

Kernel32.dll, BOOL WINAPI SetFileShortNameW(
    __in HANDLE hFile,
    __in LPCSTR lpShortName
);

Kernel32.dll, BOOL WINAPI CloseHandle(
    __in HANDLE hObject
);

Kernel32.dll, BOOL WINAPI DuplicateHandle(
    __in        HANDLE hSourceProcessHandle,
    __in        HANDLE hSourceHandle,
    __in        HANDLE hTargetProcessHandle,
    __deref_out LPHANDLE lpTargetHandle,
    __in        DWORD dwDesiredAccess,
    __in        BOOL bInheritHandle,
    __in        DWORD dwOptions
);

Kernel32.dll, BOOL WINAPI GetHandleInformation(
    __in  HANDLE hObject,
    __out LPDWORD lpdwFlags
);

Kernel32.dll, BOOL WINAPI SetHandleInformation(
    __in HANDLE hObject,
    __in DWORD dwMask,
    __in DWORD dwFlags
);

Kernel32.dll, DWORD WINAPI LoadModule(
    __in LPCSTR lpModuleName,
    __in LPVOID lpParameterBlock
);

Kernel32.dll, UINT WINAPI WinExec(
    __in LPCSTR lpCmdLine,
    __in UINT uCmdShow
);

Kernel32.dll, BOOL WINAPI ClearCommBreak(
    __in HANDLE hFile
);

Kernel32.dll, BOOL WINAPI ClearCommError(
    __in      HANDLE hFile,
    __out_opt LPDWORD lpErrors,
    __out_opt LPCOMSTAT lpStat
);

Kernel32.dll, BOOL WINAPI SetupComm(
    __in HANDLE hFile,
    __in DWORD dwInQueue,
    __in DWORD dwOutQueue
);

Kernel32.dll, BOOL WINAPI EscapeCommFunction(
    __in HANDLE hFile,
    __in DWORD dwFunc
);

Kernel32.dll, BOOL WINAPI GetCommConfig(
    __in      HANDLE hCommDev,
    __out_bcount_opt LPCOMMCONFIG lpCC,
    __inout   LPDWORD lpdwSize
);

Kernel32.dll, BOOL WINAPI GetCommMask(
    __in  HANDLE hFile,
    __out LPDWORD lpEvtMask
);

Kernel32.dll, BOOL WINAPI GetCommProperties(
    __in    HANDLE hFile,
    __inout LPCOMMPROP lpCommProp
);

Kernel32.dll, BOOL WINAPI GetCommModemStatus(
    __in  HANDLE hFile,
    __out LPDWORD lpModemStat
);

Kernel32.dll, BOOL WINAPI GetCommState(
    __in  HANDLE hFile,
    __out LPDCB lpDCB
);

Kernel32.dll, BOOL WINAPI GetCommTimeouts(
    __in  HANDLE hFile,
    __out LPCOMMTIMEOUTS lpCommTimeouts
);

Kernel32.dll, BOOL WINAPI PurgeComm(
    __in HANDLE hFile,
    __in DWORD dwFlags
);

Kernel32.dll, BOOL WINAPI SetCommBreak(
    __in HANDLE hFile
);

Kernel32.dll, BOOL WINAPI SetCommConfig(
    __in HANDLE hCommDev,
    __in_bcount LPCOMMCONFIG lpCC,
    __in DWORD dwSize
);

Kernel32.dll, BOOL WINAPI SetCommMask(
    __in HANDLE hFile,
    __in DWORD dwEvtMask
);

Kernel32.dll, BOOL WINAPI SetCommState(
    __in HANDLE hFile,
    __in LPDCB lpDCB
);

Kernel32.dll, BOOL WINAPI SetCommTimeouts(
    __in HANDLE hFile,
    __in LPCOMMTIMEOUTS lpCommTimeouts
);

Kernel32.dll, BOOL WINAPI TransmitCommChar(
    __in HANDLE hFile,
    __in char cChar
);

Kernel32.dll, BOOL WINAPI WaitCommEvent(
    __in        HANDLE hFile,
    __inout     LPDWORD lpEvtMask,
    __inout_opt LPOVERLAPPED lpOverlapped
);

Kernel32.dll, DWORD WINAPI SetTapePosition(
    __in HANDLE hDevice,
    __in DWORD dwPositionMethod,
    __in DWORD dwPartition,
    __in DWORD dwOffsetLow,
    __in DWORD dwOffsetHigh,
    __in BOOL bImmediate
);

Kernel32.dll, DWORD WINAPI GetTapePosition(
    __in  HANDLE hDevice,
    __in  DWORD dwPositionType,
    __out LPDWORD lpdwPartition,
    __out LPDWORD lpdwOffsetLow,
    __out LPDWORD lpdwOffsetHigh
);

Kernel32.dll, DWORD WINAPI PrepareTape(
    __in HANDLE hDevice,
    __in DWORD dwOperation,
    __in BOOL bImmediate
);

Kernel32.dll, DWORD WINAPI EraseTape(
    __in HANDLE hDevice,
    __in DWORD dwEraseType,
    __in BOOL bImmediate
);

Kernel32.dll, DWORD WINAPI CreateTapePartition(
    __in HANDLE hDevice,
    __in DWORD dwPartitionMethod,
    __in DWORD dwCount,
    __in DWORD dwSize
);

Kernel32.dll, DWORD WINAPI WriteTapemark(
    __in HANDLE hDevice,
    __in DWORD dwTapemarkType,
    __in DWORD dwTapemarkCount,
    __in BOOL bImmediate
);

Kernel32.dll, DWORD WINAPI GetTapeStatus(
    __in HANDLE hDevice
);

Kernel32.dll, DWORD WINAPI GetTapeParameters(
    __in    HANDLE hDevice,
    __in    DWORD dwOperation,
    __inout LPDWORD lpdwSize,
    __out_bcount LPVOID lpTapeInformation
);

Kernel32.dll, DWORD WINAPI SetTapeParameters(
    __in HANDLE hDevice,
    __in DWORD dwOperation,
    __in LPVOID lpTapeInformation
);

Kernel32.dll, BOOL WINAPI Beep(
    __in DWORD dwFreq,
    __in DWORD dwDuration
);

Kernel32.dll, int WINAPI MulDiv(
    __in int nNumber,
    __in int nNumerator,
    __in int nDenominator
);

Kernel32.dll, VOID WINAPI GetSystemTime(
    __out LPSYSTEMTIME lpSystemTime
);

Kernel32.dll, VOID WINAPI GetSystemTimeAsFileTime(
    __out LPFILETIME lpSystemTimeAsFileTime
);

Kernel32.dll, BOOL WINAPI SetSystemTime(
    __in CONST SYSTEMTIME *lpSystemTime
);

Kernel32.dll, VOID WINAPI GetLocalTime(
    __out LPSYSTEMTIME lpSystemTime
);

Kernel32.dll, BOOL WINAPI SetLocalTime(
    __in CONST SYSTEMTIME *lpSystemTime
);

Kernel32.dll, VOID WINAPI GetSystemInfo(
    __out LPSYSTEM_INFO lpSystemInfo
);

Kernel32.dll, DEP_SYSTEM_POLICY_TYPE WINAPI GetSystemDEPPolicy(
    void aaa
);

Kernel32.dll, BOOL WINAPI SetSystemFileCacheSize(
    __in SIZE_T MinimumFileCacheSize,
    __in SIZE_T MaximumFileCacheSize,
    __in DWORD Flags
);

Kernel32.dll, BOOL WINAPI GetSystemFileCacheSize(
    __out PSIZE_T lpMinimumFileCacheSize,
    __out PSIZE_T lpMaximumFileCacheSize,
    __out PDWORD lpFlags
);

Kernel32.dll, BOOL WINAPI GetSystemRegistryQuota(
    __out_opt PDWORD pdwQuotaAllowed,
    __out_opt PDWORD pdwQuotaUsed
);

Kernel32.dll, BOOL WINAPI GetSystemTimes(
    __out_opt LPFILETIME lpIdleTime,
    __out_opt LPFILETIME lpKernelTime,
    __out_opt LPFILETIME lpUserTime
);

Kernel32.dll, VOID WINAPI GetNativeSystemInfo(
    __out LPSYSTEM_INFO lpSystemInfo
);

Kernel32.dll, BOOL WINAPI IsProcessorFeaturePresent(
    __in DWORD ProcessorFeature
);

Kernel32.dll, BOOL WINAPI SystemTimeToTzSpecificLocalTime(
    __in_opt CONST TIME_ZONE_INFORMATION *lpTimeZoneInformation,
    __in     CONST SYSTEMTIME *lpUniversalTime,
    __out    LPSYSTEMTIME lpLocalTime
);

Kernel32.dll, BOOL WINAPI TzSpecificLocalTimeToSystemTime(
    __in_opt CONST TIME_ZONE_INFORMATION *lpTimeZoneInformation,
    __in     CONST SYSTEMTIME *lpLocalTime,
    __out    LPSYSTEMTIME lpUniversalTime
);

Kernel32.dll, BOOL WINAPI GetTimeZoneInformationForYear(
    __in USHORT wYear,
    __in_opt PDYNAMIC_TIME_ZONE_INFORMATION pdtzi,
    __out LPTIME_ZONE_INFORMATION ptzi
);

Kernel32.dll, DWORD WINAPI GetTimeZoneInformation(
    __out LPTIME_ZONE_INFORMATION lpTimeZoneInformation
);

Kernel32.dll, BOOL WINAPI SetTimeZoneInformation(
    __in CONST TIME_ZONE_INFORMATION *lpTimeZoneInformation
);

Kernel32.dll, DWORD WINAPI GetDynamicTimeZoneInformation(
    __out PDYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation
);

Kernel32.dll, BOOL WINAPI SetDynamicTimeZoneInformation(
    __in CONST DYNAMIC_TIME_ZONE_INFORMATION *lpTimeZoneInformation
);

Kernel32.dll, BOOL WINAPI SystemTimeToFileTime(
    __in  CONST SYSTEMTIME *lpSystemTime,
    __out LPFILETIME lpFileTime
);

Kernel32.dll, BOOL WINAPI FileTimeToLocalFileTime(
    __in  CONST FILETIME *lpFileTime,
    __out LPFILETIME lpLocalFileTime
);

Kernel32.dll, BOOL WINAPI LocalFileTimeToFileTime(
    __in  CONST FILETIME *lpLocalFileTime,
    __out LPFILETIME lpFileTime
);

Kernel32.dll, BOOL WINAPI FileTimeToSystemTime(
    __in  CONST FILETIME *lpFileTime,
    __out LPSYSTEMTIME lpSystemTime
);

Kernel32.dll, LONG WINAPI CompareFileTime(
    __in CONST FILETIME *lpFileTime1,
    __in CONST FILETIME *lpFileTime2
);

Kernel32.dll, BOOL WINAPI FileTimeToDosDateTime(
    __in  CONST FILETIME *lpFileTime,
    __out LPWORD lpFatDate,
    __out LPWORD lpFatTime
);

Kernel32.dll, BOOL WINAPI DosDateTimeToFileTime(
    __in  WORD wFatDate,
    __in  WORD wFatTime,
    __out LPFILETIME lpFileTime
);

Kernel32.dll, DWORD WINAPI GetTickCount(
    void aaa
);

Kernel32.dll, ULONGLONG WINAPI GetTickCount64(
    void aaa
);

Kernel32.dll, BOOL WINAPI SetSystemTimeAdjustment(
    __in DWORD dwTimeAdjustment,
    __in BOOL  bTimeAdjustmentDisabled
);

Kernel32.dll, BOOL WINAPI GetSystemTimeAdjustment(
    __out PDWORD lpTimeAdjustment,
    __out PDWORD lpTimeIncrement,
    __out PBOOL  lpTimeAdjustmentDisabled
);

Kernel32.dll, DWORD WINAPI FormatMessageA(
    __in     DWORD dwFlags,
    __in_opt LPCVOID lpSource,
    __in     DWORD dwMessageId,
    __in     DWORD dwLanguageId,
    __out    LPSTR lpBuffer,
    __in     DWORD nSize,
    __in_opt va_list *Arguments
);

Kernel32.dll, DWORD WINAPI FormatMessageW(
    __in     DWORD dwFlags,
    __in_opt LPCVOID lpSource,
    __in     DWORD dwMessageId,
    __in     DWORD dwLanguageId,
    __out    LPSTR lpBuffer,
    __in     DWORD nSize,
    __in_opt va_list *Arguments
);

Kernel32.dll, DWORD WINAPI FormatMessage(
    DWORD dwFlags,
    LPCVOID lpSource,
    DWORD dwMessageId,
    DWORD dwLanguageId,
    LPTSTR lpBuffer,
    DWORD nSize,
    va_list *Arguments
    );

Kernel32.dll, BOOL WINAPI CreatePipe(
    __out_ecount_full PHANDLE hReadPipe,
    __out_ecount_full PHANDLE hWritePipe,
    __in_opt LPSECURITY_ATTRIBUTES lpPipeAttributes,
    __in     DWORD nSize
);

Kernel32.dll, BOOL WINAPI ConnectNamedPipe(
    __in        HANDLE hNamedPipe,
    __inout_opt LPOVERLAPPED lpOverlapped
);

Kernel32.dll, BOOL WINAPI DisconnectNamedPipe(
    __in HANDLE hNamedPipe
);

Kernel32.dll, BOOL WINAPI SetNamedPipeHandleState(
    __in     HANDLE hNamedPipe,
    __in_opt LPDWORD lpMode,
    __in_opt LPDWORD lpMaxCollectionCount,
    __in_opt LPDWORD lpCollectDataTimeout
);

Kernel32.dll, BOOL WINAPI GetNamedPipeInfo(
    __in      HANDLE hNamedPipe,
    __out_opt LPDWORD lpFlags,
    __out_opt LPDWORD lpOutBufferSize,
    __out_opt LPDWORD lpInBufferSize,
    __out_opt LPDWORD lpMaxInstances
);

Kernel32.dll, BOOL WINAPI PeekNamedPipe(
    __in      HANDLE hNamedPipe,
    __out_bcount_part_opt LPVOID lpBuffer,
    __in      DWORD nBufferSize,
    __out_opt LPDWORD lpBytesRead,
    __out_opt LPDWORD lpTotalBytesAvail,
    __out_opt LPDWORD lpBytesLeftThisMessage
);

Kernel32.dll, BOOL WINAPI TransactNamedPipe(
    __in        HANDLE hNamedPipe,
    __in_bcount_opt LPVOID lpInBuffer,
    __in        DWORD nInBufferSize,
    __out_bcount_part_opt LPVOID lpOutBuffer,
    __in        DWORD nOutBufferSize,
    __out       LPDWORD lpBytesRead,
    __inout_opt LPOVERLAPPED lpOverlapped
);

Kernel32.dll, HANDLE WINAPI CreateMailslotA(
    __in     LPCSTR lpName,
    __in     DWORD nMaxMessageSize,
    __in     DWORD lReadTimeout,
    __in_opt LPSECURITY_ATTRIBUTES lpSecurityAttributes
);

Kernel32.dll, HANDLE WINAPI CreateMailslotW(
    __in     LPCSTR lpName,
    __in     DWORD nMaxMessageSize,
    __in     DWORD lReadTimeout,
    __in_opt LPSECURITY_ATTRIBUTES lpSecurityAttributes
);

Kernel32.dll, BOOL WINAPI GetMailslotInfo(
    __in      HANDLE hMailslot,
    __out_opt LPDWORD lpMaxMessageSize,
    __out_opt LPDWORD lpNextSize,
    __out_opt LPDWORD lpMessageCount,
    __out_opt LPDWORD lpReadTimeout
);

Kernel32.dll, BOOL WINAPI SetMailslotInfo(
    __in HANDLE hMailslot,
    __in DWORD lReadTimeout
);

Kernel32.dll, LPVOID WINAPI MapViewOfFile(
    __in HANDLE hFileMappingObject,
    __in DWORD dwDesiredAccess,
    __in DWORD dwFileOffsetHigh,
    __in DWORD dwFileOffsetLow,
    __in SIZE_T dwNumberOfBytesToMap
);

Kernel32.dll, BOOL WINAPI FlushViewOfFile(
    __in LPCVOID lpBaseAddress,
    __in SIZE_T dwNumberOfBytesToFlush
);

Kernel32.dll, BOOL WINAPI UnmapViewOfFile(
    __in LPCVOID lpBaseAddress
);

Kernel32.dll, int WINAPI lstrcmpA(
    __in LPCSTR lpString1,
    __in LPCSTR lpString2
);

Kernel32.dll, int WINAPI lstrcmpW(
    __in LPCSTR lpString1,
    __in LPCSTR lpString2
);

Kernel32.dll, int WINAPI lstrcmpiA(
    __in LPCSTR lpString1,
    __in LPCSTR lpString2
);

Kernel32.dll, int WINAPI lstrcmpiW(
    __in LPCSTR lpString1,
    __in LPCSTR lpString2
);

Kernel32.dll, LPSTR WINAPI lstrcpynA(
    __out_ecount LPSTR lpString1,
    __in LPCSTR lpString2,
    __in int iMaxLength
);

Kernel32.dll, LPSTR WINAPI lstrcpynW(
    __out_ecount LPSTR lpString1,
    __in LPCSTR lpString2,
    __in int iMaxLength
);

Kernel32.dll, LPSTR WINAPI lstrcpyA(
    __out_z LPSTR lpString1,
    __in  LPCSTR lpString2
);

Kernel32.dll, LPSTR WINAPI lstrcpyW(
    __out_z LPSTR lpString1,
    __in  LPCSTR lpString2
);

Kernel32.dll, LPSTR WINAPI lstrcatA(
    __inout LPSTR lpString1,
    __in    LPCSTR lpString2
);

Kernel32.dll, LPSTR WINAPI lstrcatW(
    __inout LPSTR lpString1,
    __in    LPCSTR lpString2
);

Kernel32.dll, int WINAPI lstrlenA(
    __in LPCSTR lpString
);

Kernel32.dll, int WINAPI lstrlenW(
    __in LPCSTR lpString
);

Kernel32.dll, HFILE WINAPI OpenFile(
    __in    LPCSTR lpFileName,
    __inout LPOFSTRUCT lpReOpenBuff,
    __in    UINT uStyle
);

Kernel32.dll, HFILE WINAPI _lopen(
    __in LPCSTR lpPathName,
    __in int iReadWrite
);

Kernel32.dll, HFILE WINAPI _lcreat(
    __in LPCSTR lpPathName,
    __in int  iAttribute
);

Kernel32.dll, UINT WINAPI _lread(
    __in HFILE hFile,
    __out_bcount_part LPVOID lpBuffer,
    __in UINT uBytes
);

Kernel32.dll, UINT WINAPI _lwrite(
    __in HFILE hFile,
    __in_bcount LPCCH lpBuffer,
    __in UINT uBytes
);

Kernel32.dll, long WINAPI _hread(
    __in HFILE hFile,
    __out_bcount_part LPVOID lpBuffer,
    __in long lBytes
);

Kernel32.dll, long WINAPI _hwrite(
    __in HFILE hFile,
    __in_bcount LPCCH lpBuffer,
    __in long lBytes
);

Kernel32.dll, HFILE WINAPI _lclose(
    __in HFILE hFile
);

Kernel32.dll, LONG WINAPI _llseek(
    __in HFILE hFile,
    __in LONG lOffset,
    __in int iOrigin
);

Kernel32.dll, DWORD WINAPI FlsAlloc(
    __in_opt PFLS_CALLBACK_FUNCTION lpCallback
);

Kernel32.dll, PVOID WINAPI FlsGetValue(
    __in DWORD dwFlsIndex
);

Kernel32.dll, BOOL WINAPI FlsSetValue(
    __in     DWORD dwFlsIndex,
    __in_opt PVOID lpFlsData
);

Kernel32.dll, BOOL WINAPI FlsFree(
    __in DWORD dwFlsIndex
);

Kernel32.dll, DWORD WINAPI TlsAlloc(
    void aaa
);

Kernel32.dll, BOOL WINAPI TlsSetValue(
    __in     DWORD dwTlsIndex,
    __in_opt LPVOID lpTlsValue
);

Kernel32.dll, BOOL WINAPI TlsFree(
    __in DWORD dwTlsIndex
);


Kernel32.dll, DWORD WINAPI WaitForSingleObjectEx(
    __in HANDLE hHandle,
    __in DWORD dwMilliseconds,
    __in BOOL bAlertable
);

Kernel32.dll, DWORD WINAPI WaitForMultipleObjectsEx(
    __in DWORD nCount,
    __in_ecount CONST HANDLE *lpHandles,
    __in BOOL bWaitAll,
    __in DWORD dwMilliseconds,
    __in BOOL bAlertable
);

Kernel32.dll, DWORD WINAPI SignalObjectAndWait(
    __in HANDLE hObjectToSignal,
    __in HANDLE hObjectToWaitOn,
    __in DWORD dwMilliseconds,
    __in BOOL bAlertable
);

Kernel32.dll, BOOL WINAPI BackupRead(
    __in    HANDLE hFile,
    __out_bcount_part LPBYTE lpBuffer,
    __in    DWORD nNumberOfBytesToRead,
    __out   LPDWORD lpNumberOfBytesRead,
    __in    BOOL bAbort,
    __in    BOOL bProcessSecurity,
    __inout LPVOID *lpContext
);

Kernel32.dll, BOOL WINAPI BackupSeek(
    __in    HANDLE hFile,
    __in    DWORD  dwLowBytesToSeek,
    __in    DWORD  dwHighBytesToSeek,
    __out   LPDWORD lpdwLowByteSeeked,
    __out   LPDWORD lpdwHighByteSeeked,
    __inout LPVOID *lpContext
);

Kernel32.dll, BOOL WINAPI BackupWrite(
    __in    HANDLE hFile,
    __in_bcount LPBYTE lpBuffer,
    __in    DWORD nNumberOfBytesToWrite,
    __out   LPDWORD lpNumberOfBytesWritten,
    __in    BOOL bAbort,
    __in    BOOL bProcessSecurity,
    __inout LPVOID *lpContext
);

Kernel32.dll, BOOL WINAPI ReadFileScatter(
    __in       HANDLE hFile,
    __in       FILE_SEGMENT_ELEMENT aSegmentArray[],
    __in       DWORD nNumberOfBytesToRead,
    __reserved LPDWORD lpReserved,
    __inout    LPOVERLAPPED lpOverlapped
);

Kernel32.dll, BOOL WINAPI WriteFileGather(
    __in       HANDLE hFile,
    __in       FILE_SEGMENT_ELEMENT aSegmentArray[],
    __in       DWORD nNumberOfBytesToWrite,
    __reserved LPDWORD lpReserved,
    __inout    LPOVERLAPPED lpOverlapped
);

Kernel32.dll, HANDLE WINAPI CreateMutexA(
    __in_opt LPSECURITY_ATTRIBUTES lpMutexAttributes,
    __in     BOOL bInitialOwner,
    __in_opt LPCSTR lpName
);

Kernel32.dll, HANDLE WINAPI CreateMutexW(
    __in_opt LPSECURITY_ATTRIBUTES lpMutexAttributes,
    __in     BOOL bInitialOwner,
    __in_opt LPCSTR lpName
);

Kernel32.dll, HANDLE WINAPI OpenMutexA(
    __in DWORD dwDesiredAccess,
    __in BOOL bInheritHandle,
    __in LPCSTR lpName
);

Kernel32.dll, HANDLE WINAPI OpenMutexW(
    __in DWORD dwDesiredAccess,
    __in BOOL bInheritHandle,
    __in LPCSTR lpName
);

Kernel32.dll, HANDLE WINAPI CreateEventA(
    __in_opt LPSECURITY_ATTRIBUTES lpEventAttributes,
    __in     BOOL bManualReset,
    __in     BOOL bInitialState,
    __in_opt LPCSTR lpName
);

Kernel32.dll, HANDLE WINAPI CreateEventW(
    __in_opt LPSECURITY_ATTRIBUTES lpEventAttributes,
    __in     BOOL bManualReset,
    __in     BOOL bInitialState,
    __in_opt LPCSTR lpName
);

Kernel32.dll, HANDLE WINAPI OpenEventA(
    __in DWORD dwDesiredAccess,
    __in BOOL bInheritHandle,
    __in LPCSTR lpName
);

Kernel32.dll, HANDLE WINAPI OpenEventW(
    __in DWORD dwDesiredAccess,
    __in BOOL bInheritHandle,
    __in LPCSTR lpName
);

Kernel32.dll, HANDLE WINAPI CreateSemaphoreA(
    __in_opt LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
    __in     LONG lInitialCount,
    __in     LONG lMaximumCount,
    __in_opt LPCSTR lpName
);

Kernel32.dll, HANDLE WINAPI CreateSemaphoreW(
    __in_opt LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
    __in     LONG lInitialCount,
    __in     LONG lMaximumCount,
    __in_opt LPCSTR lpName
);

Kernel32.dll, HANDLE WINAPI OpenSemaphoreA(
    __in DWORD dwDesiredAccess,
    __in BOOL bInheritHandle,
    __in LPCSTR lpName
);

Kernel32.dll, HANDLE WINAPI OpenSemaphoreW(
    __in DWORD dwDesiredAccess,
    __in BOOL bInheritHandle,
    __in LPCSTR lpName
);

Kernel32.dll, HANDLE WINAPI CreateWaitableTimerA(
    __in_opt LPSECURITY_ATTRIBUTES lpTimerAttributes,
    __in     BOOL bManualReset,
    __in_opt LPCSTR lpTimerName
);

Kernel32.dll, HANDLE WINAPI CreateWaitableTimerW(
    __in_opt LPSECURITY_ATTRIBUTES lpTimerAttributes,
    __in     BOOL bManualReset,
    __in_opt LPCSTR lpTimerName
);

Kernel32.dll, HANDLE WINAPI OpenWaitableTimerA(
    __in DWORD dwDesiredAccess,
    __in BOOL bInheritHandle,
    __in LPCSTR lpTimerName
);

Kernel32.dll, HANDLE WINAPI OpenWaitableTimerW(
    __in DWORD dwDesiredAccess,
    __in BOOL bInheritHandle,
    __in LPCSTR lpTimerName
);

Kernel32.dll, BOOL WINAPI SetWaitableTimerEx(
    __in     HANDLE hTimer,
    __in     const LARGE_INTEGER *lpDueTime,
    __in     LONG lPeriod,
    __in_opt PTIMERAPCROUTINE pfnCompletionRoutine,
    __in_opt LPVOID lpArgToCompletionRoutine,
    __in_opt PREASON_CONTEXT WakeContext,
    __in     ULONG TolerableDelay
);

Kernel32.dll, BOOL WINAPI SetWaitableTimer(
    __in     HANDLE hTimer,
    __in     const LARGE_INTEGER *lpDueTime,
    __in     LONG lPeriod,
    __in_opt PTIMERAPCROUTINE pfnCompletionRoutine,
    __in_opt LPVOID lpArgToCompletionRoutine,
    __in     BOOL fResume
);

Kernel32.dll, BOOL WINAPI CancelWaitableTimer(
    __in HANDLE hTimer
);

Kernel32.dll, HANDLE WINAPI CreateMutexExA(
    __in_opt LPSECURITY_ATTRIBUTES lpMutexAttributes,
    __in_opt LPCSTR lpName,
    __in     DWORD dwFlags,
    __in     DWORD dwDesiredAccess
);

Kernel32.dll, HANDLE WINAPI CreateMutexExW(
    __in_opt LPSECURITY_ATTRIBUTES lpMutexAttributes,
    __in_opt LPCSTR lpName,
    __in     DWORD dwFlags,
    __in     DWORD dwDesiredAccess
);

Kernel32.dll, HANDLE WINAPI CreateEventExA(
    __in_opt LPSECURITY_ATTRIBUTES lpEventAttributes,
    __in_opt LPCSTR lpName,
    __in     DWORD dwFlags,
    __in     DWORD dwDesiredAccess
);

Kernel32.dll, HANDLE WINAPI CreateEventExW(
    __in_opt LPSECURITY_ATTRIBUTES lpEventAttributes,
    __in_opt LPCSTR lpName,
    __in     DWORD dwFlags,
    __in     DWORD dwDesiredAccess
);

Kernel32.dll, HANDLE WINAPI CreateSemaphoreExA(
    __in_opt    LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
    __in        LONG lInitialCount,
    __in        LONG lMaximumCount,
    __in_opt    LPCSTR lpName,
    __reserved  DWORD dwFlags,
    __in        DWORD dwDesiredAccess
);

Kernel32.dll, HANDLE WINAPI CreateSemaphoreExW(
    __in_opt    LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
    __in        LONG lInitialCount,
    __in        LONG lMaximumCount,
    __in_opt    LPCSTR lpName,
    __reserved  DWORD dwFlags,
    __in        DWORD dwDesiredAccess
);

Kernel32.dll, HANDLE WINAPI CreateWaitableTimerExA(
    __in_opt LPSECURITY_ATTRIBUTES lpTimerAttributes,
    __in_opt LPCSTR lpTimerName,
    __in     DWORD dwFlags,
    __in     DWORD dwDesiredAccess
);

Kernel32.dll, HANDLE WINAPI CreateWaitableTimerExW(
    __in_opt LPSECURITY_ATTRIBUTES lpTimerAttributes,
    __in_opt LPCSTR lpTimerName,
    __in     DWORD dwFlags,
    __in     DWORD dwDesiredAccess
);

Kernel32.dll, HANDLE WINAPI CreateFileMappingA(
    __in     HANDLE hFile,
    __in_opt LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
    __in     DWORD flProtect,
    __in     DWORD dwMaximumSizeHigh,
    __in     DWORD dwMaximumSizeLow,
    __in_opt LPCSTR lpName
);

Kernel32.dll, HANDLE WINAPI CreateFileMappingW(
    __in     HANDLE hFile,
    __in_opt LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
    __in     DWORD flProtect,
    __in     DWORD dwMaximumSizeHigh,
    __in     DWORD dwMaximumSizeLow,
    __in_opt LPCSTR lpName
);

Kernel32.dll, HANDLE WINAPI CreateFileMappingNumaA(
    __in     HANDLE hFile,
    __in_opt LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
    __in     DWORD flProtect,
    __in     DWORD dwMaximumSizeHigh,
    __in     DWORD dwMaximumSizeLow,
    __in_opt LPCSTR lpName,
    __in     DWORD nndPreferred
);

Kernel32.dll, HANDLE WINAPI CreateFileMappingNumaW(
    __in     HANDLE hFile,
    __in_opt LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
    __in     DWORD flProtect,
    __in     DWORD dwMaximumSizeHigh,
    __in     DWORD dwMaximumSizeLow,
    __in_opt LPCSTR lpName,
    __in     DWORD nndPreferred
);

Kernel32.dll, HANDLE WINAPI OpenFileMappingA(
    __in DWORD dwDesiredAccess,
    __in BOOL bInheritHandle,
    __in LPCSTR lpName
);

Kernel32.dll, HANDLE WINAPI OpenFileMappingW(
    __in DWORD dwDesiredAccess,
    __in BOOL bInheritHandle,
    __in LPCSTR lpName
);

Kernel32.dll, DWORD WINAPI GetLogicalDriveStringsA(
    __in DWORD nBufferLength,
    __out_ecount_part_opt LPSTR lpBuffer
);

Kernel32.dll, DWORD WINAPI GetLogicalDriveStringsW(
    __in DWORD nBufferLength,
    __out_ecount_part_opt LPSTR lpBuffer
);

Kernel32.dll, HANDLE WINAPI CreateMemoryResourceNotification(
    __in MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType
);

Kernel32.dll, BOOL WINAPI QueryMemoryResourceNotification(
    __in  HANDLE ResourceNotificationHandle,
    __out PBOOL  ResourceState
);

Kernel32.dll, HMODULE WINAPI LoadLibraryA(
    __in LPCSTR lpLibFileName
);

Kernel32.dll, HMODULE WINAPI LoadLibraryW(
    __in LPCSTR lpLibFileName
);

Kernel32.dll, DWORD WINAPI GetModuleFileNameA(
    __in_opt HMODULE hModule,
    __out_ecount_part LPSTR lpFilename,
    __in     DWORD nSize
);

Kernel32.dll, DWORD WINAPI GetModuleFileNameW(
    __in_opt HMODULE hModule,
    __out_ecount_part LPSTR lpFilename,
    __in     DWORD nSize
);

Kernel32.dll,  HMODULE WINAPI GetModuleHandleA(
    __in_opt LPCSTR lpModuleName
);

Kernel32.dll,  HMODULE WINAPI GetModuleHandleW(
    __in_opt LPCSTR lpModuleName
);

Kernel32.dll, BOOL WINAPI GetModuleHandleExA(
    __in        DWORD    dwFlags,
    __in_opt    LPCSTR lpModuleName,
    __out HMODULE* phModule
);

Kernel32.dll, BOOL WINAPI GetModuleHandleExW(
    __in        DWORD    dwFlags,
    __in_opt    LPCSTR lpModuleName,
    __out HMODULE* phModule
);

Kernel32.dll, BOOL WINAPI NeedCurrentDirectoryForExePathA(
    __in LPCSTR ExeName
);

Kernel32.dll, BOOL WINAPI NeedCurrentDirectoryForExePathW(
    __in LPCSTR ExeName
);

Kernel32.dll, BOOL WINAPI InitializeProcThreadAttributeList(
    __out_xcount_opt LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
    __in DWORD dwAttributeCount,
    __reserved DWORD dwFlags,
    __inout PSIZE_T lpSize
);

Kernel32.dll, VOID WINAPI DeleteProcThreadAttributeList(
    __inout LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList
);

Kernel32.dll, BOOL WINAPI UpdateProcThreadAttribute(
    __inout LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
    __in DWORD dwFlags,
    __in DWORD_PTR Attribute,
    __in_bcount_opt PVOID lpValue,
    __in SIZE_T cbSize,
    __out_bcount_opt PVOID lpPreviousValue,
    __in_opt PSIZE_T lpReturnSize
);

Kernel32.dll, BOOL WINAPI CreateProcessA(
    __in_opt    LPCSTR lpApplicationName,
    __inout_opt LPSTR lpCommandLine,
    __in_opt    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    __in_opt    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    __in        BOOL bInheritHandles,
    __in        DWORD dwCreationFlags,
    __in_opt    LPVOID lpEnvironment,
    __in_opt    LPCSTR lpCurrentDirectory,
    __in        LPSTARTUPINFOA lpStartupInfo,
    __out       LPPROCESS_INFORMATION lpProcessInformation
);

Kernel32.dll, BOOL WINAPI CreateProcessW(
    __in_opt    LPCSTR lpApplicationName,
    __inout_opt LPSTR lpCommandLine,
    __in_opt    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    __in_opt    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    __in        BOOL bInheritHandles,
    __in        DWORD dwCreationFlags,
    __in_opt    LPVOID lpEnvironment,
    __in_opt    LPCSTR lpCurrentDirectory,
    __in        LPSTARTUPINFOA lpStartupInfo,
    __out       LPPROCESS_INFORMATION lpProcessInformation
);

Kernel32.dll, BOOL WINAPI SetProcessShutdownParameters(
    __in DWORD dwLevel,
    __in DWORD dwFlags
);

Kernel32.dll, BOOL WINAPI GetProcessShutdownParameters(
    __out LPDWORD lpdwLevel,
    __out LPDWORD lpdwFlags
);

Kernel32.dll, DWORD WINAPI GetProcessVersion(
    __in DWORD ProcessId
);

Kernel32.dll, VOID WINAPI FatalAppExitA(
    __in UINT uAction,
    __in LPCSTR lpMessageText
);

Kernel32.dll, VOID WINAPI FatalAppExitW(
    __in UINT uAction,
    __in LPCSTR lpMessageText
);

Kernel32.dll, VOID WINAPI GetStartupInfoA(
    __out LPSTARTUPINFOA lpStartupInfo
);

Kernel32.dll, VOID WINAPI GetStartupInfoW(
    __out LPSTARTUPINFOA lpStartupInfo
);

Kernel32.dll, LPSTR WINAPI GetCommandLineA(
    void aaa
);

Kernel32.dll, LPSTR WINAPI GetCommandLineW(
    void aaa
);

Kernel32.dll, DWORD WINAPI GetEnvironmentVariableA(
    __in_opt LPCSTR lpName,
    __out_ecount_part_opt LPSTR lpBuffer,
    __in DWORD nSize
);

Kernel32.dll, DWORD WINAPI GetEnvironmentVariableW(
    __in_opt LPCSTR lpName,
    __out_ecount_part_opt LPSTR lpBuffer,
    __in DWORD nSize
);

Kernel32.dll, BOOL WINAPI SetEnvironmentVariableA(
    __in     LPCSTR lpName,
    __in_opt LPCSTR lpValue
);

Kernel32.dll, BOOL WINAPI SetEnvironmentVariableW(
    __in     LPCSTR lpName,
    __in_opt LPCSTR lpValue
);

Kernel32.dll, DWORD WINAPI ExpandEnvironmentStringsA(
    __in LPCSTR lpSrc,
    __out_ecount_part_opt LPSTR lpDst,
    __in DWORD nSize
);

Kernel32.dll, DWORD WINAPI ExpandEnvironmentStringsW(
    __in LPCSTR lpSrc,
    __out_ecount_part_opt LPSTR lpDst,
    __in DWORD nSize
);

Kernel32.dll, DWORD WINAPI GetFirmwareEnvironmentVariableA(
    __in LPCSTR lpName,
    __in LPCSTR lpGuid,
    __out_bcount_part_opt PVOID pBuffer,
    __in DWORD    nSize
);

Kernel32.dll, DWORD WINAPI GetFirmwareEnvironmentVariableW(
    __in LPCSTR lpName,
    __in LPCSTR lpGuid,
    __out_bcount_part_opt PVOID pBuffer,
    __in DWORD    nSize
);

Kernel32.dll, BOOL WINAPI SetFirmwareEnvironmentVariableA(
    __in LPCSTR lpName,
    __in LPCSTR lpGuid,
    __in_bcount_opt PVOID pValue,
    __in DWORD    nSize
);

Kernel32.dll, BOOL WINAPI SetFirmwareEnvironmentVariableW(
    __in LPCSTR lpName,
    __in LPCSTR lpGuid,
    __in_bcount_opt PVOID pValue,
    __in DWORD    nSize
);

Kernel32.dll, VOID WINAPI OutputDebugStringA(
    __in_opt LPCSTR lpOutputString
);

Kernel32.dll, VOID WINAPI OutputDebugStringW(
    __in_opt LPCSTR lpOutputString
);

Kernel32.dll, HRSRC WINAPI FindResourceA(
    __in_opt HMODULE hModule,
    __in     LPCSTR lpName,
    __in     LPCSTR lpType
);

Kernel32.dll, HRSRC WINAPI FindResourceW(
    __in_opt HMODULE hModule,
    __in     LPCSTR lpName,
    __in     LPCSTR lpType
);

Kernel32.dll, HRSRC WINAPI FindResourceExA(
    __in_opt HMODULE hModule,
    __in     LPCSTR lpType,
    __in     LPCSTR lpName,
    __in     WORD    wLanguage
);

Kernel32.dll, HRSRC WINAPI FindResourceExW(
    __in_opt HMODULE hModule,
    __in     LPCSTR lpType,
    __in     LPCSTR lpName,
    __in     WORD    wLanguage
);

Kernel32.dll, BOOL WINAPI EnumResourceTypesA(
    __in_opt HMODULE hModule,
    __in     ENUMRESTYPEPROCA lpEnumFunc,
    __in     LONG_PTR lParam
);

Kernel32.dll, BOOL WINAPI EnumResourceTypesW(
    __in_opt HMODULE hModule,
    __in     ENUMRESTYPEPROCA lpEnumFunc,
    __in     LONG_PTR lParam
);

Kernel32.dll, BOOL WINAPI EnumResourceNamesA(
    __in_opt HMODULE hModule,
    __in     LPCSTR lpType,
    __in     ENUMRESNAMEPROCA lpEnumFunc,
    __in     LONG_PTR lParam
);

Kernel32.dll, BOOL WINAPI EnumResourceNamesW(
    __in_opt HMODULE hModule,
    __in     LPCSTR lpType,
    __in     ENUMRESNAMEPROCA lpEnumFunc,
    __in     LONG_PTR lParam
);

Kernel32.dll, BOOL WINAPI EnumResourceLanguagesA(
    __in_opt HMODULE hModule,
    __in     LPCSTR lpType,
    __in     LPCSTR lpName,
    __in     ENUMRESLANGPROCA lpEnumFunc,
    __in     LONG_PTR lParam
);

Kernel32.dll, BOOL WINAPI EnumResourceLanguagesW(
    __in_opt HMODULE hModule,
    __in     LPCSTR lpType,
    __in     LPCSTR lpName,
    __in     ENUMRESLANGPROCA lpEnumFunc,
    __in     LONG_PTR lParam
);

Kernel32.dll, BOOL WINAPI EnumResourceTypesExA(
    __in_opt HMODULE hModule,
    __in ENUMRESTYPEPROCA lpEnumFunc,
    __in LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
);

Kernel32.dll, BOOL WINAPI EnumResourceTypesExW(
    __in_opt HMODULE hModule,
    __in ENUMRESTYPEPROCA lpEnumFunc,
    __in LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
);

Kernel32.dll, BOOL WINAPI EnumResourceNamesExA(
    __in_opt HMODULE hModule,
    __in LPCSTR lpType,
    __in ENUMRESNAMEPROCA lpEnumFunc,
    __in LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
);

Kernel32.dll, BOOL WINAPI EnumResourceNamesExW(
    __in_opt HMODULE hModule,
    __in LPCSTR lpType,
    __in ENUMRESNAMEPROCA lpEnumFunc,
    __in LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
);

Kernel32.dll, BOOL WINAPI EnumResourceLanguagesExA(
    __in_opt HMODULE hModule,
    __in LPCSTR lpType,
    __in LPCSTR lpName,
    __in ENUMRESLANGPROCA lpEnumFunc,
    __in LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
);

Kernel32.dll, BOOL WINAPI EnumResourceLanguagesExW(
    __in_opt HMODULE hModule,
    __in LPCSTR lpType,
    __in LPCSTR lpName,
    __in ENUMRESLANGPROCA lpEnumFunc,
    __in LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
);

Kernel32.dll, HANDLE WINAPI BeginUpdateResourceA(
    __in LPCSTR pFileName,
    __in BOOL bDeleteExistingResources
);

Kernel32.dll, HANDLE WINAPI BeginUpdateResourceW(
    __in LPCSTR pFileName,
    __in BOOL bDeleteExistingResources
);

Kernel32.dll, BOOL WINAPI UpdateResourceA(
    __in HANDLE hUpdate,
    __in LPCSTR lpType,
    __in LPCSTR lpName,
    __in WORD wLanguage,
    __in_bcount_opt LPVOID lpData,
    __in DWORD cb
);

Kernel32.dll, BOOL WINAPI UpdateResourceW(
    __in HANDLE hUpdate,
    __in LPCSTR lpType,
    __in LPCSTR lpName,
    __in WORD wLanguage,
    __in_bcount_opt LPVOID lpData,
    __in DWORD cb
);

Kernel32.dll, BOOL WINAPI EndUpdateResourceA(
    __in HANDLE hUpdate,
    __in BOOL   fDiscard
);

Kernel32.dll, BOOL WINAPI EndUpdateResourceW(
    __in HANDLE hUpdate,
    __in BOOL   fDiscard
);

Kernel32.dll, ATOM WINAPI GlobalAddAtomA(
    __in_opt LPCSTR lpString
);

Kernel32.dll, ATOM WINAPI GlobalAddAtomW(
    __in_opt LPCSTR lpString
);

Kernel32.dll, ATOM WINAPI GlobalFindAtomA(
    __in_opt LPCSTR lpString
);

Kernel32.dll, ATOM WINAPI GlobalFindAtomW(
    __in_opt LPCSTR lpString
);

Kernel32.dll, UINT WINAPI GlobalGetAtomNameA(
    __in ATOM nAtom,
    __out_ecount_part LPSTR lpBuffer,
    __in int nSize
);

Kernel32.dll, UINT WINAPI GlobalGetAtomNameW(
    __in ATOM nAtom,
    __out_ecount_part LPSTR lpBuffer,
    __in int nSize
);

Kernel32.dll, ATOM WINAPI AddAtomA(
    __in_opt LPCSTR lpString
);

Kernel32.dll, ATOM WINAPI AddAtomW(
    __in_opt LPCSTR lpString
);

Kernel32.dll, ATOM WINAPI FindAtomA(
    __in_opt LPCSTR lpString
);

Kernel32.dll, UINT WINAPI GetAtomNameA(
    __in ATOM nAtom,
    __out_ecount_part LPSTR lpBuffer,
    __in int nSize
);

Kernel32.dll, UINT WINAPI GetAtomNameW(
    __in ATOM nAtom,
    __out_ecount_part LPSTR lpBuffer,
    __in int nSize
);

Kernel32.dll, UINT WINAPI GetProfileIntA(
    __in LPCSTR lpAppName,
    __in LPCSTR lpKeyName,
    __in INT nDefault
);

Kernel32.dll, UINT WINAPI GetProfileIntW(
    __in LPCSTR lpAppName,
    __in LPCSTR lpKeyName,
    __in INT nDefault
);

Kernel32.dll, DWORD WINAPI GetProfileStringA(
    __in_opt LPCSTR lpAppName,
    __in_opt LPCSTR lpKeyName,
    __in_opt LPCSTR lpDefault,
    __out_ecount_part_opt LPSTR lpReturnedString,
    __in     DWORD nSize
);

Kernel32.dll, DWORD WINAPI GetProfileStringW(
    __in_opt LPCSTR lpAppName,
    __in_opt LPCSTR lpKeyName,
    __in_opt LPCSTR lpDefault,
    __out_ecount_part_opt LPSTR lpReturnedString,
    __in     DWORD nSize
);

Kernel32.dll, BOOL WINAPI WriteProfileStringA(
    __in_opt LPCSTR lpAppName,
    __in_opt LPCSTR lpKeyName,
    __in_opt LPCSTR lpString
);

Kernel32.dll, BOOL WINAPI WriteProfileStringW(
    __in_opt LPCSTR lpAppName,
    __in_opt LPCSTR lpKeyName,
    __in_opt LPCSTR lpString
);

Kernel32.dll, DWORD WINAPI GetProfileSectionA(
    __in LPCSTR lpAppName,
    __out_ecount_part_opt LPSTR lpReturnedString,
    __in DWORD nSize
);

Kernel32.dll, DWORD WINAPI GetProfileSectionW(
    __in LPCSTR lpAppName,
    __out_ecount_part_opt LPSTR lpReturnedString,
    __in DWORD nSize
);

Kernel32.dll, BOOL WINAPI WriteProfileSectionA(
    __in LPCSTR lpAppName,
    __in LPCSTR lpString
);

Kernel32.dll, BOOL WINAPI WriteProfileSectionW(
    __in LPCSTR lpAppName,
    __in LPCSTR lpString
);

Kernel32.dll, UINT WINAPI GetPrivateProfileIntA(
    __in     LPCSTR lpAppName,
    __in     LPCSTR lpKeyName,
    __in     INT nDefault,
    __in_opt LPCSTR lpFileName
);

Kernel32.dll, UINT WINAPI GetPrivateProfileIntW(
    __in     LPCSTR lpAppName,
    __in     LPCSTR lpKeyName,
    __in     INT nDefault,
    __in_opt LPCSTR lpFileName
);

Kernel32.dll, BOOL WINAPI WritePrivateProfileStringA(
    __in_opt LPCSTR lpAppName,
    __in_opt LPCSTR lpKeyName,
    __in_opt LPCSTR lpString,
    __in_opt LPCSTR lpFileName
);

Kernel32.dll, BOOL WINAPI WritePrivateProfileStringW(
    __in_opt LPCSTR lpAppName,
    __in_opt LPCSTR lpKeyName,
    __in_opt LPCSTR lpString,
    __in_opt LPCSTR lpFileName
);

Kernel32.dll, DWORD WINAPI GetPrivateProfileSectionA(
    __in     LPCSTR lpAppName,
    __out_ecount_part_opt LPSTR lpReturnedString,
    __in     DWORD nSize,
    __in_opt LPCSTR lpFileName
);

Kernel32.dll, DWORD WINAPI GetPrivateProfileSectionW(
    __in     LPCSTR lpAppName,
    __out_ecount_part_opt LPSTR lpReturnedString,
    __in     DWORD nSize,
    __in_opt LPCSTR lpFileName
);

Kernel32.dll, BOOL WINAPI WritePrivateProfileSectionA(
    __in_opt LPCSTR lpAppName,
    __in_opt LPCSTR lpString,
    __in_opt LPCSTR lpFileName
);

Kernel32.dll, BOOL WINAPI WritePrivateProfileSectionW(
    __in_opt LPCSTR lpAppName,
    __in_opt LPCSTR lpString,
    __in_opt LPCSTR lpFileName
);

Kernel32.dll, DWORD WINAPI GetPrivateProfileSectionNamesA(
    __out_ecount_part_opt LPSTR lpszReturnBuffer,
    __in     DWORD nSize,
    __in_opt LPCSTR lpFileName
);

Kernel32.dll, DWORD WINAPI GetPrivateProfileSectionNamesW(
    __out_ecount_part_opt LPSTR lpszReturnBuffer,
    __in     DWORD nSize,
    __in_opt LPCSTR lpFileName
);

Kernel32.dll, BOOL WINAPI WritePrivateProfileStructA(
    __in     LPCSTR lpszSection,
    __in     LPCSTR lpszKey,
    __in_bcount_opt LPVOID lpStruct,
    __in     UINT     uSizeStruct,
    __in_opt LPCSTR szFile
);

Kernel32.dll, BOOL WINAPI WritePrivateProfileStructW(
    __in     LPCSTR lpszSection,
    __in     LPCSTR lpszKey,
    __in_bcount_opt LPVOID lpStruct,
    __in     UINT     uSizeStruct,
    __in_opt LPCSTR szFile
);

Kernel32.dll, UINT WINAPI GetDriveTypeA(
    __in_opt LPCSTR lpRootPathName
);

Kernel32.dll, UINT WINAPI GetDriveTypeW(
    __in_opt LPCSTR lpRootPathName
);

Kernel32.dll, UINT WINAPI GetSystemDirectoryA(
    __out_ecount_part_opt LPSTR lpBuffer,
    __in UINT uSize
);

Kernel32.dll, UINT WINAPI GetSystemDirectoryW(
    __out_ecount_part_opt LPSTR lpBuffer,
    __in UINT uSize
);

Kernel32.dll, DWORD WINAPI GetTempPathA(
    __in DWORD nBufferLength,
    __out_ecount_part_opt LPSTR lpBuffer
);

Kernel32.dll, DWORD WINAPI GetTempPathW(
    __in DWORD nBufferLength,
    __out_ecount_part_opt LPSTR lpBuffer
);

Kernel32.dll, UINT WINAPI GetWindowsDirectoryA(
    __out_ecount_part_opt LPSTR lpBuffer,
    __in UINT uSize
);

Kernel32.dll, UINT WINAPI GetWindowsDirectoryW(
    __out_ecount_part_opt LPSTR lpBuffer,
    __in UINT uSize
);

Kernel32.dll, UINT WINAPI GetSystemWindowsDirectoryA(
    __out_ecount_part_opt LPSTR lpBuffer,
    __in UINT uSize
);

Kernel32.dll, UINT WINAPI GetSystemWindowsDirectoryW(
    __out_ecount_part_opt LPSTR lpBuffer,
    __in UINT uSize
);

Kernel32.dll, UINT WINAPI GetSystemWow64DirectoryA(
    __out_ecount_part_opt LPSTR lpBuffer,
    __in UINT uSize
);

Kernel32.dll, UINT WINAPI GetSystemWow64DirectoryW(
    __out_ecount_part_opt LPSTR lpBuffer,
    __in UINT uSize
);

Kernel32.dll, BOOLEAN WINAPI Wow64EnableWow64FsRedirection(
    __in BOOLEAN Wow64FsEnableRedirection
);

Kernel32.dll, BOOL WINAPI Wow64DisableWow64FsRedirection(
    __out PVOID *OldValue
);

Kernel32.dll, BOOL WINAPI Wow64RevertWow64FsRedirection(
    __in PVOID OlValue
);

Kernel32.dll, BOOL WINAPI SetCurrentDirectoryA(
    __in LPCSTR lpPathName
);

Kernel32.dll, BOOL WINAPI SetCurrentDirectoryW(
    __in LPCSTR lpPathName
);

Kernel32.dll, DWORD WINAPI GetCurrentDirectoryA(
    __in DWORD nBufferLength,
    __out_ecount_part_opt LPSTR lpBuffer
);

Kernel32.dll, DWORD WINAPI GetCurrentDirectoryW(
    __in DWORD nBufferLength,
    __out_ecount_part_opt LPSTR lpBuffer
);

Kernel32.dll, BOOL WINAPI SetDllDirectoryA(
    __in_opt LPCSTR lpPathName
);

Kernel32.dll, BOOL WINAPI SetDllDirectoryW(
    __in_opt LPCSTR lpPathName
);

Kernel32.dll, DWORD WINAPI GetDllDirectoryA(
    __in DWORD nBufferLength,
    __out_ecount_part_opt LPSTR lpBuffer
);

Kernel32.dll, DWORD WINAPI GetDllDirectoryW(
    __in DWORD nBufferLength,
    __out_ecount_part_opt LPSTR lpBuffer
);

Kernel32.dll, BOOL WINAPI SetSearchPathMode(
    __in DWORD Flags
);

Kernel32.dll, BOOL WINAPI GetDiskFreeSpaceA(
    __in_opt  LPCSTR lpRootPathName,
    __out_opt LPDWORD lpSectorsPerCluster,
    __out_opt LPDWORD lpBytesPerSector,
    __out_opt LPDWORD lpNumberOfFreeClusters,
    __out_opt LPDWORD lpTotalNumberOfClusters
);

Kernel32.dll, BOOL WINAPI GetDiskFreeSpaceW(
    __in_opt  LPCSTR lpRootPathName,
    __out_opt LPDWORD lpSectorsPerCluster,
    __out_opt LPDWORD lpBytesPerSector,
    __out_opt LPDWORD lpNumberOfFreeClusters,
    __out_opt LPDWORD lpTotalNumberOfClusters
);

Kernel32.dll, BOOL WINAPI GetDiskFreeSpaceExA(
    __in_opt  LPCSTR lpDirectoryName,
    __out_opt PULARGE_INTEGER lpFreeBytesAvailableToCaller,
    __out_opt PULARGE_INTEGER lpTotalNumberOfBytes,
    __out_opt PULARGE_INTEGER lpTotalNumberOfFreeBytes
);

Kernel32.dll, BOOL WINAPI GetDiskFreeSpaceExW(
    __in_opt  LPCSTR lpDirectoryName,
    __out_opt PULARGE_INTEGER lpFreeBytesAvailableToCaller,
    __out_opt PULARGE_INTEGER lpTotalNumberOfBytes,
    __out_opt PULARGE_INTEGER lpTotalNumberOfFreeBytes
);

Kernel32.dll, BOOL WINAPI CreateDirectoryA(
    __in     LPCSTR lpPathName,
    __in_opt LPSECURITY_ATTRIBUTES lpSecurityAttributes
);

Kernel32.dll, BOOL WINAPI CreateDirectoryW(
    __in     LPCSTR lpPathName,
    __in_opt LPSECURITY_ATTRIBUTES lpSecurityAttributes
);

Kernel32.dll, BOOL WINAPI CreateDirectoryExA(
    __in     LPCSTR lpTemplateDirectory,
    __in     LPCSTR lpNewDirectory,
    __in_opt LPSECURITY_ATTRIBUTES lpSecurityAttributes
);

Kernel32.dll, BOOL WINAPI CreateDirectoryExW(
    __in     LPCSTR lpTemplateDirectory,
    __in     LPCSTR lpNewDirectory,
    __in_opt LPSECURITY_ATTRIBUTES lpSecurityAttributes
);

Kernel32.dll, BOOL WINAPI CreateDirectoryTransactedA(
    __in_opt LPCSTR lpTemplateDirectory,
    __in     LPCSTR lpNewDirectory,
    __in_opt LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    __in     HANDLE hTransaction
);

Kernel32.dll, BOOL WINAPI CreateDirectoryTransactedW(
    __in_opt LPCSTR lpTemplateDirectory,
    __in     LPCSTR lpNewDirectory,
    __in_opt LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    __in     HANDLE hTransaction
);

Kernel32.dll, BOOL WINAPI RemoveDirectoryA(
    __in LPCSTR lpPathName
);

Kernel32.dll, BOOL WINAPI RemoveDirectoryW(
    __in LPCSTR lpPathName
);

Kernel32.dll, BOOL WINAPI RemoveDirectoryTransactedA(
    __in LPCSTR lpPathName,
    __in     HANDLE hTransaction
);

Kernel32.dll, BOOL WINAPI RemoveDirectoryTransactedW(
    __in LPCSTR lpPathName,
    __in     HANDLE hTransaction
);

Kernel32.dll, DWORD WINAPI GetFullPathNameTransactedA(
    __in            LPCSTR lpFileName,
    __in            DWORD nBufferLength,
    __out_ecount_part_opt LPSTR lpBuffer,
    __deref_opt_out LPSTR *lpFilePart,
    __in            HANDLE hTransaction
);

Kernel32.dll, DWORD WINAPI GetFullPathNameTransactedW(
    __in            LPCSTR lpFileName,
    __in            DWORD nBufferLength,
    __out_ecount_part_opt LPSTR lpBuffer,
    __deref_opt_out LPSTR *lpFilePart,
    __in            HANDLE hTransaction
);

Kernel32.dll, BOOL WINAPI DefineDosDeviceA(
    __in     DWORD dwFlags,
    __in     LPCSTR lpDeviceName,
    __in_opt LPCSTR lpTargetPath
);

Kernel32.dll, BOOL WINAPI DefineDosDeviceW(
    __in     DWORD dwFlags,
    __in     LPCSTR lpDeviceName,
    __in_opt LPCSTR lpTargetPath
);

Kernel32.dll, DWORD WINAPI QueryDosDeviceA(
    __in_opt LPCSTR lpDeviceName,
    __out_ecount_part_opt LPSTR lpTargetPath,
    __in     DWORD ucchMax
);

Kernel32.dll, DWORD WINAPI QueryDosDeviceW(
    __in_opt LPCSTR lpDeviceName,
    __out_ecount_part_opt LPSTR lpTargetPath,
    __in     DWORD ucchMax
);

Kernel32.dll, HANDLE WINAPI CreateFileTransactedA(
    __in       LPCSTR lpFileName,
    __in       DWORD dwDesiredAccess,
    __in       DWORD dwShareMode,
    __in_opt   LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    __in       DWORD dwCreationDisposition,
    __in       DWORD dwFlagsAndAttributes,
    __in_opt   HANDLE hTemplateFile,
    __in       HANDLE hTransaction,
    __in_opt   PUSHORT pusMiniVersion,
    __reserved PVOID  lpExtendedParameter
);

Kernel32.dll, HANDLE WINAPI CreateFileTransactedW(
    __in       LPCSTR lpFileName,
    __in       DWORD dwDesiredAccess,
    __in       DWORD dwShareMode,
    __in_opt   LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    __in       DWORD dwCreationDisposition,
    __in       DWORD dwFlagsAndAttributes,
    __in_opt   HANDLE hTemplateFile,
    __in       HANDLE hTransaction,
    __in_opt   PUSHORT pusMiniVersion,
    __reserved PVOID  lpExtendedParameter
);

Kernel32.dll, HANDLE WINAPI ReOpenFile(
    __in HANDLE  hOriginalFile,
    __in DWORD   dwDesiredAccess,
    __in DWORD   dwShareMode,
    __in DWORD   dwFlagsAndAttributes
);

Kernel32.dll, DWORD WINAPI GetFileAttributesA(
    __in LPCSTR lpFileName
);

Kernel32.dll, DWORD WINAPI GetFileAttributesW(
    __in LPCSTR lpFileName
);

Kernel32.dll, BOOL WINAPI SetFileAttributesTransactedA(
    __in     LPCSTR lpFileName,
    __in     DWORD dwFileAttributes,
    __in     HANDLE hTransaction
);

Kernel32.dll, BOOL WINAPI SetFileAttributesTransactedW(
    __in     LPCSTR lpFileName,
    __in     DWORD dwFileAttributes,
    __in     HANDLE hTransaction
);

Kernel32.dll, BOOL WINAPI GetFileAttributesTransactedA(
    __in  LPCSTR lpFileName,
    __in  GET_FILEEX_INFO_LEVELS fInfoLevelId,
    __out LPVOID lpFileInformation,
    __in     HANDLE hTransaction
);

Kernel32.dll, BOOL WINAPI GetFileAttributesTransactedW(
    __in  LPCSTR lpFileName,
    __in  GET_FILEEX_INFO_LEVELS fInfoLevelId,
    __out LPVOID lpFileInformation,
    __in     HANDLE hTransaction
);

Kernel32.dll, BOOL WINAPI GetFileAttributesExA(
    __in  LPCSTR lpFileName,
    __in  GET_FILEEX_INFO_LEVELS fInfoLevelId,
    __out LPVOID lpFileInformation
);

Kernel32.dll, BOOL WINAPI GetFileAttributesExW(
    __in  LPCSTR lpFileName,
    __in  GET_FILEEX_INFO_LEVELS fInfoLevelId,
    __out LPVOID lpFileInformation
);

Kernel32.dll, DWORD WINAPI GetCompressedFileSizeA(
    __in  LPCSTR lpFileName,
    __out_opt LPDWORD  lpFileSizeHigh
);

Kernel32.dll, DWORD WINAPI GetCompressedFileSizeW(
    __in  LPCSTR lpFileName,
    __out_opt LPDWORD  lpFileSizeHigh
);

Kernel32.dll, DWORD WINAPI GetCompressedFileSizeTransactedA(
    __in      LPCSTR lpFileName,
    __out_opt LPDWORD  lpFileSizeHigh,
    __in      HANDLE hTransaction
);

Kernel32.dll, DWORD WINAPI GetCompressedFileSizeTransactedW(
    __in      LPCSTR lpFileName,
    __out_opt LPDWORD  lpFileSizeHigh,
    __in      HANDLE hTransaction
);

Kernel32.dll, BOOL WINAPI DeleteFileTransactedA(
    __in     LPCSTR lpFileName,
    __in     HANDLE hTransaction
);

Kernel32.dll, BOOL WINAPI DeleteFileTransactedW(
    __in     LPCSTR lpFileName,
    __in     HANDLE hTransaction
);

Kernel32.dll, BOOL WINAPI CheckNameLegalDOS8Dot3A(
    __in      LPCSTR lpName,
    __out_ecount_opt LPSTR lpOemName,
    __in      DWORD OemNameSize,
    __out_opt PBOOL pbNameContainsSpaces,
    __out     PBOOL pbNameLegal
);

Kernel32.dll, BOOL WINAPI CheckNameLegalDOS8Dot3W(
    __in      LPCSTR lpName,
    __out_ecount_opt LPSTR lpOemName,
    __in      DWORD OemNameSize,
    __out_opt PBOOL pbNameContainsSpaces,
    __out     PBOOL pbNameLegal
);

Kernel32.dll, HANDLE WINAPI FindFirstFileTransactedA(
    __in       LPCSTR lpFileName,
    __in       FINDEX_INFO_LEVELS fInfoLevelId,
    __out      LPVOID lpFindFileData,
    __in       FINDEX_SEARCH_OPS fSearchOp,
    __reserved LPVOID lpSearchFilter,
    __in       DWORD dwAdditionalFlags,
    __in       HANDLE hTransaction
);

Kernel32.dll, HANDLE WINAPI FindFirstFileTransactedW(
    __in       LPCSTR lpFileName,
    __in       FINDEX_INFO_LEVELS fInfoLevelId,
    __out      LPVOID lpFindFileData,
    __in       FINDEX_SEARCH_OPS fSearchOp,
    __reserved LPVOID lpSearchFilter,
    __in       DWORD dwAdditionalFlags,
    __in       HANDLE hTransaction
);

Kernel32.dll, HANDLE WINAPI FindFirstFileA(
    __in  LPCSTR lpFileName,
    __out LPWIN32_FIND_DATAA lpFindFileData
);

Kernel32.dll, HANDLE WINAPI FindFirstFileW(
    __in  LPCSTR lpFileName,
    __out LPWIN32_FIND_DATAA lpFindFileData
);

Kernel32.dll, BOOL WINAPI FindNextFileA(
    __in  HANDLE hFindFile,
    __out LPWIN32_FIND_DATAA lpFindFileData
);

Kernel32.dll, BOOL WINAPI FindNextFileW(
    __in  HANDLE hFindFile,
    __out LPWIN32_FIND_DATAA lpFindFileData
);

Kernel32.dll, BOOL WINAPI CopyFileTransactedA(
    __in     LPCSTR lpExistingFileName,
    __in     LPCSTR lpNewFileName,
    __in_opt LPPROGRESS_ROUTINE lpProgressRoutine,
    __in_opt LPVOID lpData,
    __in_opt LPBOOL pbCancel,
    __in     DWORD dwCopyFlags,
    __in     HANDLE hTransaction
);

Kernel32.dll, BOOL WINAPI CopyFileTransactedW(
    __in     LPCSTR lpExistingFileName,
    __in     LPCSTR lpNewFileName,
    __in_opt LPPROGRESS_ROUTINE lpProgressRoutine,
    __in_opt LPVOID lpData,
    __in_opt LPBOOL pbCancel,
    __in     DWORD dwCopyFlags,
    __in     HANDLE hTransaction
);

Kernel32.dll, BOOL WINAPI MoveFileWithProgressA(
    __in     LPCSTR lpExistingFileName,
    __in_opt LPCSTR lpNewFileName,
    __in_opt LPPROGRESS_ROUTINE lpProgressRoutine,
    __in_opt LPVOID lpData,
    __in     DWORD dwFlags
);

Kernel32.dll, BOOL WINAPI MoveFileWithProgressW(
    __in     LPCSTR lpExistingFileName,
    __in_opt LPCSTR lpNewFileName,
    __in_opt LPPROGRESS_ROUTINE lpProgressRoutine,
    __in_opt LPVOID lpData,
    __in     DWORD dwFlags
);

Kernel32.dll, BOOL WINAPI MoveFileTransactedA(
    __in     LPCSTR lpExistingFileName,
    __in_opt LPCSTR lpNewFileName,
    __in_opt LPPROGRESS_ROUTINE lpProgressRoutine,
    __in_opt LPVOID lpData,
    __in     DWORD dwFlags,
    __in     HANDLE hTransaction
);

Kernel32.dll, BOOL WINAPI MoveFileTransactedW(
    __in     LPCSTR lpExistingFileName,
    __in_opt LPCSTR lpNewFileName,
    __in_opt LPPROGRESS_ROUTINE lpProgressRoutine,
    __in_opt LPVOID lpData,
    __in     DWORD dwFlags,
    __in     HANDLE hTransaction
);

Kernel32.dll, BOOL WINAPI ReplaceFileA(
    __in       LPCSTR lpReplacedFileName,
    __in       LPCSTR lpReplacementFileName,
    __in_opt   LPCSTR lpBackupFileName,
    __in       DWORD    dwReplaceFlags,
    __reserved LPVOID   lpExclude,
    __reserved LPVOID  lpReserved
);

Kernel32.dll, BOOL WINAPI ReplaceFileW(
    __in       LPCSTR lpReplacedFileName,
    __in       LPCSTR lpReplacementFileName,
    __in_opt   LPCSTR lpBackupFileName,
    __in       DWORD    dwReplaceFlags,
    __reserved LPVOID   lpExclude,
    __reserved LPVOID  lpReserved
);

Kernel32.dll, BOOL WINAPI CreateHardLinkA(
    __in       LPCSTR lpFileName,
    __in       LPCSTR lpExistingFileName,
    __reserved LPSECURITY_ATTRIBUTES lpSecurityAttributes
);

Kernel32.dll, BOOL WINAPI CreateHardLinkW(
    __in       LPCSTR lpFileName,
    __in       LPCSTR lpExistingFileName,
    __reserved LPSECURITY_ATTRIBUTES lpSecurityAttributes
);

Kernel32.dll, BOOL WINAPI CreateHardLinkTransactedA(
    __in       LPCSTR lpFileName,
    __in       LPCSTR lpExistingFileName,
    __reserved LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    __in       HANDLE hTransaction
);

Kernel32.dll, BOOL WINAPI CreateHardLinkTransactedW(
    __in       LPCSTR lpFileName,
    __in       LPCSTR lpExistingFileName,
    __reserved LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    __in       HANDLE hTransaction
);

Kernel32.dll, HANDLE WINAPI CreateNamedPipeA(
    __in     LPCSTR lpName,
    __in     DWORD dwOpenMode,
    __in     DWORD dwPipeMode,
    __in     DWORD nMaxInstances,
    __in     DWORD nOutBufferSize,
    __in     DWORD nInBufferSize,
    __in     DWORD nDefaultTimeOut,
    __in_opt LPSECURITY_ATTRIBUTES lpSecurityAttributes
);

Kernel32.dll, HANDLE WINAPI CreateNamedPipeW(
    __in     LPCSTR lpName,
    __in     DWORD dwOpenMode,
    __in     DWORD dwPipeMode,
    __in     DWORD nMaxInstances,
    __in     DWORD nOutBufferSize,
    __in     DWORD nInBufferSize,
    __in     DWORD nDefaultTimeOut,
    __in_opt LPSECURITY_ATTRIBUTES lpSecurityAttributes
);

Kernel32.dll, BOOL WINAPI GetNamedPipeHandleStateA(
    __in      HANDLE hNamedPipe,
    __out_opt LPDWORD lpState,
    __out_opt LPDWORD lpCurInstances,
    __out_opt LPDWORD lpMaxCollectionCount,
    __out_opt LPDWORD lpCollectDataTimeout,
    __out_ecount_opt LPSTR lpUserName,
    __in      DWORD nMaxUserNameSize
);

Kernel32.dll, BOOL WINAPI GetNamedPipeHandleStateW(
    __in      HANDLE hNamedPipe,
    __out_opt LPDWORD lpState,
    __out_opt LPDWORD lpCurInstances,
    __out_opt LPDWORD lpMaxCollectionCount,
    __out_opt LPDWORD lpCollectDataTimeout,
    __out_ecount_opt LPSTR lpUserName,
    __in      DWORD nMaxUserNameSize
);

Kernel32.dll, BOOL WINAPI CallNamedPipeA(
    __in  LPCSTR lpNamedPipeName,
    __in_bcount_opt LPVOID lpInBuffer,
    __in  DWORD nInBufferSize,
    __out_bcount_part_opt LPVOID lpOutBuffer,
    __in  DWORD nOutBufferSize,
    __out LPDWORD lpBytesRead,
    __in  DWORD nTimeOut
);

Kernel32.dll, BOOL WINAPI CallNamedPipeW(
    __in  LPCSTR lpNamedPipeName,
    __in_bcount_opt LPVOID lpInBuffer,
    __in  DWORD nInBufferSize,
    __out_bcount_part_opt LPVOID lpOutBuffer,
    __in  DWORD nOutBufferSize,
    __out LPDWORD lpBytesRead,
    __in  DWORD nTimeOut
);

Kernel32.dll, BOOL WINAPI WaitNamedPipeA(
    __in LPCSTR lpNamedPipeName,
    __in DWORD nTimeOut
);

Kernel32.dll, BOOL WINAPI WaitNamedPipeW(
    __in LPCSTR lpNamedPipeName,
    __in DWORD nTimeOut
);

Kernel32.dll, BOOL WINAPI GetNamedPipeAttribute(
    __in HANDLE Pipe,
    __in PIPE_ATTRIBUTE_TYPE AttributeType,
    __in PSTR AttributeName,
    __out_bcount PVOID AttributeValue,
    __inout PSIZE_T AttributeValueLength
);

Kernel32.dll, BOOL WINAPI SetNamedPipeAttribute(
    __in HANDLE Pipe,
    __in PIPE_ATTRIBUTE_TYPE AttributeType,
    __in PSTR AttributeName,
    __in PVOID AttributeValue,
    __in SIZE_T AttributeValueLength
);

Kernel32.dll, BOOL WINAPI GetNamedPipeClientComputerNameA(
    __in HANDLE Pipe,
    __out_bcount LPSTR ClientComputerName,
    __in ULONG ClientComputerNameLength
);

Kernel32.dll, BOOL WINAPI GetNamedPipeClientComputerNameW(
    __in HANDLE Pipe,
    __out_bcount LPSTR ClientComputerName,
    __in ULONG ClientComputerNameLength
);

Kernel32.dll, BOOL WINAPI GetNamedPipeClientProcessId(
    __in HANDLE Pipe,
    __out PULONG ClientProcessId
);

Kernel32.dll, BOOL WINAPI GetNamedPipeClientSessionId(
    __in HANDLE Pipe,
    __out PULONG ClientSessionId
);

Kernel32.dll, BOOL WINAPI GetNamedPipeServerProcessId(
    __in HANDLE Pipe,
    __out PULONG ServerProcessId
);

Kernel32.dll, BOOL WINAPI GetNamedPipeServerSessionId(
    __in HANDLE Pipe,
    __out PULONG ServerSessionId
);

Kernel32.dll, BOOL WINAPI SetVolumeLabelA(
    __in_opt LPCSTR lpRootPathName,
    __in_opt LPCSTR lpVolumeName
);

Kernel32.dll, BOOL WINAPI SetVolumeLabelW(
    __in_opt LPCSTR lpRootPathName,
    __in_opt LPCSTR lpVolumeName
);

Kernel32.dll, VOID WINAPI SetFileApisToOEM(
   void aaa
);

Kernel32.dll, VOID WINAPI SetFileApisToANSI(
   void aaa
);

Kernel32.dll, BOOL WINAPI AreFileApisANSI(
   void aaa
);

Kernel32.dll, BOOL WINAPI GetVolumeInformationA(
    __in_opt  LPCSTR lpRootPathName,
    __out_ecount_opt LPSTR lpVolumeNameBuffer,
    __in      DWORD nVolumeNameSize,
    __out_opt LPDWORD lpVolumeSerialNumber,
    __out_opt LPDWORD lpMaximumComponentLength,
    __out_opt LPDWORD lpFileSystemFlags,
    __out_ecount_opt LPSTR lpFileSystemNameBuffer,
    __in      DWORD nFileSystemNameSize
);

Kernel32.dll, BOOL WINAPI GetVolumeInformationW(
    __in_opt  LPCSTR lpRootPathName,
    __out_ecount_opt LPSTR lpVolumeNameBuffer,
    __in      DWORD nVolumeNameSize,
    __out_opt LPDWORD lpVolumeSerialNumber,
    __out_opt LPDWORD lpMaximumComponentLength,
    __out_opt LPDWORD lpFileSystemFlags,
    __out_ecount_opt LPSTR lpFileSystemNameBuffer,
    __in      DWORD nFileSystemNameSize
);

Kernel32.dll, BOOL WINAPI CancelSynchronousIo(
    __in HANDLE hThread
);

Kernel32.dll, BOOL WINAPI CancelIoEx(
    __in HANDLE hFile,
    __in_opt LPOVERLAPPED lpOverlapped
);

Kernel32.dll, BOOL WINAPI CancelIo(
    __in HANDLE hFile
);

Kernel32.dll, BOOL WINAPI SetFileBandwidthReservation(
    __in  HANDLE  hFile,
    __in  DWORD   nPeriodMilliseconds,
    __in  DWORD   nBytesPerPeriod,
    __in  BOOL    bDiscardable,
    __out LPDWORD lpTransferSize,
    __out LPDWORD lpNumOutstandingRequests
);

Kernel32.dll, BOOL WINAPI GetFileBandwidthReservation(
    __in  HANDLE  hFile,
    __out LPDWORD lpPeriodMilliseconds,
    __out LPDWORD lpBytesPerPeriod,
    __out LPBOOL  pDiscardable,
    __out LPDWORD lpTransferSize,
    __out LPDWORD lpNumOutstandingRequests
);

Kernel32.dll, HANDLE WINAPI FindFirstChangeNotificationA(
    __in LPCSTR lpPathName,
    __in BOOL bWatchSubtree,
    __in DWORD dwNotifyFilter
);

Kernel32.dll, HANDLE WINAPI FindFirstChangeNotificationW(
    __in LPCSTR lpPathName,
    __in BOOL bWatchSubtree,
    __in DWORD dwNotifyFilter
);

Kernel32.dll, BOOL WINAPI FindNextChangeNotification(
    __in HANDLE hChangeHandle
);

Kernel32.dll, BOOL WINAPI FindCloseChangeNotification(
    __in HANDLE hChangeHandle
);

Kernel32.dll, BOOL WINAPI VirtualLock(
    __in LPVOID lpAddress,
    __in SIZE_T dwSize
);

Kernel32.dll, BOOL WINAPI VirtualUnlock(
    __in LPVOID lpAddress,
    __in SIZE_T dwSize
);

Kernel32.dll, LPVOID WINAPI MapViewOfFileEx(
    __in     HANDLE hFileMappingObject,
    __in     DWORD dwDesiredAccess,
    __in     DWORD dwFileOffsetHigh,
    __in     DWORD dwFileOffsetLow,
    __in     SIZE_T dwNumberOfBytesToMap,
    __in_opt LPVOID lpBaseAddress
);

Kernel32.dll, LPVOID WINAPI MapViewOfFileExNuma(
    __in     HANDLE hFileMappingObject,
    __in     DWORD dwDesiredAccess,
    __in     DWORD dwFileOffsetHigh,
    __in     DWORD dwFileOffsetLow,
    __in     SIZE_T dwNumberOfBytesToMap,
    __in_opt LPVOID lpBaseAddress,
    __in     DWORD nndPreferred
);

Kernel32.dll, BOOL WINAPI SetPriorityClass(
    __in HANDLE hProcess,
    __in DWORD dwPriorityClass
);

Kernel32.dll, DWORD WINAPI GetPriorityClass(
    __in HANDLE hProcess
);

Kernel32.dll, BOOL WINAPI IsBadReadPtr(
    __in_opt CONST VOID *lp,
    __in     UINT_PTR ucb
);

Kernel32.dll, BOOL WINAPI IsBadWritePtr(
    __in_opt LPVOID lp,
    __in     UINT_PTR ucb
);

Kernel32.dll, BOOL WINAPI IsBadHugeReadPtr(
    __in_opt CONST VOID *lp,
    __in     UINT_PTR ucb
);

Kernel32.dll, BOOL WINAPI IsBadHugeWritePtr(
    __in_opt LPVOID lp,
    __in     UINT_PTR ucb
);

Kernel32.dll, BOOL WINAPI IsBadCodePtr(
    __in_opt FARPROC lpfn
);

Kernel32.dll, BOOL WINAPI IsBadStringPtrA(
    __in_opt LPCSTR lpsz,
    __in     UINT_PTR ucchMax
);

Kernel32.dll, BOOL WINAPI IsBadStringPtrW(
    __in_opt LPCSTR lpsz,
    __in     UINT_PTR ucchMax
);

Kernel32.dll, BOOL WINAPI BuildCommDCBA(
    __in  LPCSTR lpDef,
    __out LPDCB lpDCB
);

Kernel32.dll, BOOL WINAPI BuildCommDCBW(
    __in  LPCSTR lpDef,
    __out LPDCB lpDCB
);

Kernel32.dll, BOOL WINAPI BuildCommDCBAndTimeoutsA(
    __in  LPCSTR lpDef,
    __out LPDCB lpDCB,
    __out LPCOMMTIMEOUTS lpCommTimeouts
);

Kernel32.dll, BOOL WINAPI BuildCommDCBAndTimeoutsW(
    __in  LPCSTR lpDef,
    __out LPDCB lpDCB,
    __out LPCOMMTIMEOUTS lpCommTimeouts
);

Kernel32.dll, BOOL WINAPI CommConfigDialogA(
    __in     LPCSTR lpszName,
    __in_opt HWND hWnd,
    __inout  LPCOMMCONFIG lpCC
);

Kernel32.dll, BOOL WINAPI CommConfigDialogW(
    __in     LPCSTR lpszName,
    __in_opt HWND hWnd,
    __inout  LPCOMMCONFIG lpCC
);

Kernel32.dll, BOOL WINAPI GetDefaultCommConfigA(
    __in    LPCSTR lpszName,
    __out_bcount_part LPCOMMCONFIG lpCC,
    __inout LPDWORD lpdwSize
);

Kernel32.dll, BOOL WINAPI GetDefaultCommConfigW(
    __in    LPCSTR lpszName,
    __out_bcount_part LPCOMMCONFIG lpCC,
    __inout LPDWORD lpdwSize
);

Kernel32.dll, BOOL WINAPI SetDefaultCommConfigA(
    __in LPCSTR lpszName,
    __in_bcount LPCOMMCONFIG lpCC,
    __in DWORD dwSize
);

Kernel32.dll, BOOL WINAPI SetDefaultCommConfigW(
    __in LPCSTR lpszName,
    __in_bcount LPCOMMCONFIG lpCC,
    __in DWORD dwSize
);

Kernel32.dll, BOOL WINAPI GetComputerNameA(
    __out_ecount_part_opt LPSTR lpBuffer,
    __inout LPDWORD nSize
);

Kernel32.dll, BOOL WINAPI GetComputerNameW(
    __out_ecount_part_opt LPSTR lpBuffer,
    __inout LPDWORD nSize
);

Kernel32.dll, BOOL WINAPI SetComputerNameA(
    __in LPCSTR lpComputerName
);

Kernel32.dll, BOOL WINAPI SetComputerNameW(
    __in LPCSTR lpComputerName
);

Kernel32.dll, BOOL WINAPI GetComputerNameExA(
    __in    COMPUTER_NAME_FORMAT NameType,
    __out_ecount_part_opt LPSTR lpBuffer,
    __inout LPDWORD nSize
);

Kernel32.dll, BOOL WINAPI GetComputerNameExW(
    __in    COMPUTER_NAME_FORMAT NameType,
    __out_ecount_part_opt LPSTR lpBuffer,
    __inout LPDWORD nSize
);

Kernel32.dll, BOOL WINAPI SetComputerNameExA(
    __in COMPUTER_NAME_FORMAT NameType,
    __in LPCSTR lpBuffer
);

Kernel32.dll, BOOL WINAPI SetComputerNameExW(
    __in COMPUTER_NAME_FORMAT NameType,
    __in LPCSTR lpBuffer
);

Kernel32.dll, BOOL WINAPI DnsHostnameToComputerNameA(
    __in    LPCSTR Hostname,
    __out_ecount_part_opt LPSTR ComputerName,
    __inout LPDWORD nSize
);

Kernel32.dll, BOOL WINAPI DnsHostnameToComputerNameW(
    __in    LPCSTR Hostname,
    __out_ecount_part_opt LPSTR ComputerName,
    __inout LPDWORD nSize
);

Kernel32.dll, BOOL WINAPI QueueUserWorkItem(
    __in     LPTHREAD_START_ROUTINE Function,
    __in_opt PVOID Context,
    __in     ULONG Flags
);

Kernel32.dll, BOOL WINAPI BindIoCompletionCallback(
    __in HANDLE FileHandle,
    __in LPOVERLAPPED_COMPLETION_ROUTINE Function,
    __in ULONG Flags
);

Kernel32.dll, HANDLE WINAPI CreateTimerQueue(
    void aaa
);

Kernel32.dll, BOOL WINAPI CreateTimerQueueTimer(
    __deref_out PHANDLE phNewTimer,
    __in_opt    HANDLE TimerQueue,
    __in        WAITORTIMERCALLBACK Callback,
    __in_opt    PVOID Parameter,
    __in        DWORD DueTime,
    __in        DWORD Period,
    __in        ULONG Flags
    );

Kernel32.dll, BOOL WINAPI ChangeTimerQueueTimer(
    __in_opt HANDLE TimerQueue,
    __inout  HANDLE Timer,
    __in     ULONG DueTime,
    __in     ULONG Period
);

Kernel32.dll, BOOL WINAPI DeleteTimerQueueTimer(
    __in_opt HANDLE TimerQueue,
    __in     HANDLE Timer,
    __in_opt HANDLE CompletionEvent
);

Kernel32.dll, BOOL WINAPI DeleteTimerQueueEx(
    __in     HANDLE TimerQueue,
    __in_opt HANDLE CompletionEvent
);

Kernel32.dll, HANDLE WINAPI SetTimerQueueTimer(
    __in_opt HANDLE TimerQueue,
    __in     WAITORTIMERCALLBACK Callback,
    __in_opt PVOID Parameter,
    __in     DWORD DueTime,
    __in     DWORD Period,
    __in     BOOL PreferIo
);

Kernel32.dll, BOOL WINAPI CancelTimerQueueTimer(
    __in_opt HANDLE TimerQueue,
    __in     HANDLE Timer
);

Kernel32.dll, BOOL WINAPI DeleteTimerQueue(
    __in HANDLE TimerQueue
);

Kernel32.dll, PTP_POOL WINAPI CreateThreadpool(
    __reserved PVOID reserved
);

Kernel32.dll, VOID WINAPI SetThreadpoolThreadMaximum(
    __inout PTP_POOL ptpp,
    __in    DWORD    cthrdMost
);

Kernel32.dll, BOOL WINAPI SetThreadpoolThreadMinimum(
    __inout PTP_POOL ptpp,
    __in    DWORD    cthrdMic
);

Kernel32.dll, BOOL WINAPI SetThreadpoolStackInformation(
    __inout PTP_POOL           ptpp,
    __in    PTP_POOL_STACK_INFORMATION ptpsi
);

Kernel32.dll, BOOL WINAPI QueryThreadpoolStackInformation(
    __in    PTP_POOL           ptpp,
    __out   PTP_POOL_STACK_INFORMATION ptpsi
);

Kernel32.dll, VOID WINAPI CloseThreadpool(
    __inout PTP_POOL ptpp
);

Kernel32.dll, PTP_CLEANUP_GROUP WINAPI CreateThreadpoolCleanupGroup(
    void aaa
);

Kernel32.dll, VOID WINAPI CloseThreadpoolCleanupGroupMembers(
    __inout     PTP_CLEANUP_GROUP ptpcg,
    __in        BOOL              fCancelPendingCallbacks,
    __inout_opt PVOID             pvCleanupContext
);

Kernel32.dll, VOID WINAPI CloseThreadpoolCleanupGroup(
    __inout PTP_CLEANUP_GROUP ptpcg
);

Kernel32.dll, VOID WINAPI SetEventWhenCallbackReturns(
    __inout PTP_CALLBACK_INSTANCE pci,
    __in    HANDLE                evt
);

Kernel32.dll, VOID WINAPI ReleaseSemaphoreWhenCallbackReturns(
    __inout PTP_CALLBACK_INSTANCE pci,
    __in    HANDLE                sem,
    __in    DWORD                 crel
);

Kernel32.dll, VOID WINAPI ReleaseMutexWhenCallbackReturns(
    __inout PTP_CALLBACK_INSTANCE pci,
    __in    HANDLE                mut
);

Kernel32.dll, VOID WINAPI LeaveCriticalSectionWhenCallbackReturns(
    __inout PTP_CALLBACK_INSTANCE pci,
    __inout PCRITICAL_SECTION     pcs
);

Kernel32.dll, VOID WINAPI FreeLibraryWhenCallbackReturns(
    __inout PTP_CALLBACK_INSTANCE pci,
    __in    HMODULE               mod
);

Kernel32.dll, BOOL WINAPI CallbackMayRunLong(
    __inout PTP_CALLBACK_INSTANCE pci
);

Kernel32.dll, VOID WINAPI DisassociateCurrentThreadFromCallback(
    __inout PTP_CALLBACK_INSTANCE pci
);

Kernel32.dll, BOOL WINAPI TrySubmitThreadpoolCallback(
    __in        PTP_SIMPLE_CALLBACK  pfns,
    __inout_opt PVOID                pv,
    __in_opt    PTP_CALLBACK_ENVIRON pcbe
);

Kernel32.dll, PTP_WORK WINAPI CreateThreadpoolWork(
    __in        PTP_WORK_CALLBACK    pfnwk,
    __inout_opt PVOID                pv,
    __in_opt    PTP_CALLBACK_ENVIRON pcbe
);

Kernel32.dll, VOID WINAPI SubmitThreadpoolWork(
    __inout PTP_WORK pwk
);

Kernel32.dll, VOID WINAPI WaitForThreadpoolWorkCallbacks(
    __inout PTP_WORK pwk,
    __in    BOOL     fCancelPendingCallbacks
);

Kernel32.dll, VOID WINAPI CloseThreadpoolWork(
    __inout PTP_WORK pwk
);

Kernel32.dll, PTP_TIMER WINAPI CreateThreadpoolTimer(
    __in        PTP_TIMER_CALLBACK   pfnti,
    __inout_opt PVOID                pv,
    __in_opt    PTP_CALLBACK_ENVIRON pcbe
);

Kernel32.dll, VOID WINAPI SetThreadpoolTimer(
    __inout  PTP_TIMER pti,
    __in_opt PFILETIME pftDueTime,
    __in     DWORD     msPeriod,
    __in_opt DWORD     msWindowLength
);

Kernel32.dll, BOOL WINAPI IsThreadpoolTimerSet(
    __inout PTP_TIMER pti
);

Kernel32.dll, VOID WINAPI WaitForThreadpoolTimerCallbacks(
    __inout PTP_TIMER pti,
    __in    BOOL      fCancelPendingCallbacks
);

Kernel32.dll, VOID WINAPI CloseThreadpoolTimer(
    __inout PTP_TIMER pti
);

Kernel32.dll, PTP_WAIT WINAPI CreateThreadpoolWait(
    __in        PTP_WAIT_CALLBACK    pfnwa,
    __inout_opt PVOID                pv,
    __in_opt    PTP_CALLBACK_ENVIRON pcbe
);

Kernel32.dll, VOID WINAPI SetThreadpoolWait(
    __inout  PTP_WAIT  pwa,
    __in_opt HANDLE    h,
    __in_opt PFILETIME pftTimeout
);

Kernel32.dll, VOID WINAPI WaitForThreadpoolWaitCallbacks(
    __inout PTP_WAIT pwa,
    __in    BOOL     fCancelPendingCallbacks
);

Kernel32.dll, VOID WINAPI CloseThreadpoolWait(
    __inout PTP_WAIT pwa
);

Kernel32.dll, PTP_IO WINAPI CreateThreadpoolIo(
    __in        HANDLE                fl,
    __in        PTP_WIN32_IO_CALLBACK pfnio,
    __inout_opt PVOID                 pv,
    __in_opt    PTP_CALLBACK_ENVIRON  pcbe
);

Kernel32.dll, VOID WINAPI StartThreadpoolIo(
    __inout PTP_IO pio
);

Kernel32.dll, VOID WINAPI CancelThreadpoolIo(
    __inout PTP_IO pio
);

Kernel32.dll, VOID WINAPI WaitForThreadpoolIoCallbacks(
    __inout PTP_IO pio,
    __in    BOOL   fCancelPendingCallbacks
);

Kernel32.dll, VOID WINAPI CloseThreadpoolIo(
    __inout PTP_IO pio
);

Kernel32.dll, HANDLE WINAPI CreatePrivateNamespaceA(
    __in_opt LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,
    __in     LPVOID lpBoundaryDescriptor,
    __in     LPCSTR lpAliasPrefix
);

Kernel32.dll, HANDLE WINAPI CreatePrivateNamespaceW(
    __in_opt LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,
    __in     LPVOID lpBoundaryDescriptor,
    __in     LPCSTR lpAliasPrefix
);

Kernel32.dll, HANDLE WINAPI OpenPrivateNamespaceA(
    __in     LPVOID lpBoundaryDescriptor,
    __in     LPCSTR lpAliasPrefix
);

Kernel32.dll, HANDLE WINAPI OpenPrivateNamespaceW(
    __in     LPVOID lpBoundaryDescriptor,
    __in     LPCSTR lpAliasPrefix
);

Kernel32.dll, BOOLEAN WINAPI ClosePrivateNamespace(
    __in HANDLE Handle,
    __in ULONG Flags
);

Kernel32.dll, HANDLE APIENTRY CreateBoundaryDescriptorA(
    __in LPCSTR Name,
    __in ULONG Flags
);

Kernel32.dll, HANDLE APIENTRY CreateBoundaryDescriptorW(
    __in LPCSTR Name,
    __in ULONG Flags
);

Kernel32.dll, BOOL WINAPI AddSIDToBoundaryDescriptor(
    __inout HANDLE * BoundaryDescriptor,
    __in PSID RequiredSid
);

Kernel32.dll, BOOL WINAPI AddIntegrityLabelToBoundaryDescriptor(
    __inout HANDLE * BoundaryDescriptor,
    __in PSID IntegrityLabel
);

Kernel32.dll, VOID WINAPI DeleteBoundaryDescriptor(
    __in HANDLE BoundaryDescriptor
);

Kernel32.dll, BOOL WINAPI QueryPerformanceCounter(
    __out LARGE_INTEGER *lpPerformanceCount
);

Kernel32.dll, BOOL WINAPI QueryPerformanceFrequency(
    __out LARGE_INTEGER *lpFrequency
);

Kernel32.dll, BOOL WINAPI GetVersionExA(
    __inout LPOSVERSIONINFOA lpVersionInformation
);

Kernel32.dll, BOOL WINAPI GetVersionExW(
    __inout LPOSVERSIONINFOA lpVersionInformation
);

Kernel32.dll, BOOL WINAPI VerifyVersionInfoA(
    __inout LPOSVERSIONINFOEXA lpVersionInformation,
    __in    DWORD dwTypeMask,
    __in    DWORDLONG dwlConditionMask
);

Kernel32.dll, BOOL WINAPI VerifyVersionInfoW(
    __inout LPOSVERSIONINFOEXA lpVersionInformation,
    __in    DWORD dwTypeMask,
    __in    DWORDLONG dwlConditionMask
);

Kernel32.dll, BOOL WINAPI GetProductInfo(
    __in  DWORD  dwOSMajorVersion,
    __in  DWORD  dwOSMinorVersion,
    __in  DWORD  dwSpMajorVersion,
    __in  DWORD  dwSpMinorVersion,
    __out PDWORD pdwReturnedProductType
);

Kernel32.dll, BOOL WINAPI SetSystemPowerState(
    __in BOOL fSuspend,
    __in BOOL fForce
);

Kernel32.dll, BOOL WINAPI AllocateUserPhysicalPages(
    __in    HANDLE hProcess,
    __inout PULONG_PTR NumberOfPages,
    __out_ecount_part PULONG_PTR PageArray
);

Kernel32.dll, BOOL WINAPI AllocateUserPhysicalPagesNuma(
    __in    HANDLE hProcess,
    __inout PULONG_PTR NumberOfPages,
    __out_ecount_part PULONG_PTR PageArray,
    __in    DWORD nndPreferred
);

Kernel32.dll, BOOL WINAPI FreeUserPhysicalPages(
    __in    HANDLE hProcess,
    __inout PULONG_PTR NumberOfPages,
    __in_ecount PULONG_PTR PageArray
);

Kernel32.dll, BOOL WINAPI MapUserPhysicalPages(
    __in PVOID VirtualAddress,
    __in ULONG_PTR NumberOfPages,
    __in_ecount_opt PULONG_PTR PageArray
);

Kernel32.dll, BOOL WINAPI MapUserPhysicalPagesScatter(
    __in_ecount PVOID *VirtualAddresses,
    __in ULONG_PTR NumberOfPages,
    __in_ecount_opt PULONG_PTR PageArray
);

Kernel32.dll, HANDLE WINAPI CreateJobObjectA(
    __in_opt LPSECURITY_ATTRIBUTES lpJobAttributes,
    __in_opt LPCSTR lpName
);

Kernel32.dll, HANDLE WINAPI CreateJobObjectW(
    __in_opt LPSECURITY_ATTRIBUTES lpJobAttributes,
    __in_opt LPCSTR lpName
);

Kernel32.dll, HANDLE WINAPI OpenJobObjectA(
    __in DWORD dwDesiredAccess,
    __in BOOL bInheritHandle,
    __in LPCSTR lpName
);

Kernel32.dll, HANDLE WINAPI OpenJobObjectW(
    __in DWORD dwDesiredAccess,
    __in BOOL bInheritHandle,
    __in LPCSTR lpName
);

Kernel32.dll, BOOL WINAPI AssignProcessToJobObject(
    __in HANDLE hJob,
    __in HANDLE hProcess
);

Kernel32.dll, BOOL WINAPI TerminateJobObject(
    __in HANDLE hJob,
    __in UINT uExitCode
);

Kernel32.dll, BOOL WINAPI QueryInformationJobObject(
    __in_opt  HANDLE hJob,
    __in      JOBOBJECTINFOCLASS JobObjectInformationClass,
    __out_bcount_part LPVOID lpJobObjectInformation,
    __in      DWORD cbJobObjectInformationLength,
    __out_opt LPDWORD lpReturnLength
);

Kernel32.dll, BOOL WINAPI SetInformationJobObject(
    __in HANDLE hJob,
    __in JOBOBJECTINFOCLASS JobObjectInformationClass,
    __in_bcount LPVOID lpJobObjectInformation,
    __in DWORD cbJobObjectInformationLength
);

Kernel32.dll, BOOL WINAPI IsProcessInJob(
    __in     HANDLE ProcessHandle,
    __in_opt HANDLE JobHandle,
    __out    PBOOL Result
);

Kernel32.dll, BOOL WINAPI CreateJobSet(
    __in ULONG NumJob,
    __in_ecount PJOB_SET_ARRAY UserJobSet,
    __in ULONG Flags
);

Kernel32.dll, PVOID WINAPI AddVectoredExceptionHandler(
    __in ULONG First,
    __in PVECTORED_EXCEPTION_HANDLER Handler
);

Kernel32.dll, ULONG WINAPI RemoveVectoredExceptionHandler(
    __in PVOID Handle
);

Kernel32.dll, PVOID WINAPI AddVectoredContinueHandler(
    __in ULONG First,
    __in PVECTORED_EXCEPTION_HANDLER Handler
);

Kernel32.dll, ULONG WINAPI RemoveVectoredContinueHandler(
    __in PVOID Handle
);

Kernel32.dll, HANDLE WINAPI FindFirstVolumeA(
    __out_ecount LPSTR lpszVolumeName,
    __in DWORD cchBufferLength
);

Kernel32.dll, HANDLE WINAPI FindFirstVolumeW(
    __out_ecount LPSTR lpszVolumeName,
    __in DWORD cchBufferLength
);

Kernel32.dll, BOOL WINAPI FindNextVolumeA(
    __inout HANDLE hFindVolume,
    __out_ecount LPSTR lpszVolumeName,
    __in    DWORD cchBufferLength
);

Kernel32.dll, BOOL WINAPI FindNextVolumeW(
    __inout HANDLE hFindVolume,
    __out_ecount LPSTR lpszVolumeName,
    __in    DWORD cchBufferLength
);

Kernel32.dll, BOOL WINAPI FindVolumeClose(
    __in HANDLE hFindVolume
);

Kernel32.dll, HANDLE WINAPI FindFirstVolumeMountPointA(
    __in LPCSTR lpszRootPathName,
    __out_ecount LPSTR lpszVolumeMountPoint,
    __in DWORD cchBufferLength
);

Kernel32.dll, HANDLE WINAPI FindFirstVolumeMountPointW(
    __in LPCSTR lpszRootPathName,
    __out_ecount LPSTR lpszVolumeMountPoint,
    __in DWORD cchBufferLength
);

Kernel32.dll, BOOL WINAPI FindNextVolumeMountPointA(
    __in HANDLE hFindVolumeMountPoint,
    __out_ecount LPSTR lpszVolumeMountPoint,
    __in DWORD cchBufferLength
);

Kernel32.dll, BOOL WINAPI FindNextVolumeMountPointW(
    __in HANDLE hFindVolumeMountPoint,
    __out_ecount LPSTR lpszVolumeMountPoint,
    __in DWORD cchBufferLength
);

Kernel32.dll, BOOL WINAPI FindVolumeMountPointClose(
    __in HANDLE hFindVolumeMountPoint
);

Kernel32.dll, BOOL WINAPI SetVolumeMountPointA(
    __in LPCSTR lpszVolumeMountPoint,
    __in LPCSTR lpszVolumeName
);

Kernel32.dll, BOOL WINAPI SetVolumeMountPointW(
    __in LPCSTR lpszVolumeMountPoint,
    __in LPCSTR lpszVolumeName
);

Kernel32.dll, BOOL WINAPI DeleteVolumeMountPointA(
    __in LPCSTR lpszVolumeMountPoint
);

Kernel32.dll, BOOL WINAPI DeleteVolumeMountPointW(
    __in LPCSTR lpszVolumeMountPoint
);

Kernel32.dll, BOOL WINAPI GetVolumeNameForVolumeMountPointA(
    __in LPCSTR lpszVolumeMountPoint,
    __out_ecount LPSTR lpszVolumeName,
    __in DWORD cchBufferLength
);

Kernel32.dll, BOOL WINAPI GetVolumeNameForVolumeMountPointW(
    __in LPCSTR lpszVolumeMountPoint,
    __out_ecount LPSTR lpszVolumeName,
    __in DWORD cchBufferLength
);

Kernel32.dll, BOOL WINAPI GetVolumePathNameA(
    __in LPCSTR lpszFileName,
    __out_ecount LPSTR lpszVolumePathName,
    __in DWORD cchBufferLength
);

Kernel32.dll, BOOL WINAPI GetVolumePathNameW(
    __in LPCSTR lpszFileName,
    __out_ecount LPSTR lpszVolumePathName,
    __in DWORD cchBufferLength
);

Kernel32.dll, BOOL WINAPI GetVolumePathNamesForVolumeNameA(
    __in  LPCSTR lpszVolumeName,
    __out_ecount_part_opt LPCH lpszVolumePathNames,
    __in  DWORD cchBufferLength,
    __out PDWORD lpcchReturnLength
);

Kernel32.dll, BOOL WINAPI GetVolumePathNamesForVolumeNameW(
    __in  LPCSTR lpszVolumeName,
    __out_ecount_part_opt LPCH lpszVolumePathNames,
    __in  DWORD cchBufferLength,
    __out PDWORD lpcchReturnLength
);

Kernel32.dll, HANDLE WINAPI CreateActCtxA(
    __in PCACTCTXA pActCtx
);

Kernel32.dll, HANDLE WINAPI CreateActCtxW(
    __in PCACTCTXA pActCtx
);

Kernel32.dll, VOID WINAPI AddRefActCtx(
    __inout HANDLE hActCtx
);

Kernel32.dll, VOID WINAPI ReleaseActCtx(
    __inout HANDLE hActCtx
);

Kernel32.dll, BOOL WINAPI ZombifyActCtx(
    __inout HANDLE hActCtx
);

Kernel32.dll, BOOL WINAPI ActivateActCtx(
    __inout_opt HANDLE hActCtx,
    __out   ULONG_PTR *lpCookie
);

Kernel32.dll, BOOL WINAPI DeactivateActCtx(
    __in DWORD dwFlags,
    __in ULONG_PTR ulCookie
);

Kernel32.dll, BOOL WINAPI GetCurrentActCtx(
    __deref_out HANDLE *lphActCtx
);

Kernel32.dll, BOOL WINAPI FindActCtxSectionStringA(
    __in       DWORD dwFlags,
    __reserved const GUID *lpExtensionGuid,
    __in       ULONG ulSectionId,
    __in       LPCSTR lpStringToFind,
    __out      PACTCTX_SECTION_KEYED_DATA ReturnedData
);

Kernel32.dll, BOOL WINAPI FindActCtxSectionStringW(
    __in       DWORD dwFlags,
    __reserved const GUID *lpExtensionGuid,
    __in       ULONG ulSectionId,
    __in       LPCSTR lpStringToFind,
    __out      PACTCTX_SECTION_KEYED_DATA ReturnedData
);

Kernel32.dll, BOOL WINAPI FindActCtxSectionGuid(
    __in       DWORD dwFlags,
    __reserved const GUID *lpExtensionGuid,
    __in       ULONG ulSectionId,
    __in_opt   const GUID *lpGuidToFind,
    __out      PACTCTX_SECTION_KEYED_DATA ReturnedData
);

Kernel32.dll, BOOL WINAPI ProcessIdToSessionId(
    __in  DWORD dwProcessId,
    __out DWORD *pSessionId
);

Kernel32.dll, DWORD WINAPI WTSGetActiveConsoleSessionId(
    void aaa
);

Kernel32.dll, BOOL WINAPI IsWow64Process(
    __in  HANDLE hProcess,
    __out PBOOL Wow64Process
);

Kernel32.dll, BOOL WINAPI GetLogicalProcessorInformation(
    __out_bcount_part_opt PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer,
    __inout PDWORD ReturnedLength
);

Kernel32.dll, BOOL WINAPI GetLogicalProcessorInformationEx(
    __in LOGICAL_PROCESSOR_RELATIONSHIP RelationshipType,
    __out_bcount_part_opt PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX Buffer,
    __inout PDWORD ReturnedLength
);

Kernel32.dll, WORD WINAPI GetActiveProcessorGroupCount(
    void aaa
);

Kernel32.dll, WORD WINAPI GetMaximumProcessorGroupCount(
    void aaa
);

Kernel32.dll, DWORD WINAPI GetActiveProcessorCount(
    __in WORD GroupNumber
);

Kernel32.dll, DWORD WINAPI GetMaximumProcessorCount(
    __in WORD GroupNumber
);

Kernel32.dll, BOOL WINAPI GetNumaHighestNodeNumber(
    __out PULONG HighestNodeNumber
);

Kernel32.dll, BOOL WINAPI GetNumaProcessorNode(
    __in  UCHAR Processor,
    __out PUCHAR NodeNumber
);

Kernel32.dll, BOOL WINAPI GetNumaNodeNumberFromHandle(
    __in  HANDLE hFile,
    __out PUSHORT NodeNumber
);

Kernel32.dll, BOOL WINAPI GetNumaProcessorNodeEx(
    __in  PPROCESSOR_NUMBER Processor,
    __out PUSHORT NodeNumber
);

Kernel32.dll, BOOL WINAPI GetNumaNodeProcessorMask(
    __in  UCHAR Node,
    __out PULONGLONG ProcessorMask
);

Kernel32.dll, BOOL WINAPI GetNumaNodeProcessorMaskEx(
    __in  USHORT Node,
    __out PGROUP_AFFINITY ProcessorMask
);

Kernel32.dll, BOOL WINAPI GetNumaAvailableMemoryNode(
    __in  UCHAR Node,
    __out PULONGLONG AvailableBytes
);

Kernel32.dll, BOOL WINAPI GetNumaAvailableMemoryNodeEx(
    __in  USHORT Node,
    __out PULONGLONG AvailableBytes
);

Kernel32.dll, BOOL WINAPI GetNumaProximityNode(
    __in  ULONG ProximityId,
    __out PUCHAR NodeNumber
);

Kernel32.dll, BOOL WINAPI GetNumaProximityNodeEx(
    __in  ULONG ProximityId,
    __out PUSHORT NodeNumber
);

Kernel32.dll, HRESULT WINAPI GetApplicationRecoveryCallback(
    __in  HANDLE hProcess,
    __out APPLICATION_RECOVERY_CALLBACK* pRecoveryCallback,
    __deref_opt_out_opt PVOID* ppvParameter,
    __out_opt PDWORD pdwPingInterval,
    __out_opt PDWORD pdwFlags
);

Kernel32.dll, HRESULT WINAPI GetApplicationRestartSettings(
    __in HANDLE hProcess,
    __out_ecount_opt PWSTR pwzCommandline,
    __inout PDWORD pcchSize,
    __out_opt PDWORD pdwFlags
);

Kernel32.dll, HRESULT WINAPI ApplicationRecoveryInProgress(
    __out PBOOL pbCancelled
);

Kernel32.dll, VOID WINAPI ApplicationRecoveryFinished(
    __in BOOL bSuccess
);

Kernel32.dll, BOOL WINAPI SetFileInformationByHandle(
    __in  HANDLE hFile,
    __in  FILE_INFO_BY_HANDLE_CLASS FileInformationClass,
    __in_bcount LPVOID lpFileInformation,
    __in  DWORD dwBufferSize
);

Kernel32.dll, BOOL WINAPI GetFileInformationByHandleEx(
    __in  HANDLE hFile,
    __in  FILE_INFO_BY_HANDLE_CLASS FileInformationClass,
    __out_bcount LPVOID lpFileInformation,
    __in  DWORD dwBufferSize
);

Kernel32.dll, HANDLE WINAPI OpenFileById(
    __in     HANDLE hVolumeHint,
    __in     LPFILE_ID_DESCRIPTOR lpFileId,
    __in     DWORD dwDesiredAccess,
    __in     DWORD dwShareMode,
    __in_opt LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    __in     DWORD dwFlagsAndAttributes
);

Kernel32.dll, BOOLEAN WINAPI CreateSymbolicLinkA(
    __in LPCSTR lpSymlinkFileName,
    __in LPCSTR lpTargetFileName,
    __in DWORD dwFlags
);

Kernel32.dll, BOOLEAN WINAPI CreateSymbolicLinkW(
    __in LPCSTR lpSymlinkFileName,
    __in LPCSTR lpTargetFileName,
    __in DWORD dwFlags
);

Kernel32.dll, BOOLEAN WINAPI CreateSymbolicLinkTransactedA(
    __in     LPCSTR lpSymlinkFileName,
    __in     LPCSTR lpTargetFileName,
    __in     DWORD dwFlags,
    __in     HANDLE hTransaction
);

Kernel32.dll, BOOLEAN WINAPI CreateSymbolicLinkTransactedW(
    __in     LPCSTR lpSymlinkFileName,
    __in     LPCSTR lpTargetFileName,
    __in     DWORD dwFlags,
    __in     HANDLE hTransaction
);

Kernel32.dll, DWORD WINAPI GetFinalPathNameByHandleA(
    __in HANDLE hFile,
    __out_ecount LPSTR lpszFilePath,
    __in DWORD cchFilePath,
    __in DWORD dwFlags
);

Kernel32.dll, DWORD WINAPI GetFinalPathNameByHandleW(
    __in HANDLE hFile,
    __out_ecount LPSTR lpszFilePath,
    __in DWORD cchFilePath,
    __in DWORD dwFlags
);

Kernel32.dll, BOOL WINAPI ReplacePartitionUnit(
    __in PWSTR TargetPartition,
    __in PWSTR SparePartition,
    __in ULONG Flags
);

Kernel32.dll, BOOL WINAPI AddSecureMemoryCacheCallback(
    __in __callback PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack
);

Kernel32.dll, BOOL WINAPI RemoveSecureMemoryCacheCallback(
    __in __callback PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack
);



advapi32.dll, LONG WINAPI RegOpenKeyExA(
  __in        HKEY hKey,
  __in_opt    LPCTSTR lpSubKey,
  __reserved  DWORD ulOptions,
  __in        REGSAM samDesired,
  __out       PHKEY phkResult
);

advapi32.dll, LONG WINAPI RegOpenKeyExW(
  __in        HKEY hKey,
  __in_opt    LPCTSTR lpSubKey,
  __reserved  DWORD ulOptions,
  __in        REGSAM samDesired,
  __out       PHKEY phkResult
);

advapi32.dll, LONG WINAPI RegQueryValueExA(
  __in         HKEY hKey,
  __in_opt     LPCTSTR lpValueName,
  __reserved   LPDWORD lpReserved,
  __out_opt    LPDWORD lpType,
  __out_opt    LPBYTE lpData,
  __inout_opt  LPDWORD lpcbData
);

advapi32.dll, LONG WINAPI RegQueryValueExW(
  __in         HKEY hKey,
  __in_opt     LPCTSTR lpValueName,
  __reserved   LPDWORD lpReserved,
  __out_opt    LPDWORD lpType,
  __out_opt    LPBYTE lpData,
  __inout_opt  LPDWORD lpcbData
);

advapi32.dll, LONG WINAPI RegQueryInfoKeyA(
  __in         HKEY hKey,
  __out        LPTSTR lpClass,
  __inout_opt  LPDWORD lpcClass,
  __reserved   LPDWORD lpReserved,
  __out_opt    LPDWORD lpcSubKeys,
  __out_opt    LPDWORD lpcMaxSubKeyLen,
  __out_opt    LPDWORD lpcMaxClassLen,
  __out_opt    LPDWORD lpcValues,
  __out_opt    LPDWORD lpcMaxValueNameLen,
  __out_opt    LPDWORD lpcMaxValueLen,
  __out_opt    LPDWORD lpcbSecurityDescriptor,
  __out_opt    PFILETIME lpftLastWriteTime
);

advapi32.dll, LONG WINAPI RegQueryInfoKeyW(
  __in         HKEY hKey,
  __out        LPTSTR lpClass,
  __inout_opt  LPDWORD lpcClass,
  __reserved   LPDWORD lpReserved,
  __out_opt    LPDWORD lpcSubKeys,
  __out_opt    LPDWORD lpcMaxSubKeyLen,
  __out_opt    LPDWORD lpcMaxClassLen,
  __out_opt    LPDWORD lpcValues,
  __out_opt    LPDWORD lpcMaxValueNameLen,
  __out_opt    LPDWORD lpcMaxValueLen,
  __out_opt    LPDWORD lpcbSecurityDescriptor,
  __out_opt    PFILETIME lpftLastWriteTime
);

advapi32.dll, LONG WINAPI RegCreateKeyExA(
  __in        HKEY hKey,
  __in        LPCTSTR lpSubKey,
  __reserved  DWORD Reserved,
  __in_opt    LPTSTR lpClass,
  __in        DWORD dwOptions,
  __in        REGSAM samDesired,
  __in_opt    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
  __out       PHKEY phkResult,
  __out_opt   LPDWORD lpdwDisposition
);

advapi32.dll, LONG WINAPI RegCreateKeyExW(
  __in        HKEY hKey,
  __in        LPCTSTR lpSubKey,
  __reserved  DWORD Reserved,
  __in_opt    LPTSTR lpClass,
  __in        DWORD dwOptions,
  __in        REGSAM samDesired,
  __in_opt    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
  __out       PHKEY phkResult,
  __out_opt   LPDWORD lpdwDisposition
);

advapi32.dll, LONG WINAPI RegOpenKeyA(
  __in      HKEY hKey,
  __in_opt  LPCTSTR lpSubKey,
  __out     PHKEY phkResult
);

advapi32.dll, LONG WINAPI RegOpenKeyW(
  __in      HKEY hKey,
  __in_opt  LPCTSTR lpSubKey,
  __out     PHKEY phkResult
);




PowrProf.dll, DWORD WINAPI PowerReadDCValueIndex(
  __in_opt  HKEY RootPowerKey,
  __in_opt  const GUID *SchemeGuid,
  __in_opt  const GUID *SubGroupOfPowerSettingsGuid,
  __in_opt  const GUID *PowerSettingGuid,
  __out     LPDWORD DcValueIndex
);

PowrProf.dll, DWORD WINAPI PowerGetActiveScheme(
  __in_opt  HKEY UserRootPowerKey,
  __out     GUID **ActivePolicyGuid
);

PowrProf.dll, DWORD WINAPI PowerReadACValueIndex(
  __in_opt  HKEY RootPowerKey,
  __in_opt  const GUID *SchemeGuid,
  __in_opt  const GUID *SubGroupOfPowerSettingsGuid,
  __in_opt  const GUID *PowerSettingGuid,
  __out     LPDWORD DcValueIndex
);



wlanapi.dll, DWORD WINAPI WlanOpenHandle(
    __in DWORD dwClientVersion,
    __reserved PVOID pReserved,
    __out PDWORD pdwNegotiatedVersion,
    __out PHANDLE phClientHandle
);

wlanapi.dll, DWORD WINAPI WlanCloseHandle(
    __in HANDLE hClientHandle,
    __reserved PVOID pReserved
);

wlanapi.dll, DWORD WINAPI WlanEnumInterfaces(
    __in HANDLE hClientHandle,
    __reserved PVOID pReserved,
    __deref_out PWLAN_INTERFACE_INFO_LIST *ppInterfaceList
);

wlanapi.dll, DWORD WINAPI WlanSetAutoConfigParameter(
    __in HANDLE hClientHandle,
    __in WLAN_AUTOCONF_OPCODE OpCode,
    __in DWORD dwDataSize,
    __in_bcount CONST PVOID pData,
    __reserved PVOID pReserved
);

wlanapi.dll, DWORD WINAPI WlanQueryAutoConfigParameter(
    __in HANDLE hClientHandle,
    __in WLAN_AUTOCONF_OPCODE OpCode,
    __reserved PVOID pReserved,
    __out PDWORD pdwDataSize,
    __deref_out_bcount PVOID *ppData,
    __out_opt PWLAN_OPCODE_VALUE_TYPE pWlanOpcodeValueType
);

wlanapi.dll, DWORD WINAPI  WlanGetInterfaceCapability(
    __in HANDLE hClientHandle,
    __in CONST GUID *pInterfaceGuid,
    __reserved PVOID pReserved,
    __deref_out PWLAN_INTERFACE_CAPABILITY *ppCapability
);

wlanapi.dll, DWORD WINAPI WlanSetInterface(
    __in HANDLE hClientHandle,
    __in CONST GUID *pInterfaceGuid, 
    __in WLAN_INTF_OPCODE OpCode,
    __in DWORD dwDataSize,
    __in_bcount CONST PVOID pData,
    __reserved PVOID pReserved
);

wlanapi.dll, DWORD WINAPI WlanQueryInterface(
    __in HANDLE hClientHandle,
    __in CONST GUID *pInterfaceGuid, 
    __in WLAN_INTF_OPCODE OpCode,
    __reserved PVOID pReserved,
    __out PDWORD pdwDataSize,
    __deref_out_bcount PVOID *ppData,
    __out_opt PWLAN_OPCODE_VALUE_TYPE pWlanOpcodeValueType
);

wlanapi.dll, DWORD WINAPI WlanIhvControl(
    __in HANDLE hClientHandle,
    __in CONST GUID *pInterfaceGuid,
    __in WLAN_IHV_CONTROL_TYPE Type,
    __in DWORD dwInBufferSize,
    __in_bcount PVOID pInBuffer,
    __in DWORD dwOutBufferSize,
    __inout_bcount_opt PVOID pOutBuffer,
    __out PDWORD pdwBytesReturned
);

wlanapi.dll, DWORD WINAPI WlanScan(
    __in HANDLE hClientHandle,
    __in CONST GUID *pInterfaceGuid, 
    __in_opt CONST PDOT11_SSID pDot11Ssid,
    __in_opt CONST PWLAN_RAW_DATA pIeData,
    __reserved PVOID pReserved
);

wlanapi.dll, DWORD WINAPI WlanGetAvailableNetworkList(
    __in HANDLE hClientHandle,
    __in CONST GUID *pInterfaceGuid,
    __in DWORD dwFlags,
    __reserved PVOID pReserved,
    __deref_out PWLAN_AVAILABLE_NETWORK_LIST *ppAvailableNetworkList
);

wlanapi.dll, DWORD WINAPI WlanGetNetworkBssList(
    __in HANDLE hClientHandle,
    __in CONST GUID *pInterfaceGuid, 
    __in_opt CONST PDOT11_SSID pDot11Ssid,
    __in DOT11_BSS_TYPE dot11BssType,
    __in BOOL bSecurityEnabled,
    __reserved PVOID pReserved,
    __deref_out PWLAN_BSS_LIST *ppWlanBssList
);

wlanapi.dll, DWORD WINAPI  WlanConnect(
    __in HANDLE hClientHandle,
    __in CONST GUID *pInterfaceGuid, 
    __in CONST PWLAN_CONNECTION_PARAMETERS pConnectionParameters,
    __reserved PVOID pReserved
);

wlanapi.dll, DWORD WINAPI WlanDisconnect(
    __in HANDLE hClientHandle,
    __in CONST GUID *pInterfaceGuid, 
    __reserved PVOID pReserved
);

wlanapi.dll, DWORD WINAPI WlanRegisterNotification(
    __in HANDLE hClientHandle,
    __in DWORD dwNotifSource,
    __in BOOL bIgnoreDuplicate,
    __in_opt WLAN_NOTIFICATION_CALLBACK funcCallback,
    __in_opt PVOID pCallbackContext,
    __reserved PVOID pReserved,
    __out_opt PDWORD pdwPrevNotifSource
);

wlanapi.dll, DWORD WINAPI WlanGetProfileA(
    __in HANDLE hClientHandle,
    __in CONST GUID *pInterfaceGuid,
    __in LPCWSTR strProfileName,
    __reserved PVOID pReserved,
    __deref_out LPWSTR *pstrProfileXml,
    __inout_opt DWORD *pdwFlags,    
    __out_opt DWORD *pdwGrantedAccess
);

wlanapi.dll, DWORD WINAPI WlanGetProfileW(
    __in HANDLE hClientHandle,
    __in CONST GUID *pInterfaceGuid,
    __in LPCWSTR strProfileName,
    __reserved PVOID pReserved,
    __deref_out LPWSTR *pstrProfileXml,
    __inout_opt DWORD *pdwFlags,    
    __out_opt DWORD *pdwGrantedAccess
);

wlanapi.dll, DWORD WINAPI WlanSetProfileEapUserData(
    __in HANDLE hClientHandle,
    __in const GUID *pInterfaceGuid,
    __in LPCWSTR strProfileName,
    __in EAP_METHOD_TYPE eapType,
    __in DWORD dwFlags,
    __in DWORD dwEapUserDataSize,
    __in_bcount const LPBYTE pbEapUserData,
    __reserved PVOID pReserved
);

wlanapi.dll, DWORD WINAPI WlanSetProfileEapXmlUserData(
    __in HANDLE hClientHandle,
    __in const GUID *pInterfaceGuid,
    __in LPCWSTR strProfileName,
    __in DWORD dwFlags,
    __in LPCWSTR strEapXmlUserData,
    __reserved PVOID pReserved
);

wlanapi.dll, DWORD WINAPI WlanSetProfile(
    __in HANDLE hClientHandle,
    __in CONST GUID *pInterfaceGuid,
    __in DWORD dwFlags,
    __in LPCWSTR strProfileXml,
    __in_opt LPCWSTR strAllUserProfileSecurity,
    __in BOOL bOverwrite,
    __reserved PVOID pReserved,
    __out DWORD *pdwReasonCode
);

wlanapi.dll, DWORD WINAPI WlanDeleteProfile(
    __in HANDLE hClientHandle,
    __in CONST GUID *pInterfaceGuid,
    __in LPCWSTR strProfileName,
    __reserved PVOID pReserved
);

wlanapi.dll, DWORD WINAPI WlanRenameProfile(
    __in HANDLE hClientHandle,
    __in CONST GUID *pInterfaceGuid,
    __in LPCWSTR strOldProfileName,
    __in LPCWSTR strNewProfileName,
    __reserved PVOID pReserved
);

wlanapi.dll, DWORD WINAPI WlanGetProfileList(
    __in HANDLE hClientHandle,
    __in CONST GUID *pInterfaceGuid,
    __reserved PVOID pReserved,
    __deref_out PWLAN_PROFILE_INFO_LIST *ppProfileList
);

wlanapi.dll, DWORD WINAPI WlanSetProfileList(
    __in HANDLE hClientHandle,
    __in CONST GUID *pInterfaceGuid,
    __in DWORD dwItems,
    __in_ecount LPCWSTR *strProfileNames,
    __reserved PVOID pReserved
);

wlanapi.dll, DWORD WINAPI WlanSetProfilePosition(
    __in HANDLE hClientHandle,
    __in CONST GUID *pInterfaceGuid,
    __in LPCWSTR strProfileName,
    __in DWORD dwPosition,
    __reserved PVOID pReserved
);

wlanapi.dll, DWORD WINAPI WlanSetProfileCustomUserData(
    __in HANDLE hClientHandle,
    __in CONST GUID *pInterfaceGuid,
    __in LPCWSTR strProfileName,
    __in DWORD dwDataSize,
    __in_bcount CONST PBYTE pData,
    __reserved PVOID pReserved
);

wlanapi.dll, DWORD WINAPI WlanGetProfileCustomUserData(
    __in HANDLE hClientHandle,
    __in CONST GUID *pInterfaceGuid,
    __in LPCWSTR strProfileName,
    __reserved PVOID pReserved,
    __out DWORD *pdwDataSize,
    __deref_out_bcount PBYTE *ppData
);

wlanapi.dll, DWORD WINAPI WlanSetFilterList(
    __in HANDLE hClientHandle,
    __in WLAN_FILTER_LIST_TYPE wlanFilterListType,
    __in_opt CONST PDOT11_NETWORK_LIST pNetworkList,
    __reserved PVOID pReserved
);

wlanapi.dll, DWORD WINAPI WlanGetFilterList(
    __in HANDLE hClientHandle,
    __in WLAN_FILTER_LIST_TYPE wlanFilterListType,
    __reserved PVOID pReserved,
    __deref_out PDOT11_NETWORK_LIST *ppNetworkList
);

wlanapi.dll, DWORD WINAPI WlanSetPsdIEDataList(
    __in HANDLE hClientHandle,
    __in_opt LPCWSTR strFormat,
    __in_opt CONST PWLAN_RAW_DATA_LIST pPsdIEDataList,
    __reserved PVOID pReserved
);

wlanapi.dll, DWORD WINAPI WlanSaveTemporaryProfile(
    __in HANDLE hClientHandle,
    __in CONST GUID* pInterfaceGuid,
    __in LPCWSTR strProfileName,
    __in_opt LPCWSTR strAllUserProfileSecurity,
    __in DWORD dwFlags,
    __in BOOL bOverWrite,
    __reserved PVOID pReserved
);

wlanapi.dll, DWORD WINAPI WlanExtractPsdIEDataList(
    __in HANDLE hClientHandle,
    __in DWORD dwIeDataSize,
    __in_bcount CONST PBYTE pRawIeData,
    __in LPCWSTR strFormat,
    __reserved PVOID pReserved,
    __deref_out PWLAN_RAW_DATA_LIST *ppPsdIEDataList
);

wlanapi.dll, DWORD WINAPI WlanReasonCodeToString(
    __in DWORD dwReasonCode,
    __in DWORD dwBufferSize,
    __in_ecount PWCHAR pStringBuffer,
    __reserved PVOID pReserved
);

wlanapi.dll, PVOID WINAPI WlanAllocateMemory(
    __in DWORD dwMemorySize
);

wlanapi.dll, VOID WINAPI WlanFreeMemory(
    __in PVOID pMemory
);

wlanapi.dll, DWORD WINAPI WlanSetSecuritySettings(
    __in HANDLE hClientHandle,
    __in WLAN_SECURABLE_OBJECT SecurableObject,
    __in LPCWSTR strModifiedSDDL
);

wlanapi.dll, DWORD WINAPI WlanGetSecuritySettingsA(
    __in HANDLE hClientHandle,
    __in WLAN_SECURABLE_OBJECT SecurableObject,
    __out_opt PWLAN_OPCODE_VALUE_TYPE pValueType,
    __deref_out LPWSTR* pstrCurrentSDDL,
    __out PDWORD pdwGrantedAccess
);

wlanapi.dll, DWORD WINAPI WlanGetSecuritySettingsW(
    __in HANDLE hClientHandle,
    __in WLAN_SECURABLE_OBJECT SecurableObject,
    __out_opt PWLAN_OPCODE_VALUE_TYPE pValueType,
    __deref_out LPWSTR* pstrCurrentSDDL,
    __out PDWORD pdwGrantedAccess
);

wlanapi.dll, DWORD WINAPI WlanHostedNetworkStartUsing(
    __in        HANDLE                          hClientHandle,
    __out_opt   PWLAN_HOSTED_NETWORK_REASON     pFailReason,
    __reserved  PVOID                           pvReserved
);

wlanapi.dll, DWORD WINAPI WlanHostedNetworkStopUsing
(
    __in        HANDLE                          hClientHandle,
    __out_opt   PWLAN_HOSTED_NETWORK_REASON     pFailReason,
    __reserved  PVOID                           pvReserved
);

wlanapi.dll, DWORD WINAPI WlanHostedNetworkForceStart(
    __in        HANDLE                          hClientHandle,
    __out_opt   PWLAN_HOSTED_NETWORK_REASON     pFailReason,
    __reserved  PVOID                           pvReserved
);

wlanapi.dll, DWORD WINAPI WlanHostedNetworkForceStop(
    __in        HANDLE                          hClientHandle,
    __out_opt   PWLAN_HOSTED_NETWORK_REASON     pFailReason,
    __reserved  PVOID                           pvReserved
);

wlanapi.dll, DWORD WINAPI WlanHostedNetworkQueryProperty(
    __in                                HANDLE                      hClientHandle,
    __in                                WLAN_HOSTED_NETWORK_OPCODE  OpCode,
    __out                               PDWORD                      pdwDataSize,
    __deref_out_bcount    PVOID*                      ppvData,
    __out                               PWLAN_OPCODE_VALUE_TYPE     pWlanOpcodeValueType,
    __reserved  PVOID                                               pvReserved
);

wlanapi.dll, DWORD WINAPI WlanHostedNetworkSetProperty(
    __in                        HANDLE                          hClientHandle,
    __in                        WLAN_HOSTED_NETWORK_OPCODE      OpCode,
    __in                        DWORD                           dwDataSize,
    __in_bcount     PVOID                           pvData,
    __out_opt                   PWLAN_HOSTED_NETWORK_REASON     pFailReason,
    __reserved                  PVOID                           pvReserved
);

wlanapi.dll, DWORD WINAPI WlanHostedNetworkInitSettings(
    __in        HANDLE                          hClientHandle,
    __out_opt   PWLAN_HOSTED_NETWORK_REASON     pFailReason,
    __reserved  PVOID                           pvReserved
);

wlanapi.dll, DWORD WINAPI WlanHostedNetworkRefreshSecuritySettings(
    __in        HANDLE                          hClientHandle,
    __out_opt   PWLAN_HOSTED_NETWORK_REASON     pFailReason,
    __reserved  PVOID                           pvReserved
);

wlanapi.dll, DWORD WINAPI WlanHostedNetworkQueryStatus(
    __in        HANDLE                          hClientHandle,
    __deref_out PWLAN_HOSTED_NETWORK_STATUS*    ppWlanHostedNetworkStatus,
    __reserved  PVOID                           pvReserved
);

wlanapi.dll, DWORD WINAPI WlanHostedNetworkSetSecondaryKey(
    __in        HANDLE                          hClientHandle,
    __in        DWORD                           dwKeyLength,
    __in_bcount PUCHAR             pucKeyData,
    __in        BOOL                            bIsPassPhrase,
    __in        BOOL                            bPersistent,
    __out_opt   PWLAN_HOSTED_NETWORK_REASON     pFailReason,
    __reserved  PVOID                           pvReserved
);

wlanapi.dll, DWORD WINAPI WlanHostedNetworkQuerySecondaryKey(
    __in        HANDLE                          hClientHandle,
    __out       PDWORD                          pdwKeyLength,
    __deref_out_ecount   PUCHAR  *ppucKeyData,
    __out       PBOOL                           pbIsPassPhrase,
    __out       PBOOL                           pbPersistent,
    __out_opt   PWLAN_HOSTED_NETWORK_REASON     pFailReason,
    __reserved  PVOID                           pvReserved
);

wlanapi.dll, DWORD WINAPI WlanRegisterVirtualStationNotification(
    __in        HANDLE hClientHandle,
    __in        BOOL bRegister,
    __reserved  PVOID pReserved
);



userenv.dll, HRESULT WINAPI CreateProfileA(
    __in                            LPCWSTR pszUserSid,
    __in                            LPCWSTR pszUserName,
    __out_ecount    LPWSTR  pszProfilePath,
    __in                            DWORD   cchProfilePath
);

userenv.dll, HRESULT WINAPI CreateProfileW(
    __in                            LPCWSTR pszUserSid,
    __in                            LPCWSTR pszUserName,
    __out_ecount    LPWSTR  pszProfilePath,
    __in                            DWORD   cchProfilePath
);

userenv.dll, BOOL WINAPI GetDefaultUserProfileDirectoryA(
    __out_ecount_opt    LPSTR lpProfileDir,
    __inout                         LPDWORD lpcchSize
);

userenv.dll, BOOL WINAPI GetDefaultUserProfileDirectoryW(
    __out_ecount_opt    LPSTR lpProfileDir,
    __inout                         LPDWORD lpcchSize
);

userenv.dll, BOOL WINAPI GetAllUsersProfileDirectoryA(
    __out_ecount_opt    LPSTR lpProfileDir,
    __inout                         LPDWORD lpcchSize
);

userenv.dll, BOOL WINAPI GetAllUsersProfileDirectoryW(
    __out_ecount_opt    LPSTR lpProfileDir,
    __inout                         LPDWORD lpcchSize
);

userenv.dll, BOOL WINAPI GetUserProfileDirectoryA(
    __in                            HANDLE  hToken,
    __out_ecount_opt    LPSTR lpProfileDir,
    __inout                         LPDWORD lpcchSize
);

userenv.dll, BOOL WINAPI GetUserProfileDirectoryW(
    __in                            HANDLE  hToken,
    __out_ecount_opt    LPSTR lpProfileDir,
    __inout                         LPDWORD lpcchSize
);

userenv.dll, BOOL WINAPI CreateEnvironmentBlock(
    __out       LPVOID  *lpEnvironment,
    __in_opt    HANDLE  hToken,
    __in        BOOL    bInherit
);

userenv.dll, BOOL WINAPI DestroyEnvironmentBlock(
    __in    LPVOID  lpEnvironment
);

userenv.dll, BOOL WINAPI ExpandEnvironmentStringsForUserA(
    __in_opt                HANDLE      hToken,
    __in                    LPCSTR    lpSrc,
    __out_ecount    LPSTR     lpDest,
    __in                    DWORD       dwSize
);

userenv.dll, BOOL WINAPI ExpandEnvironmentStringsForUserW(
    __in_opt                HANDLE      hToken,
    __in                    LPCSTR    lpSrc,
    __out_ecount    LPSTR     lpDest,
    __in                    DWORD       dwSize
);

userenv.dll, BOOL WINAPI RefreshPolicy(
    __in        BOOL bMachine
);

userenv.dll, BOOL WINAPI RefreshPolicyEx(
    __in        BOOL    bMachine, 
    __in        DWORD   dwOptions
);

userenv.dll, HANDLE WINAPI EnterCriticalPolicySection(
    __in        BOOL    bMachine
);

userenv.dll, BOOL WINAPI LeaveCriticalPolicySection(
    __in        HANDLE  hSection
);

userenv.dll, BOOL WINAPI RegisterGPNotification(
    __in        HANDLE  hEvent,
    __in        BOOL    bMachine
);

userenv.dll, BOOL WINAPI UnregisterGPNotification(
    __in        HANDLE  hEvent
);

userenv.dll, BOOL WINAPI GetGPOListA(
    __in_opt    HANDLE      hToken,
    __in_opt    LPCSTR    lpName,
    __in_opt    LPCSTR    lpHostName,
    __in_opt    LPCSTR    lpComputerName,
    __in        DWORD       dwFlags,
    __deref_out PGROUP_POLICY_OBJECT * pGPOList
);

userenv.dll, BOOL WINAPI GetGPOListW(
    __in_opt    HANDLE      hToken,
    __in_opt    LPCSTR    lpName,
    __in_opt    LPCSTR    lpHostName,
    __in_opt    LPCSTR    lpComputerName,
    __in        DWORD       dwFlags,
    __deref_out PGROUP_POLICY_OBJECT * pGPOList
);

userenv.dll, BOOL WINAPI FreeGPOListA(
    __in        PGROUP_POLICY_OBJECT   pGPOList
);

userenv.dll, BOOL WINAPI FreeGPOListW(
    __in        PGROUP_POLICY_OBJECT   pGPOList
);

userenv.dll, DWORD WINAPI GetAppliedGPOListA(
    __in        DWORD       dwFlags,
    __in_opt    LPCSTR    pMachineName,
    __in_opt    PSID        pSidUser,
    __in        GUID        *pGuidExtension,
    __deref_out PGROUP_POLICY_OBJECT   *ppGPOList
);

userenv.dll, DWORD WINAPI GetAppliedGPOListW(
    __in        DWORD       dwFlags,
    __in_opt    LPCSTR    pMachineName,
    __in_opt    PSID        pSidUser,
    __in        GUID        *pGuidExtension,
    __deref_out PGROUP_POLICY_OBJECT   *ppGPOList
);

userenv.dll, DWORD WINAPI ProcessGroupPolicyCompleted(
    __in REFGPEXTENSIONID extensionId,
    __in ASYNCCOMPLETIONHANDLE pAsyncHandle,
    __in DWORD dwStatus
);

userenv.dll, DWORD WINAPI ProcessGroupPolicyCompletedEx(
    __in REFGPEXTENSIONID extensionId,
    __in ASYNCCOMPLETIONHANDLE pAsyncHandle,
    __in DWORD dwStatus,
    __in HRESULT RsopStatus
);

userenv.dll, HRESULT WINAPI RsopAccessCheckByType(  
    __in       PSECURITY_DESCRIPTOR pSecurityDescriptor,
    __in_opt   PSID pPrincipalSelfSid,
    __in       PRSOPTOKEN pRsopToken,
    __in       DWORD dwDesiredAccessMask,
    __in_ecount_opt   POBJECT_TYPE_LIST pObjectTypeList,
    __in       DWORD ObjectTypeListLength,
    __in       PGENERIC_MAPPING pGenericMapping,
    __in_bcount_opt PPRIVILEGE_SET pPrivilegeSet,
    __in_opt   LPDWORD pdwPrivilegeSetLength,
    __out LPDWORD pdwGrantedAccessMask,
    __out LPBOOL pbAccessStatus
);

userenv.dll, HRESULT WINAPI RsopFileAccessCheckA(
    __in  LPWSTR pszFileName,
    __in  PRSOPTOKEN pRsopToken,
    __in  DWORD dwDesiredAccessMask,
    __out LPDWORD pdwGrantedAccessMask,
    __out LPBOOL pbAccessStatus
);

userenv.dll, HRESULT WINAPI RsopFileAccessCheckW(
    __in  LPWSTR pszFileName,
    __in  PRSOPTOKEN pRsopToken,
    __in  DWORD dwDesiredAccessMask,
    __out LPDWORD pdwGrantedAccessMask,
    __out LPBOOL pbAccessStatus
);

userenv.dll, HRESULT WINAPI RsopSetPolicySettingStatus( 
    __in DWORD                       dwFlags,
    __in IWbemServices*              pServices,
    __in IWbemClassObject*           pSettingInstance,
    __in DWORD                       nInfo,
    __in_ecount POLICYSETTINGSTATUSINFO*    pStatus 
);

userenv.dll, HRESULT WINAPI RsopResetPolicySettingStatus(
    __in DWORD               dwFlags,
    __in IWbemServices*      pServices,
    __in IWbemClassObject*   pSettingInstance 
);



uxtheme.dll, BOOL WINAPI BeginPanningFeedback(
    __in HWND hwnd); 

uxtheme.dll, BOOL WINAPI UpdatePanningFeedback(
	__in HWND hwnd,
	__in LONG lTotalOverpanOffsetX, 
	__in LONG lTotalOverpanOffsetY, 
	__in BOOL fInInertia
);

uxtheme.dll, BOOL WINAPI EndPanningFeedback(
	__in HWND hwnd, 
	__in BOOL fAnimateBack
);



netshell.dll, DWORD WINAPI MatchEnumTag(
    IN  HANDLE             hModule,
    IN  LPCWSTR            pwcArg,
    IN  DWORD              dwNumArg,
    IN  CONST TOKEN_VALUE *pEnumTable,
    OUT PDWORD             pdwValue
);

netshell.dll, BOOL WINAPI MatchToken(
    IN  LPCWSTR  pwszUserToken,
    IN  LPCWSTR  pwszCmdToken
);

netshell.dll, DWORD WINAPI PreprocessCommandA(
    __in_opt                   HANDLE    hModule,
    __inout_ecount LPWSTR   *ppwcArguments,
    __in                       DWORD     dwCurrentIndex,
    __in                       DWORD     dwArgCount,
    __inout_opt                TAG_TYPE *pttTags,
    __in                       DWORD     dwTagCount,
    __in                       DWORD     dwMinArgs,
    __in                       DWORD     dwMaxArgs,
    __out_opt                  DWORD    *pdwTagType
);

netshell.dll, DWORD WINAPI PreprocessCommandW(
    __in_opt                   HANDLE    hModule,
    __inout_ecount LPWSTR   *ppwcArguments,
    __in                       DWORD     dwCurrentIndex,
    __in                       DWORD     dwArgCount,
    __inout_opt                TAG_TYPE *pttTags,
    __in                       DWORD     dwTagCount,
    __in                       DWORD     dwMinArgs,
    __in                       DWORD     dwMaxArgs,
    __out_opt                  DWORD    *pdwTagType
);

ndfapi.dll, HRESULT WINAPI NdfCreateGroupingIncident(
	__in_opt LPCWSTR CloudName,
	__in_opt LPCWSTR GroupName,
	__in_opt LPCWSTR Identity,                	
	__in_opt LPCWSTR Invitation,
	__in_opt SOCKET_ADDRESS_LIST * Addresses,
	__in_opt LPCWSTR appId,	
	__deref_out NDFHANDLE *handle
);



wss2_32.dll, int WINAPI ioctlsocket(
    __in SOCKET s,
    __in long cmd,
    __inout u_long FAR * argp
);

ws2_32.dll, int WINAPI getpeername(
    __in SOCKET s,
    __out_bcount_part struct sockaddr FAR * name,
    __inout int FAR * namelen
);

ws2_32.dll, int WINAPI getsockname(
    __in SOCKET s,
    __out_bcount_part struct sockaddr FAR * name,
    __inout int FAR * namelen
);

ws2_32.dll, int WINAPI getsockopt(
    __in SOCKET s,
    __in int level,
    __in int optname,
    __out_bcount char FAR * optval,
    __inout int FAR * optlen
);

ws2_32.dll, u_long WINAPI htonl(
    __in u_long hostlong
);

ws2_32.dll, u_short WINAPI htons(
    __in u_short hostshort
);

ws2_32.dll, unsigned long WINAPI inet_addr(
    __in IN const char FAR * cp
);

ws2_32.dll, char FAR * WINAPI inet_ntoa(
    __in struct in_addr in
);

ws2_32.dll, int WINAPI listen(
    __in SOCKET s,
    __in int backlog
);

ws2_32.dll, u_long WINAPI ntohl(
    __in u_long netlong
);



webservices.dll, HRESULT WINAPI WsStartReaderCanonicalization(
    __in WS_XML_READER* reader, 
    __in WS_WRITE_CALLBACK writeCallback, 
    __in void* writeCallbackState, 
    __in_ecount_opt const WS_XML_CANONICALIZATION_PROPERTY* properties, 
    __in ULONG propertyCount, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsEndReaderCanonicalization(
    __in WS_XML_READER* reader, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsStartWriterCanonicalization(
    __in WS_XML_WRITER* writer, 
    __in WS_WRITE_CALLBACK writeCallback, 
    __in void* writeCallbackState, 
    __in_ecount_opt const WS_XML_CANONICALIZATION_PROPERTY* properties, 
    __in ULONG propertyCount, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsEndWriterCanonicalization(
    __in WS_XML_WRITER* writer, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsCreateXmlBuffer(
    __in WS_HEAP* heap, 
    __in_ecount_opt const WS_XML_BUFFER_PROPERTY* properties, 
    __in ULONG propertyCount, 
    __deref_out WS_XML_BUFFER** buffer, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsRemoveNode(
    __in const WS_XML_NODE_POSITION* nodePosition, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsCreateReader(
    __in_ecount_opt const WS_XML_READER_PROPERTY* properties, 
    __in ULONG propertyCount, 
    __deref_out WS_XML_READER** reader, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsSetInput(
    __in WS_XML_READER* reader, 
    __in_opt const WS_XML_READER_ENCODING* encoding, 
    __in_opt const WS_XML_READER_INPUT* input, 
    __in_ecount_opt const WS_XML_READER_PROPERTY* properties, 
    __in ULONG propertyCount, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsSetInputToBuffer(
    __in WS_XML_READER* reader, 
    __in WS_XML_BUFFER* buffer, 
    __in_ecount_opt const WS_XML_READER_PROPERTY* properties, 
    __in ULONG propertyCount, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsGetReaderProperty(
    __in WS_XML_READER* reader, 
    __in WS_XML_READER_PROPERTY_ID id, 
    __out_bcount void* value, 
    __in ULONG valueSize, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsGetReaderNode(
    __in WS_XML_READER* xmlReader, 
    __deref_out const WS_XML_NODE** node, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsFillReader(
    __in WS_XML_READER* reader, 
    __in ULONG minSize, 
    __in_opt const WS_ASYNC_CONTEXT* asyncContext, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsReadStartElement(
    __in WS_XML_READER* reader, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsReadToStartElement(
    __in WS_XML_READER* reader, 
    __in_opt const WS_XML_STRING* localName, 
    __in_opt const WS_XML_STRING* ns, 
    __out_opt BOOL* found, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsReadStartAttribute(
    __in WS_XML_READER* reader, 
    __in ULONG attributeIndex, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsReadEndAttribute(
    __in WS_XML_READER* reader, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsReadNode(
    __in WS_XML_READER* reader, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsSkipNode(
    __in WS_XML_READER* reader, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsReadEndElement(
    __in WS_XML_READER* reader, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsFindAttribute(
    __in WS_XML_READER* reader, 
    __in const WS_XML_STRING* localName, 
    __in const WS_XML_STRING* ns, 
    __in BOOL required, 
    __out ULONG* attributeIndex, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsReadValue(
    __in WS_XML_READER* reader, 
    __in WS_VALUE_TYPE valueType, 
    __out_bcount void* value, 
    __in ULONG valueSize, 
    __in_opt WS_ERROR* error
);
 
webservices.dll, HRESULT WINAPI WsReadChars(
    __in WS_XML_READER* reader, 
    __out_ecount_part WCHAR* chars, 
    __in ULONG maxCharCount, 
    __out ULONG* actualCharCount, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsReadCharsUtf8(
    __in WS_XML_READER* reader, 
    __out_ecount_part BYTE* bytes, 
    __in ULONG maxByteCount, 
    __out ULONG* actualByteCount, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsReadBytes(
    __in WS_XML_READER* reader, 
    __out_bcount_part void* bytes, 
    __in ULONG maxByteCount, 
    __out ULONG* actualByteCount, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsReadArray(
    __in WS_XML_READER* reader, 
    __in const WS_XML_STRING* localName, 
    __in const WS_XML_STRING* ns, 
    __in WS_VALUE_TYPE valueType, 
    __out_bcount_opt void* array, 
    __in ULONG arraySize, 
    __in ULONG itemOffset, 
    __in ULONG itemCount, 
    __out ULONG* actualItemCount, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsGetReaderPosition(
    __in WS_XML_READER* reader, 
    __out WS_XML_NODE_POSITION* nodePosition, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsSetReaderPosition(
    __in WS_XML_READER* reader, 
    __in const WS_XML_NODE_POSITION* nodePosition, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsMoveReader(
    __in WS_XML_READER* reader, 
    __in WS_MOVE_TO moveTo, 
    __out_opt BOOL* found, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsCreateWriter(
    __in_ecount_opt const WS_XML_WRITER_PROPERTY* properties, 
    __in ULONG propertyCount, 
    __deref_out WS_XML_WRITER** writer, 
    __in_opt WS_ERROR* error
);
 
webservices.dll, void WINAPI WsFreeWriter(
    __in WS_XML_WRITER* writer
);

webservices.dll, HRESULT WINAPI WsSetOutput(
    __in WS_XML_WRITER* writer, 
    __in_opt const WS_XML_WRITER_ENCODING* encoding, 
    __in_opt const WS_XML_WRITER_OUTPUT* output, 
    __in_ecount_opt const WS_XML_WRITER_PROPERTY* properties, 
    __in ULONG propertyCount, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsSetOutputToBuffer(
    __in WS_XML_WRITER* writer, 
    __in WS_XML_BUFFER* buffer, 
    __in_ecount_opt const WS_XML_WRITER_PROPERTY* properties, 
    __in ULONG propertyCount, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsGetWriterProperty(
    __in WS_XML_WRITER* writer, 
    __in WS_XML_WRITER_PROPERTY_ID id, 
    __out_bcount void* value, 
    __in ULONG valueSize, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsFlushWriter(
    __in WS_XML_WRITER* writer, 
    __in ULONG minSize, 
    __in_opt const WS_ASYNC_CONTEXT* asyncContext, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsWriteStartElement(
    __in WS_XML_WRITER* writer, 
    __in_opt const WS_XML_STRING* prefix, 
    __in const WS_XML_STRING* localName, 
    __in const WS_XML_STRING* ns, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsWriteEndStartElement(
    __in WS_XML_WRITER* writer, 
    __in_opt WS_ERROR* error
);
 
webservices.dll, HRESULT WINAPI WsWriteXmlnsAttribute(
    __in WS_XML_WRITER* writer, 
    __in_opt const WS_XML_STRING* prefix, 
    __in const WS_XML_STRING* ns, 
    __in BOOL singleQuote, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsWriteStartAttribute(
    __in WS_XML_WRITER* writer, 
    __in_opt const WS_XML_STRING* prefix, 
    __in const WS_XML_STRING* localName, 
    __in const WS_XML_STRING* ns, 
    __in BOOL singleQuote, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsWriteEndAttribute(
    __in WS_XML_WRITER* writer, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsWriteValue(
    __in WS_XML_WRITER* writer, 
    __in WS_VALUE_TYPE valueType, 
    __in_bcount const void* value, 
    __in ULONG valueSize, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsWriteXmlBuffer(
    __in WS_XML_WRITER* writer, 
    __in WS_XML_BUFFER* xmlBuffer, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsReadXmlBuffer(
    __in WS_XML_READER* reader, 
    __in WS_HEAP* heap, 
    __deref_out WS_XML_BUFFER** xmlBuffer, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsWriteXmlBufferToBytes(
    __in WS_XML_WRITER* writer, 
    __in WS_XML_BUFFER* xmlBuffer, 
    __in_opt const WS_XML_WRITER_ENCODING* encoding, 
    __in_ecount_opt const WS_XML_WRITER_PROPERTY* properties, 
    __in ULONG propertyCount, 
    __in WS_HEAP* heap, 
    __deref_out_bcount void** bytes, 
    __out ULONG* byteCount, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsReadXmlBufferFromBytes(
    __in WS_XML_READER* reader, 
    __in_opt const WS_XML_READER_ENCODING* encoding, 
    __in_ecount_opt const WS_XML_READER_PROPERTY* properties, 
    __in ULONG propertyCount, 
    __in_bcount const void* bytes, 
    __in ULONG byteCount, 
    __in WS_HEAP* heap, 
    __deref_out WS_XML_BUFFER** xmlBuffer, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsWriteArray(
    __in WS_XML_WRITER* writer, 
    __in const WS_XML_STRING* localName, 
    __in const WS_XML_STRING* ns, 
    __in WS_VALUE_TYPE valueType, 
    __in_bcount_opt const void* array, 
    __in ULONG arraySize, 
    __in ULONG itemOffset, 
    __in ULONG itemCount, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsWriteQualifiedName(
    __in WS_XML_WRITER* writer, 
    __in_opt const WS_XML_STRING* prefix, 
    __in const WS_XML_STRING* localName, 
    __in_opt const WS_XML_STRING* ns, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsWriteChars(
    __in WS_XML_WRITER* writer, 
    __in_ecount const WCHAR* chars, 
    __in ULONG charCount, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsWriteCharsUtf8(
    __in WS_XML_WRITER* writer, 
    __in_ecount const BYTE* bytes, 
    __in ULONG byteCount, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsWriteBytes(
    __in WS_XML_WRITER* writer, 
    __in_bcount const void* bytes, 
    __in ULONG byteCount, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsPushBytes(
    __in WS_XML_WRITER* writer, 
    __in WS_PUSH_BYTES_CALLBACK callback, 
    __in_opt void* callbackState, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsPullBytes(
    __in WS_XML_WRITER* writer, 
    __in WS_PULL_BYTES_CALLBACK callback, 
    __in_opt void* callbackState, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsWriteEndElement(
    __in WS_XML_WRITER* writer, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsWriteText(
    __in WS_XML_WRITER* writer, 
    __in const WS_XML_TEXT* text, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsWriteStartCData(
    __in WS_XML_WRITER* writer, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsWriteEndCData(
    __in WS_XML_WRITER* writer, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsWriteNode(
    __in WS_XML_WRITER* writer, 
    __in const WS_XML_NODE* node, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsGetPrefixFromNamespace(
    __in WS_XML_WRITER* writer, 
    __in const WS_XML_STRING* ns, 
    __in BOOL required, 
    __deref_out const WS_XML_STRING** prefix, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsGetWriterPosition(
    __in WS_XML_WRITER* writer, 
    __out WS_XML_NODE_POSITION* nodePosition, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsSetWriterPosition(
    __in WS_XML_WRITER* writer, 
    __in const WS_XML_NODE_POSITION* nodePosition, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsMoveWriter(
    __in WS_XML_WRITER* writer, 
    __in WS_MOVE_TO moveTo, 
    __out_opt BOOL* found, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsTrimXmlWhitespace(
    __in_ecount WCHAR* chars, 
    __in ULONG charCount, 
    __deref_out_ecount WCHAR** trimmedChars, 
    __out ULONG* trimmedCount, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsVerifyXmlNCName(
    __in_ecount const WCHAR* ncNameChars, 
    __in ULONG ncNameCharCount, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsXmlStringEquals(
    __in const WS_XML_STRING* string1, 
    __in const WS_XML_STRING* string2, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsGetNamespaceFromPrefix(
    __in WS_XML_READER* reader, 
    __in const WS_XML_STRING* prefix, 
    __in BOOL required, 
    __deref_out const WS_XML_STRING** ns, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsReadQualifiedName(
    __in WS_XML_READER* reader, 
    __in WS_HEAP* heap, 
    __out_opt WS_XML_STRING* prefix, 
    __out WS_XML_STRING* localName, 
    __out_opt WS_XML_STRING* ns, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsGetXmlAttribute(
    __in WS_XML_READER* reader, 
    __in const WS_XML_STRING* localName, 
    __in WS_HEAP* heap, 
    __deref_out_ecount_opt WCHAR** valueChars, 
    __out ULONG* valueCharCount, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsCopyNode(
    __in WS_XML_WRITER* writer, 
    __in WS_XML_READER* reader, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsAsyncExecute(
    __in WS_ASYNC_STATE* asyncState, 
    __in WS_ASYNC_FUNCTION operation, 
    __in WS_CALLBACK_MODEL callbackModel, 
    __in void* callbackState, 
    __in_opt const WS_ASYNC_CONTEXT* asyncContext, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsCreateChannel(
    __in WS_CHANNEL_TYPE channelType, 
    __in WS_CHANNEL_BINDING channelBinding, 
    __in_ecount_opt const WS_CHANNEL_PROPERTY* properties, 
    __in ULONG propertyCount, 
    __in_opt const WS_SECURITY_DESCRIPTION* securityDescription, 
    __deref_out WS_CHANNEL** channel, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsOpenChannel(
    __in WS_CHANNEL* channel, 
    __in const WS_ENDPOINT_ADDRESS* endpointAddress, 
    __in_opt const WS_ASYNC_CONTEXT* asyncContext, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsSendMessage(
    __in WS_CHANNEL* channel, 
    __in WS_MESSAGE* message, 
    __in const WS_MESSAGE_DESCRIPTION* messageDescription, 
    __in WS_WRITE_OPTION writeOption, 
    __in_bcount_opt const void* bodyValue, 
    __in ULONG bodyValueSize, 
    __in_opt const WS_ASYNC_CONTEXT* asyncContext, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsReceiveMessage(
    __in WS_CHANNEL* channel, 
    __in WS_MESSAGE* message, 
    __in_ecount const WS_MESSAGE_DESCRIPTION** messageDescriptions, 
    __in ULONG messageDescriptionCount, 
    __in WS_RECEIVE_OPTION receiveOption, 
    __in WS_READ_OPTION readBodyOption, 
    __in_opt WS_HEAP* heap, 
    __out_bcount void* value, 
    __in ULONG valueSize, 
    __out_opt ULONG* index, 
    __in_opt const WS_ASYNC_CONTEXT* asyncContext, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsRequestReply(
    __in WS_CHANNEL* channel, 
    __in WS_MESSAGE* requestMessage, 
    __in const WS_MESSAGE_DESCRIPTION* requestMessageDescription, 
    __in WS_WRITE_OPTION writeOption, 
    __in_bcount_opt const void* requestBodyValue, 
    __in ULONG requestBodyValueSize, 
    __in WS_MESSAGE* replyMessage, 
    __in const WS_MESSAGE_DESCRIPTION* replyMessageDescription, 
    __in WS_READ_OPTION readOption, 
    __in_opt WS_HEAP* heap, 
    __out_bcount_opt void* value, 
    __in ULONG valueSize, 
    __in_opt const WS_ASYNC_CONTEXT* asyncContext, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsSendReplyMessage(
    __in WS_CHANNEL* channel, 
    __in WS_MESSAGE* replyMessage, 
    __in const WS_MESSAGE_DESCRIPTION* replyMessageDescription, 
    __in WS_WRITE_OPTION writeOption, 
    __in_bcount_opt const void* replyBodyValue, 
    __in ULONG replyBodyValueSize, 
    __in WS_MESSAGE* requestMessage, 
    __in_opt const WS_ASYNC_CONTEXT* asyncContext, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsSendFaultMessageForError(
    __in WS_CHANNEL* channel, 
    __in WS_MESSAGE* replyMessage, 
    __in WS_ERROR* faultError, 
    __in HRESULT faultErrorCode, 
    __in WS_FAULT_DISCLOSURE faultDisclosure, 
    __in WS_MESSAGE* requestMessage, 
    __in_opt const WS_ASYNC_CONTEXT* asyncContext, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsGetChannelProperty(
    __in WS_CHANNEL* channel, 
    __in WS_CHANNEL_PROPERTY_ID id, 
    __out_bcount void* value, 
    __in ULONG valueSize, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsSetChannelProperty(
    __in WS_CHANNEL* channel, 
    __in WS_CHANNEL_PROPERTY_ID id, 
    __in_bcount const void* value, 
    __in ULONG valueSize, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsWriteMessageStart(
    __in WS_CHANNEL* channel, 
    __in WS_MESSAGE* message, 
    __in_opt const WS_ASYNC_CONTEXT* asyncContext, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsWriteMessageEnd(
    __in WS_CHANNEL* channel, 
    __in WS_MESSAGE* message, 
    __in_opt const WS_ASYNC_CONTEXT* asyncContext, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsReadMessageStart(
    __in WS_CHANNEL* channel, 
    __in WS_MESSAGE* message, 
    __in_opt const WS_ASYNC_CONTEXT* asyncContext, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsReadMessageEnd(
    __in WS_CHANNEL* channel, 
    __in WS_MESSAGE* message, 
    __in_opt const WS_ASYNC_CONTEXT* asyncContext, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsCloseChannel(
    __in WS_CHANNEL* channel, 
    __in_opt const WS_ASYNC_CONTEXT* asyncContext, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsAbortChannel(
    __in WS_CHANNEL* channel, 
    __in_opt WS_ERROR* error
);

webservices.dll, void WINAPI WsFreeChannel(
    __in WS_CHANNEL* channel
);

webservices.dll, HRESULT WINAPI WsResetChannel(
    __in WS_CHANNEL* channel, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsAbandonMessage(
    __in WS_CHANNEL* channel, 
    __in WS_MESSAGE* message, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsShutdownSessionChannel(
    __in WS_CHANNEL* channel, 
    __in_opt const WS_ASYNC_CONTEXT* asyncContext, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsGetOperationContextProperty(
    __in const WS_OPERATION_CONTEXT* context, 
    __in const WS_OPERATION_CONTEXT_PROPERTY_ID id, 
    __out_bcount void* value, 
    __in ULONG valueSize, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsGetDictionary(
    __in WS_ENCODING encoding, 
    __deref_out_opt WS_XML_DICTIONARY** dictionary, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsReadEndpointAddressExtension(
    __in WS_XML_READER* reader, 
    __in WS_ENDPOINT_ADDRESS* endpointAddress, 
    __in WS_ENDPOINT_ADDRESS_EXTENSION_TYPE extensionType, 
    __in WS_READ_OPTION readOption, 
    __in WS_HEAP* heap, 
    __out_bcount void* value, 
    __in ULONG valueSize, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsCreateError(
    __in_ecount_opt const WS_ERROR_PROPERTY* properties, 
    __in ULONG propertyCount, 
    __deref_out WS_ERROR** error
);
 
webservices.dll, HRESULT WINAPI WsAddErrorString(
    __in WS_ERROR* error, 
    __in const WS_STRING* string
);

webservices.dll, HRESULT WINAPI WsGetErrorString(
    __in WS_ERROR* error, 
    __in ULONG index, 
    __out WS_STRING* string
);

webservices.dll, HRESULT WINAPI WsCopyError(
    __in WS_ERROR* source, 
    __in WS_ERROR* destination
);

webservices.dll, HRESULT WINAPI WsGetErrorProperty(
    __in WS_ERROR* error, 
    __in WS_ERROR_PROPERTY_ID id, 
    __out_bcount void* buffer, 
    __in ULONG bufferSize
);
 
webservices.dll, HRESULT WINAPI WsSetErrorProperty(
    __in WS_ERROR* error, 
    __in WS_ERROR_PROPERTY_ID id, 
    __in_bcount const void* value, 
    __in ULONG valueSize
);
 
webservices.dll, HRESULT WINAPI WsResetError(
    __in WS_ERROR* error
);
 
webservices.dll, void WINAPI WsFreeError(
    __in WS_ERROR* error
);
 
webservices.dll, HRESULT WINAPI WsGetFaultErrorProperty(
    __in WS_ERROR* error, 
    __in WS_FAULT_ERROR_PROPERTY_ID id, 
    __out_bcount void* buffer, 
    __in ULONG bufferSize
);

webservices.dll, HRESULT WINAPI WsSetFaultErrorProperty(
    __in WS_ERROR* error, 
    __in WS_FAULT_ERROR_PROPERTY_ID id, 
    __in_bcount const void* value, 
    __in ULONG valueSize
);
 
webservices.dll, HRESULT WINAPI WsCreateFaultFromError(
    __in WS_ERROR* error, 
    __in HRESULT faultErrorCode, 
    __in WS_FAULT_DISCLOSURE faultDisclosure, 
    __in WS_HEAP* heap, 
    __out WS_FAULT* fault
);

webservices.dll, HRESULT WINAPI WsSetFaultErrorDetail(
    __in WS_ERROR* error, 
    __in const WS_FAULT_DETAIL_DESCRIPTION* faultDetailDescription, 
    __in WS_WRITE_OPTION writeOption, 
    __in_bcount_opt const void* value, 
    __in ULONG valueSize
);

webservices.dll, HRESULT WINAPI WsGetFaultErrorDetail(
    __in WS_ERROR* error, 
    __in const WS_FAULT_DETAIL_DESCRIPTION* faultDetailDescription, 
    __in WS_READ_OPTION readOption, 
    __in_opt WS_HEAP* heap, 
    __out_bcount void* value, 
    __in ULONG valueSize
);
 
webservices.dll, HRESULT WINAPI WsCreateHeap(
    __in SIZE_T maxSize, 
    __in SIZE_T trimSize, 
    __in_opt const WS_HEAP_PROPERTY* properties, 
    __in ULONG propertyCount, 
    __deref_out WS_HEAP** heap, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsAlloc(
    __in WS_HEAP* heap, 
    __in SIZE_T size, 
    __deref_out_bcount void** ptr, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsGetHeapProperty(
    __in WS_HEAP* heap, 
    __in WS_HEAP_PROPERTY_ID id, 
    __out_bcount void* value, 
    __in ULONG valueSize, 
    __in_opt WS_ERROR* error
);
 
webservices.dll, HRESULT WINAPI WsResetHeap(
    __in WS_HEAP* heap, 
    __in_opt WS_ERROR* error
);

webservices.dll, void WINAPI WsFreeHeap(
    __in WS_HEAP* heap
);

webservices.dll, HRESULT WINAPI WsCreateListener(
    __in WS_CHANNEL_TYPE channelType, 
    __in WS_CHANNEL_BINDING channelBinding, 
    __in_ecount_opt const WS_LISTENER_PROPERTY* properties, 
    __in ULONG propertyCount, 
    __in_opt const WS_SECURITY_DESCRIPTION* securityDescription, 
    __deref_out WS_LISTENER** listener, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsOpenListener(
    __in WS_LISTENER* listener, 
    __in const WS_STRING* url, 
    __in_opt const WS_ASYNC_CONTEXT* asyncContext, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsAcceptChannel(
    __in WS_LISTENER* listener, 
    __in WS_CHANNEL* channel, 
    __in_opt const WS_ASYNC_CONTEXT* asyncContext, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsCloseListener(
    __in WS_LISTENER* listener, 
    __in_opt const WS_ASYNC_CONTEXT* asyncContext, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsAbortListener(
    __in WS_LISTENER* listener, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsResetListener(
    __in WS_LISTENER* listener, 
    __in_opt WS_ERROR* error
);
 
webservices.dll, void WINAPI WsFreeListener(
    __in WS_LISTENER* listener
);
 
webservices.dll, HRESULT WINAPI WsGetListenerProperty(
    __in WS_LISTENER* listener, 
    __in WS_LISTENER_PROPERTY_ID id, 
    __out_bcount void* value, 
    __in ULONG valueSize, 
    __in_opt WS_ERROR* error
);
 
webservices.dll, HRESULT WINAPI WsSetListenerProperty(
    __in WS_LISTENER* listener, 
    __in WS_LISTENER_PROPERTY_ID id, 
    __in_bcount const void* value, 
    __in ULONG valueSize, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsCreateChannelForListener(
    __in WS_LISTENER* listener, 
    __in_ecount_opt const WS_CHANNEL_PROPERTY* properties, 
    __in ULONG propertyCount, 
    __deref_out WS_CHANNEL** channel, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsCreateMessage(
    __in WS_ENVELOPE_VERSION envelopeVersion, 
    __in WS_ADDRESSING_VERSION addressingVersion, 
    __in_ecount_opt const WS_MESSAGE_PROPERTY* properties, 
    __in ULONG propertyCount, 
    __deref_out WS_MESSAGE** message, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsCreateMessageForChannel(
    __in WS_CHANNEL* channel, 
    __in_ecount_opt const WS_MESSAGE_PROPERTY* properties, 
    __in ULONG propertyCount, 
    __deref_out WS_MESSAGE** message, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsInitializeMessage(
    __in WS_MESSAGE* message, 
    __in WS_MESSAGE_INITIALIZATION initialization, 
    __in_opt WS_MESSAGE* sourceMessage, 
    __in_opt WS_ERROR* error
);
 
webservices.dll, HRESULT WINAPI WsResetMessage(
    __in WS_MESSAGE* message, 
    __in_opt WS_ERROR* error
);

webservices.dll, void WINAPI WsFreeMessage(
    __in WS_MESSAGE* message
);

webservices.dll, HRESULT WINAPI WsGetHeaderAttributes(
    __in WS_MESSAGE* message, 
    __in WS_XML_READER* reader, 
    __out ULONG* headerAttributes, 
    __in_opt WS_ERROR* error
);
 
webservices.dll, HRESULT WINAPI WsGetHeader(
    __in WS_MESSAGE* message, 
    __in WS_HEADER_TYPE headerType, 
    __in WS_TYPE valueType, 
    __in WS_READ_OPTION readOption, 
    __in_opt WS_HEAP* heap, 
    __out_bcount void* value, 
    __in ULONG valueSize, 
    __in_opt WS_ERROR* error
);
 
webservices.dll, HRESULT WINAPI WsGetCustomHeader(
    __in WS_MESSAGE* message, 
    __in const WS_ELEMENT_DESCRIPTION* customHeaderDescription, 
    __in WS_REPEATING_HEADER_OPTION repeatingOption, 
    __in ULONG headerIndex, 
    __in WS_READ_OPTION readOption, 
    __in_opt WS_HEAP* heap, 
    __out_bcount void* value, 
    __in ULONG valueSize, 
    __out_opt ULONG* headerAttributes, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsRemoveHeader(
    __in WS_MESSAGE* message, 
    __in WS_HEADER_TYPE headerType, 
    __in_opt WS_ERROR* error
);
 
webservices.dll, HRESULT WINAPI WsSetHeader(
    __in WS_MESSAGE* message, 
    __in WS_HEADER_TYPE headerType, 
    __in WS_TYPE valueType, 
    __in WS_WRITE_OPTION writeOption, 
    __in_bcount const void* value, 
    __in ULONG valueSize, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsRemoveCustomHeader(
    __in WS_MESSAGE* message, 
    __in const WS_XML_STRING* headerName, 
    __in const WS_XML_STRING* headerNs, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsAddCustomHeader(
    __in WS_MESSAGE* message, 
    __in const WS_ELEMENT_DESCRIPTION* headerDescription, 
    __in WS_WRITE_OPTION writeOption, 
    __in_bcount const void* value, 
    __in ULONG valueSize, 
    __in ULONG headerAttributes, 
    __in_opt WS_ERROR* error
);
 
webservices.dll, HRESULT WINAPI WsAddMappedHeader(
    __in WS_MESSAGE* message, 
    __in const WS_XML_STRING* headerName, 
    __in WS_TYPE valueType, 
    __in WS_WRITE_OPTION writeOption, 
    __in_bcount const void* value, 
    __in ULONG valueSize, 
    __in_opt WS_ERROR* error
);
  
webservices.dll, HRESULT WINAPI WsRemoveMappedHeader(
    __in WS_MESSAGE* message, 
    __in const WS_XML_STRING* headerName, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsGetMappedHeader(
    __in WS_MESSAGE* message, 
    __in const WS_XML_STRING* headerName, 
    __in WS_REPEATING_HEADER_OPTION repeatingOption, 
    __in ULONG headerIndex, 
    __in WS_TYPE valueType, 
    __in WS_READ_OPTION readOption, 
    __in_opt WS_HEAP* heap, 
    __out_bcount void* value, 
    __in ULONG valueSize, 
    __in_opt WS_ERROR* error
);
 
webservices.dll, HRESULT WINAPI WsWriteBody(
    __in WS_MESSAGE* message, 
    __in const WS_ELEMENT_DESCRIPTION* bodyDescription, 
    __in WS_WRITE_OPTION writeOption, 
    __in_bcount const void* value, 
    __in ULONG valueSize, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsReadBody(
    __in WS_MESSAGE* message, 
    __in const WS_ELEMENT_DESCRIPTION* bodyDescription, 
    __in WS_READ_OPTION readOption, 
    __in_opt WS_HEAP* heap, 
    __out_bcount void* value, 
    __in ULONG valueSize, 
    __in_opt WS_ERROR* error
);
 
webservices.dll, HRESULT WINAPI WsWriteEnvelopeStart(
    __in WS_MESSAGE* message, 
    __in WS_XML_WRITER* writer, 
    __in_opt WS_MESSAGE_DONE_CALLBACK doneCallback, 
    __in_opt void* doneCallbackState, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsWriteEnvelopeEnd(
    __in WS_MESSAGE* message, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsReadEnvelopeStart(
    __in WS_MESSAGE* message, 
    __in WS_XML_READER* reader, 
    __in_opt WS_MESSAGE_DONE_CALLBACK doneCallback, 
    __in_opt void* doneCallbackState, 
    __in_opt WS_ERROR* error
);
  
webservices.dll, HRESULT WINAPI WsReadEnvelopeEnd(
    __in WS_MESSAGE* message, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsGetMessageProperty(
    __in WS_MESSAGE* message, 
    __in WS_MESSAGE_PROPERTY_ID id, 
    __out_bcount void* value, 
    __in ULONG valueSize, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsSetMessageProperty(
    __in WS_MESSAGE* message, 
    __in WS_MESSAGE_PROPERTY_ID id, 
    __in_bcount const void* value, 
    __in ULONG valueSize, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsAddressMessage(
    __in WS_MESSAGE* message, 
    __in_opt const WS_ENDPOINT_ADDRESS* address, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsCheckMustUnderstandHeaders(
    __in WS_MESSAGE* message, 
    __in_opt WS_ERROR* error
);
 
webservices.dll, HRESULT WINAPI WsMarkHeaderAsUnderstood(
    __in WS_MESSAGE* message, 
    __in const WS_XML_NODE_POSITION* headerPosition, 
    __in_opt WS_ERROR* error
);
  
webservices.dll, HRESULT WINAPI WsFillBody(
    __in WS_MESSAGE* message, 
    __in ULONG minSize, 
    __in_opt const WS_ASYNC_CONTEXT* asyncContext, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsFlushBody(
    __in WS_MESSAGE* message, 
    __in ULONG minSize, 
    __in_opt const WS_ASYNC_CONTEXT* asyncContext, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsRequestSecurityToken(
    __in WS_CHANNEL* channel, 
    __in_ecount_opt const WS_REQUEST_SECURITY_TOKEN_PROPERTY* properties, 
    __in ULONG propertyCount, 
    __deref_out WS_SECURITY_TOKEN** token, 
    __in_opt const WS_ASYNC_CONTEXT* asyncContext, 
    __in_opt WS_ERROR* error
);
 
webservices.dll, HRESULT WINAPI WsGetSecurityTokenProperty(
    __in WS_SECURITY_TOKEN* securityToken, 
    __in WS_SECURITY_TOKEN_PROPERTY_ID id, 
    __out_bcount void* value, 
    __in ULONG valueSize, 
    __in_opt WS_HEAP* heap, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsCreateXmlSecurityToken(
    __in_opt WS_XML_BUFFER* tokenXml, 
    __in_opt WS_SECURITY_KEY_HANDLE* tokenKey, 
    __in_ecount_opt const WS_XML_SECURITY_TOKEN_PROPERTY* properties, 
    __in ULONG propertyCount, 
    __deref_out WS_SECURITY_TOKEN** token, 
    __in_opt WS_ERROR* error
);
 
webservices.dll, void WINAPI WsFreeSecurityToken(
    __in WS_SECURITY_TOKEN* token
);
 
webservices.dll, HRESULT WINAPI WsRevokeSecurityContext(
    __in WS_SECURITY_CONTEXT* securityContext, 
    __in_opt WS_ERROR* error
);
 
webservices.dll, HRESULT WINAPI WsGetSecurityContextProperty(
    __in WS_SECURITY_CONTEXT* securityContext, 
    __in WS_SECURITY_CONTEXT_PROPERTY_ID id, 
    __out_bcount void* value, 
    __in ULONG valueSize, 
    __in_opt WS_ERROR* error
);
  
webservices.dll, HRESULT WINAPI WsReadElement(
    __in WS_XML_READER* reader, 
    __in const WS_ELEMENT_DESCRIPTION* elementDescription, 
    __in WS_READ_OPTION readOption, 
    __in_opt WS_HEAP* heap, 
    __out_bcount void* value, 
    __in ULONG valueSize, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsReadAttribute(
    __in WS_XML_READER* reader, 
    __in const WS_ATTRIBUTE_DESCRIPTION* attributeDescription, 
    __in WS_READ_OPTION readOption, 
    __in_opt WS_HEAP* heap, 
    __out_bcount void* value, 
    __in ULONG valueSize, 
    __in_opt WS_ERROR* error
);
 
webservices.dll, HRESULT WINAPI WsReadType(
    __in WS_XML_READER* reader, 
    __in WS_TYPE_MAPPING typeMapping, 
    __in WS_TYPE type, 
    __in_opt const void* typeDescription, 
    __in WS_READ_OPTION readOption, 
    __in_opt WS_HEAP* heap, 
    __out_bcount void* value, 
    __in ULONG valueSize, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsWriteElement(
    __in WS_XML_WRITER* writer, 
    __in const WS_ELEMENT_DESCRIPTION* elementDescription, 
    __in WS_WRITE_OPTION writeOption, 
    __in_bcount_opt const void* value, 
    __in ULONG valueSize, 
    __in_opt WS_ERROR* error
);
 
webservices.dll, HRESULT WINAPI WsWriteAttribute(
    __in WS_XML_WRITER* writer, 
    __in const WS_ATTRIBUTE_DESCRIPTION* attributeDescription, 
    __in WS_WRITE_OPTION writeOption, 
    __in_bcount_opt const void* value, 
    __in ULONG valueSize, 
    __in_opt WS_ERROR* error
);
 
webservices.dll, HRESULT WINAPI WsWriteType(
    __in WS_XML_WRITER* writer, 
    __in WS_TYPE_MAPPING typeMapping, 
    __in WS_TYPE type, 
    __in_opt const void* typeDescription, 
    __in WS_WRITE_OPTION writeOption, 
    __in_bcount_opt const void* value, 
    __in ULONG valueSize, 
    __in_opt WS_ERROR* error
);
  
webservices.dll, HRESULT WINAPI WsRegisterOperationForCancel(
    __in const WS_OPERATION_CONTEXT* context, 
    __in WS_OPERATION_CANCEL_CALLBACK cancelCallback, 
    __in_opt WS_OPERATION_FREE_STATE_CALLBACK freestateCallback, 
    __in_opt void* userState, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsGetServiceHostProperty(
    __in WS_SERVICE_HOST* serviceHost, 
    __in const WS_SERVICE_PROPERTY_ID id, 
    __out_bcount void* value, 
    __in ULONG valueSize, 
    __in_opt WS_ERROR* error
);
 
webservices.dll, HRESULT WINAPI WsCreateServiceHost(
    __in_ecount_opt const WS_SERVICE_ENDPOINT** endpoints, 
    __in const USHORT endpointCount, 
    __in_ecount_opt const WS_SERVICE_PROPERTY* serviceProperties, 
    __in ULONG servicePropertyCount, 
    __deref_out WS_SERVICE_HOST** serviceHost, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsOpenServiceHost(
    __in WS_SERVICE_HOST* serviceHost, 
    __in_opt const WS_ASYNC_CONTEXT* asyncContext, 
    __in_opt WS_ERROR* error
);
 
webservices.dll, HRESULT WINAPI WsCloseServiceHost(
    __in WS_SERVICE_HOST* serviceHost, 
    __in_opt const WS_ASYNC_CONTEXT* asyncContext, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsAbortServiceHost(
    __in WS_SERVICE_HOST* serviceHost, 
    __in_opt WS_ERROR* error
);
 
webservices.dll, HRESULT WINAPI WsResetServiceHost(
    __in WS_SERVICE_HOST* serviceHost, 
    __in_opt WS_ERROR* error
);
 
webservices.dll, HRESULT WINAPI WsGetServiceProxyProperty(
    __in WS_SERVICE_PROXY* serviceProxy, 
    __in const WS_PROXY_PROPERTY_ID id, 
    __out_bcount void* value, 
    __in ULONG valueSize, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsCreateServiceProxy(
    __in const WS_CHANNEL_TYPE channelType, 
    __in const WS_CHANNEL_BINDING channelBinding, 
    __in_opt const WS_SECURITY_DESCRIPTION* securityDescription, 
    __in_ecount_opt const WS_PROXY_PROPERTY* properties, 
    __in const ULONG propertyCount, 
    __in_ecount_opt const WS_CHANNEL_PROPERTY* channelProperties, 
    __in const ULONG channelPropertyCount, 
    __deref_out WS_SERVICE_PROXY** serviceProxy, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsOpenServiceProxy(
    __in WS_SERVICE_PROXY* serviceProxy, 
    __in const WS_ENDPOINT_ADDRESS* address, 
    __in_opt const WS_ASYNC_CONTEXT* asyncContext, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsCloseServiceProxy(
    __in WS_SERVICE_PROXY* serviceProxy, 
    __in_opt const WS_ASYNC_CONTEXT* asyncContext, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsAbortServiceProxy(
    __in WS_SERVICE_PROXY* serviceProxy, 
    __in_opt WS_ERROR* error
);

webservices.dll, void WINAPI WsFreeServiceProxy(
    __in WS_SERVICE_PROXY* serviceProxy
);

webservices.dll, HRESULT WINAPI WsResetServiceProxy(
    __in WS_SERVICE_PROXY* serviceProxy, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsAbandonCall(
    __in WS_SERVICE_PROXY* serviceProxy, 
    __in ULONG callId, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsCall(
    __in WS_SERVICE_PROXY* serviceProxy, 
    __in const WS_OPERATION_DESCRIPTION* operation, 
    __in_opt const void** arguments, 
    __in WS_HEAP* heap, 
    __in_ecount_opt const WS_CALL_PROPERTY* callProperties, 
    __in const ULONG callPropertyCount, 
    __in_opt const WS_ASYNC_CONTEXT* asyncContext, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsDecodeUrl(
    __in const WS_STRING* url, 
    __in ULONG flags, 
    __in WS_HEAP* heap, 
    __deref_out WS_URL** outUrl, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsEncodeUrl(
    __in const WS_URL* url, 
    __in ULONG flags, 
    __in WS_HEAP* heap, 
    __out WS_STRING* outUrl, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsCombineUrl(
    __in const WS_STRING* baseUrl, 
    __in const WS_STRING* referenceUrl, 
    __in ULONG flags, 
    __in WS_HEAP* heap, 
    __out WS_STRING* resultUrl, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsDateTimeToFileTime(
    __in const WS_DATETIME* dateTime, 
    __out FILETIME* fileTime, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsFileTimeToDateTime(
    __in const FILETIME* fileTime, 
    __out WS_DATETIME* dateTime, 
    __in_opt WS_ERROR* error
);
 
webservices.dll, HRESULT WINAPI WsCreateMetadata(
    __in_ecount_opt const WS_METADATA_PROPERTY* properties, 
    __in ULONG propertyCount, 
    __deref_out WS_METADATA** metadata, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsReadMetadata(
    __in WS_METADATA* metadata, 
    __in WS_XML_READER* reader, 
    __in const WS_STRING* url, 
    __in_opt WS_ERROR* error
);

webservices.dll, void WINAPI WsFreeMetadata(
    __in WS_METADATA* metadata
);

webservices.dll, HRESULT WINAPI WsResetMetadata(
    __in WS_METADATA* metadata, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsGetMetadataProperty(
    __in WS_METADATA* metadata, 
    __in WS_METADATA_PROPERTY_ID id, 
    __out_bcount void* value, 
    __in ULONG valueSize, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsGetMissingMetadataDocumentAddress(
    __in WS_METADATA* metadata, 
    __deref_out_opt WS_ENDPOINT_ADDRESS** address, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsGetMetadataEndpoints(
    __in WS_METADATA* metadata, 
    __out WS_METADATA_ENDPOINTS* endpoints, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsMatchPolicyAlternative(
    __in WS_POLICY* policy, 
    __in ULONG alternativeIndex, 
    __in WS_POLICY_CONSTRAINTS* policyConstraints, 
    __in BOOL matchRequired, 
    __in WS_HEAP* heap, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsGetPolicyProperty(
    __in WS_POLICY* policy, 
    __in WS_POLICY_PROPERTY_ID id, 
    __out_bcount void* value, 
    __in ULONG valueSize, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsGetPolicyAlternativeCount(
    __in WS_POLICY* policy, 
    __out ULONG* count, 
    __in_opt WS_ERROR* error
);
 
webservices.dll, HRESULT WINAPI WsCreateServiceProxyFromTemplate(
    __in WS_CHANNEL_TYPE channelType, 
    __in_ecount_opt const WS_PROXY_PROPERTY* properties, 
    __in const ULONG propertyCount, 
    __in WS_BINDING_TEMPLATE_TYPE templateType, 
    __in_bcount_opt void* templateValue, 
    __in ULONG templateSize, 
    __in const void* templateDescription, 
    __in ULONG templateDescriptionSize, 
    __deref_out WS_SERVICE_PROXY** serviceProxy, 
    __in_opt WS_ERROR* error
);

webservices.dll, HRESULT WINAPI WsCreateServiceEndpointFromTemplate(
    __in WS_CHANNEL_TYPE channelType, 
    __in const WS_SERVICE_ENDPOINT_PROPERTY* properties, 
    __in ULONG propertyCount, 
    __in_opt const WS_STRING* addressUrl, 
    __in const WS_SERVICE_CONTRACT* contract, 
    __in WS_SERVICE_SECURITY_CALLBACK authorizationCallback, 
    __in WS_HEAP* heap, 
    __in WS_BINDING_TEMPLATE_TYPE templateType, 
    __in_bcount_opt void* templateValue, 
    __in ULONG templateSize, 
    __in const void* templateDescription, 
    __in ULONG templateDescriptionSize, 
    __deref_out WS_SERVICE_ENDPOINT** serviceEndpoint, 
    __in_opt WS_ERROR* error
);



rasman.dll, VOID WINAPI RasSecurityDialogComplete(
    IN SECURITY_MESSAGE * pSecMsg
);

rasman.dll, DWORD WINAPI RasSecurityDialogBegin(
    IN HPORT  hPort,
    IN PBYTE  pSendBuf,
    IN DWORD  SendBufSize,
    IN PBYTE  pRecvBuf,
    IN DWORD  RecvBufSize,
    IN VOID *RasSecurityDialogComplete
);

rasman.dll, DWORD WINAPI RasSecurityDialogEnd(
    IN HPORT    hPort
);

rasman.dll, DWORD WINAPI RasSecurityDialogSend(
    IN HPORT    hPort,
    IN PBYTE    pBuffer,
    IN WORD     BufferLength
);

rasman.dll, DWORD WINAPI RasSecurityDialogReceive(
    IN HPORT    hPort,
    IN PBYTE    pBuffer,
    IN PWORD    pBufferLength,
    IN DWORD    Timeout,
    IN HANDLE   hEvent
);

rasman.dll, DWORD WINAPI RasSecurityDialogGetInfo(
    IN HPORT                hPort,
    IN RAS_SECURITY_INFO*   pBuffer
);



gpedit.dll, HRESULT WINAPI CreateGPOLink(
    __in LPOLESTR lpGPO,
    __in LPOLESTR lpContainer,
         BOOL fHighPriority
);

gpedit.dll, HRESULT WINAPI DeleteGPOLink(
    __in LPOLESTR lpGPO,
    __in LPOLESTR lpContainer
);

gpedit.dll, HRESULT WINAPI DeleteAllGPOLinks(
    __in LPOLESTR lpContainer
);

gpedit.dll, HRESULT WINAPI BrowseForGPO(
    LPGPOBROWSEINFO lpBrowseInfo
);

gpedit.dll, HRESULT WINAPI ImportRSoPData(
    __in LPOLESTR lpNameSpace,
    __in LPOLESTR lpFileName
);

gpedit.dll, HRESULT WINAPI ExportRSoPData(
    __in LPOLESTR lpNameSpace,
    __in LPOLESTR lpFileName
);



dbghelp.dll, DWORD WINAPI UnDecorateSymbolName(
    __in PCSTR name,
    __out_ecount PSTR outputString,
    __in DWORD maxStringLength,
    __in DWORD flags
);

dbghelp.dll, BOOL WINAPI DbgHelpCreateUserDump(
    __in_opt LPCSTR FileName,
    __in PDBGHELP_CREATE_USER_DUMP_CALLBACK Callback,
    __in_opt PVOID UserData
);



imagehlp.dll, BOOL WINAPI MiniDumpWriteDump(
    __in HANDLE hProcess,
    __in DWORD ProcessId,
    __in HANDLE hFile,
    __in MINIDUMP_TYPE DumpType,
    __in_opt PMINIDUMP_EXCEPTION_INFORMATION ExceptionParam,
    __in_opt PMINIDUMP_USER_STREAM_INFORMATION UserStreamParam,
    __in_opt PMINIDUMP_CALLBACK_INFORMATION CallbackParam
);

imagehlp.dll, BOOL WINAPI MiniDumpReadDumpStream(
    __in PVOID BaseOfDump,
    __in ULONG StreamNumber,
    __deref_out_opt PMINIDUMP_DIRECTORY * Dir,
    __deref_out_opt PVOID * StreamPointer,
    __out_opt ULONG * StreamSize
);



dxva2.dll, _BOOL WINAPI GetNumberOfPhysicalMonitorsFromHMONITOR( 
    HMONITOR hMonitor, 
    __out LPDWORD pdwNumberOfPhysicalMonitors
);

dxva2.dll, HRESULT WINAPI GetNumberOfPhysicalMonitorsFromIDirect3DDevice9(
    __in IDirect3DDevice9* pDirect3DDevice9,
    __out LPDWORD pdwNumberOfPhysicalMonitors
);

dxva2.dll, _BOOL WINAPI GetPhysicalMonitorsFromHMONITOR( 
    __in HMONITOR hMonitor,
    __in DWORD dwPhysicalMonitorArraySize,
    __out_ecount LPPHYSICAL_MONITOR pPhysicalMonitorArray
);

dxva2.dll, HRESULT WINAPI GetPhysicalMonitorsFromIDirect3DDevice9( 
    __in IDirect3DDevice9* pDirect3DDevice9,
    __in DWORD dwPhysicalMonitorArraySize,
    __out_ecount LPPHYSICAL_MONITOR pPhysicalMonitorArray
);

dxva2.dll, _BOOL WINAPI DestroyPhysicalMonitor(
    __in HANDLE hMonitor
);

dxva2.dll, _BOOL WINAPI DestroyPhysicalMonitors( 
    __in DWORD dwPhysicalMonitorArraySize,
    __in_ecount LPPHYSICAL_MONITOR pPhysicalMonitorArray
);



gdi32.dll, int WINAPI AddFontResourceA(
    __in LPCSTR bbb
);

gdi32.dll, int WINAPI AddFontResourceW(
    __in LPCSTR bbb
);

gdi32.dll, BOOL WINAPI CancelDC(
    __in HDC hdc
);

gdi32.dll, int WINAPI ChoosePixelFormat(
    __in HDC hdc,
    __in CONST PIXELFORMATDESCRIPTOR *ppfd
);

gdi32.dll, HMETAFILE WINAPI CloseMetaFile(
    __in HDC hdc
);

gdi32.dll, int WINAPI CombineRgn(
    __in_opt HRGN hrgnDst,
    __in_opt HRGN hrgnSrc1,
    __in_opt HRGN hrgnSrc2,
    __in int iMode
);

gdi32.dll, HMETAFILE WINAPI CopyMetaFileA(
    __in HMETAFILE bbb,
    __in_opt LPCSTR ccc
);

gdi32.dll, HMETAFILE WINAPI CopyMetaFileW(
    __in HMETAFILE bbb,
    __in_opt LPCSTR ccc
);

gdi32.dll, HBITMAP WINAPI CreateCompatibleBitmap(
    __in HDC hdc,
    __in int cx,
    __in int cy
);

gdi32.dll, HBITMAP WINAPI CreateDiscardableBitmap(
    __in HDC hdc,
    __in int cx,
    __in int cy
);

gdi32.dll, HDC WINAPI CreateCompatibleDC(
    __in_opt HDC hdc
);

gdi32.dll, HDC WINAPI CreateDCA(
    __in_opt LPCSTR pwszDriver,
    __in_opt LPCSTR pwszDevice,
    __in_opt LPCSTR pszPort,
    __in_opt CONST DEVMODEA * pdm
);

gdi32.dll, HDC WINAPI CreateDCW(
    __in_opt LPCSTR pwszDriver,
    __in_opt LPCSTR pwszDevice,
    __in_opt LPCSTR pszPort,
    __in_opt CONST DEVMODEA * pdm
);

gdi32.dll, HBITMAP WINAPI CreateDIBitmap(
     __in HDC hdc,
     __in_opt CONST BITMAPINFOHEADER *pbmih,
     __in DWORD flInit,
     __in_opt CONST VOID *pjBits,
     __in_opt CONST BITMAPINFO *pbmi,
     __in UINT iUsage
);

gdi32.dll, HBRUSH WINAPI CreateDIBPatternBrush(
    __in HGLOBAL h,
    __in UINT iUsage
);

gdi32.dll, HRGN WINAPI CreateEllipticRgn(
    __in int x1,
    __in int y1,
    __in int x2,
    __in int y2
);

gdi32.dll, HRGN WINAPI CreateEllipticRgnIndirect(
    __in CONST RECT *lprect
);

gdi32.dll, HFONT WINAPI CreateFontA(
    __in int cHeight,
    __in int cWidth,
    __in int cEscapement,
    __in int cOrientation,
    __in int cWeight,
    __in DWORD bItalic,
    __in DWORD bUnderline,
    __in DWORD bStrikeOut,
    __in DWORD iCharSet,
    __in DWORD iOutPrecision,
    __in DWORD iClipPrecision,
    __in DWORD iQuality,
    __in DWORD iPitchAndFamily,
    __in_opt LPCSTR pszFaceName
);

gdi32.dll, HFONT WINAPI CreateFontW(
    __in int cHeight,
    __in int cWidth,
    __in int cEscapement,
    __in int cOrientation,
    __in int cWeight,
    __in DWORD bItalic,
    __in DWORD bUnderline,
    __in DWORD bStrikeOut,
    __in DWORD iCharSet,
    __in DWORD iOutPrecision,
    __in DWORD iClipPrecision,
    __in DWORD iQuality,
    __in DWORD iPitchAndFamily,
    __in_opt LPCSTR pszFaceName
);

gdi32.dll, HBRUSH WINAPI CreateHatchBrush(
    __in int iHatch,
    __in COLORREF color
);

gdi32.dll, HDC WINAPI CreateICA(
    __in_opt LPCSTR pszDriver,
    __in_opt LPCSTR pszDevice,
    __in_opt LPCSTR pszPort,
    __in_opt CONST DEVMODEA * pdm
);

gdi32.dll, HDC WINAPI CreateICW(
    __in_opt LPCSTR pszDriver,
    __in_opt LPCSTR pszDevice,
    __in_opt LPCSTR pszPort,
    __in_opt CONST DEVMODEA * pdm
);

gdi32.dll, HDC WINAPI CreateMetaFileA(
    __in_opt LPCSTR pszFile
);

gdi32.dll, HDC WINAPI CreateMetaFileW(
    __in_opt LPCSTR pszFile
);

gdi32.dll, HPEN WINAPI CreatePen(
    __in int iStyle,
    __in int cWidth,
    __in COLORREF color
);

gdi32.dll, HRGN WINAPI CreatePolyPolygonRgn(
    __in CONST POINT *pptl,
    __in CONST INT  *pc,
    __in int cPoly,
    __in int iMode
);

gdi32.dll, HRGN WINAPI CreateRectRgn(
    __in int x1,
    __in int y1,
    __in int x2,
    __in int y2
);

gdi32.dll, HRGN WINAPI CreateRectRgnIndirect(
    __in CONST RECT *lprect
);

gdi32.dll, HRGN  WINAPI CreateRoundRectRgn(
    __in int x1,
    __in int y1,
    __in int x2,
    __in int y2,
    __in int w,
    __in int h
);

gdi32.dll, BOOL WINAPI CreateScalableFontResourceA(
    __in DWORD fdwHidden,
    __in LPCSTR lpszFont,
    __in LPCSTR lpszFile,
    __in_opt LPCSTR lpszPath
);

gdi32.dll, BOOL WINAPI CreateScalableFontResourceW(
    __in DWORD fdwHidden,
    __in LPCSTR lpszFont,
    __in LPCSTR lpszFile,
    __in_opt LPCSTR lpszPath
);

gdi32.dll, HBRUSH WINAPI CreateSolidBrush(
    __in COLORREF color
);

gdi32.dll, BOOL WINAPI DeleteDC(
    __in HDC hdc
);

gdi32.dll, BOOL WINAPI DeleteMetaFile(
    __in HMETAFILE hmf
);

gdi32.dll, int WINAPI DescribePixelFormat(
    __in HDC hdc,
    __in int iPixelFormat,
    __in UINT nBytes,
    __out_bcount_opt LPPIXELFORMATDESCRIPTOR ppfd
);

gdi32.dll, int WINAPI DeviceCapabilitiesA(
    __in                LPCSTR         pDevice,
    __in_opt            LPCSTR         pPort,
    __in                WORD             fwCapability,
    __out_xcount_opt LPSTR          pOutput,
    __in_opt            CONST DEVMODEA   *pDevMode
);

gdi32.dll, int WINAPI DeviceCapabilitiesW(
    __in                LPCSTR         pDevice,
    __in_opt            LPCSTR         pPort,
    __in                WORD             fwCapability,
    __out_xcount_opt LPSTR          pOutput,
    __in_opt            CONST DEVMODEA   *pDevMode
);

gdi32.dll, int WINAPI DrawEscape(
    __in HDC    hdc,
    __in int    iEscape,
    __in int    cjIn,
    __in_bcount_opt LPCSTR lpIn
);

gdi32.dll, int WINAPI EnumFontFamiliesExA(
    __in HDC hdc,
    __in LPLOGFONTA lpLogfont,
    __in FONTENUMPROCA lpProc,
    __in LPARAM lParam,
    __in DWORD dwFlags
);

gdi32.dll, int WINAPI EnumFontFamiliesExW(
    __in HDC hdc,
    __in LPLOGFONTA lpLogfont,
    __in FONTENUMPROCA lpProc,
    __in LPARAM lParam,
    __in DWORD dwFlags
);

gdi32.dll, int WINAPI EnumFontFamiliesA(
    __in HDC hdc,
    __in_opt LPCSTR lpLogfont,
    __in FONTENUMPROCA lpProc,
    __in LPARAM lParam
);

gdi32.dll, int WINAPI EnumFontFamiliesW(
    __in HDC hdc,
    __in_opt LPCSTR lpLogfont,
    __in FONTENUMPROCA lpProc,
    __in LPARAM lParam
);

gdi32.dll, int WINAPI EnumFontsA(
    __in HDC hdc,
    __in_opt LPCSTR lpLogfont,
    __in FONTENUMPROCA lpProc,
    __in LPARAM lParam
);

gdi32.dll, int WINAPI EnumFontsW(
    __in HDC hdc,
    __in_opt LPCSTR lpLogfont,
    __in FONTENUMPROCA lpProc,
    __in LPARAM lParam
);

gdi32.dll, int WINAPI EnumObjects(
 __in HDC hdc,
 __in int nType,
 __in GOBJENUMPROC lpFunc,
 __in LPARAM lParam
);

gdi32.dll, BOOL WINAPI EqualRgn(
 __in HRGN hrgn1,
 __in HRGN hrgn2
);

gdi32.dll, int WINAPI ExtEscape(
    __in HDC hdc,
    __in int iEscape,
    __in int cjInput,
    __in_bcount_opt LPCSTR lpInData,
    __in int cjOutput,
    __out_bcount_opt LPSTR lpOutData
);

gdi32.dll, int  WINAPI GetROP2(
    __in HDC hdc
);

gdi32.dll, BOOL WINAPI GetAspectRatioFilterEx(
    __in HDC hdc,
    __out LPSIZE lpsize
);

gdi32.dll, COLORREF WINAPI GetBkColor(
    __in HDC hdc
);

gdi32.dll, COLORREF WINAPI GetDCBrushColor(
    __in HDC hdc
);

gdi32.dll, COLORREF WINAPI GetDCPenColor(
    __in HDC hdc
);

gdi32.dll, int WINAPI GetBkMode(
    __in HDC hdc
);

gdi32.dll, LONG WINAPI GetBitmapBits(
    __in HBITMAP hbit,
    __in LONG cb,
    __out_bcount LPVOID lpvBits
);

gdi32.dll, BOOL WINAPI GetBitmapDimensionEx(
    __in HBITMAP hbit,
    __out LPSIZE lpsize
);

gdi32.dll, UINT WINAPI GetBoundsRect(
    __in HDC hdc,
    __out LPRECT lprect,
    __in UINT flags
);

gdi32.dll, BOOL WINAPI GetBrushOrgEx(
 __in HDC hdc,
 __out LPPOINT lppt
);

gdi32.dll, BOOL WINAPI GetCharWidthA(
    __in HDC hdc,
    __in UINT iFirst,
 __in UINT iLast,
 __out_ecount LPINT lpBuffer
);

gdi32.dll, BOOL WINAPI GetCharWidthW(
    __in HDC hdc,
    __in UINT iFirst,
 __in UINT iLast,
 __out_ecount LPINT lpBuffer
);

gdi32.dll, BOOL WINAPI GetCharWidth32A(
 __in HDC hdc,
 __in UINT iFirst,
 __in UINT iLast,
  __out_ecount LPINT lpBuffer
);

gdi32.dll, BOOL WINAPI GetCharWidth32W(
 __in HDC hdc,
 __in UINT iFirst,
 __in UINT iLast,
  __out_ecount LPINT lpBuffer
);

gdi32.dll, BOOL APIENTRY GetCharWidthFloatA(
 __in HDC hdc,
 __in UINT iFirst,
 __in UINT iLast,
 __out_ecount PFLOAT lpBuffer
);

gdi32.dll, BOOL APIENTRY GetCharWidthFloatW(
 __in HDC hdc,
 __in UINT iFirst,
 __in UINT iLast,
 __out_ecount PFLOAT lpBuffer
);

gdi32.dll, BOOL APIENTRY GetCharABCWidthsA(
 __in HDC hdc,
                                            __in UINT wFirst,
                                            __in UINT wLast,
                                            __out_ecount LPABC lpABC
);

gdi32.dll, BOOL APIENTRY GetCharABCWidthsW(
 __in HDC hdc,
                                            __in UINT wFirst,
                                            __in UINT wLast,
                                            __out_ecount LPABC lpABC
);

gdi32.dll, BOOL APIENTRY GetCharABCWidthsFloatA(
 __in HDC hdc,
 __in UINT iFirst,
 __in UINT iLast,
 __out_ecount LPABCFLOAT lpABC
);

gdi32.dll, BOOL APIENTRY GetCharABCWidthsFloatW(
 __in HDC hdc,
 __in UINT iFirst,
 __in UINT iLast,
 __out_ecount LPABCFLOAT lpABC
);

gdi32.dll, int WINAPI GetClipBox(
 __in HDC hdc,
  __out LPRECT lprect
);

gdi32.dll, int WINAPI GetClipRgn(
 __in HDC hdc,
 __in HRGN hrgn
);

gdi32.dll, int WINAPI GetMetaRgn(
 __in HDC hdc,
 __in HRGN hrgn
);

gdi32.dll, HGDIOBJ WINAPI GetCurrentObject(
 __in HDC hdc,
 __in UINT type
);

gdi32.dll, BOOL WINAPI GetCurrentPositionEx(
 __in HDC hdc,
  __out LPPOINT lppt
);

gdi32.dll, int WINAPI GetDeviceCaps(
 __in_opt HDC hdc,
 __in int index
);

gdi32.dll, int WINAPI GetDIBits(
 __in HDC hdc,
 __in HBITMAP hbm,
 __in UINT start,
 __in UINT cLines,
  __out_opt LPVOID lpvBits,
 __inout_xcount LPBITMAPINFO lpbmi,
 __in UINT usage
);

gdi32.dll, DWORD WINAPI GetFontData(
    __in HDC     hdc,
                                        __in DWORD   dwTable,
                                        __in DWORD   dwOffset,
                                        __out_bcount_part_opt PVOID pvBuffer,
                                        __in DWORD   cjBuffer
);

gdi32.dll, DWORD WINAPI GetGlyphOutlineA(
    __in HDC hdc,
                                            __in UINT uChar,
                                            __in UINT fuFormat,
                                            __out LPGLYPHMETRICS lpgm,
                                            __in DWORD cjBuffer,
                                            __out_bcount_opt LPVOID pvBuffer,
                                            __in CONST MAT2 *lpmat2
);

gdi32.dll, DWORD WINAPI GetGlyphOutlineW(
    __in HDC hdc,
                                            __in UINT uChar,
                                            __in UINT fuFormat,
                                            __out LPGLYPHMETRICS lpgm,
                                            __in DWORD cjBuffer,
                                            __out_bcount_opt LPVOID pvBuffer,
                                            __in CONST MAT2 *lpmat2
);

gdi32.dll, int WINAPI GetGraphicsMode(
 __in HDC hdc
);

gdi32.dll, int WINAPI GetMapMode(
 __in HDC hdc
);

gdi32.dll, UINT WINAPI GetMetaFileBitsEx(
__in HMETAFILE hMF,
 __in UINT cbBuffer,
 __out_bcount_opt LPVOID lpData
);

gdi32.dll, HMETAFILE WINAPI GetMetaFileA(
 __in LPCSTR lpName
);

gdi32.dll, HMETAFILE WINAPI GetMetaFileW(
 __in LPCSTR lpName
);

gdi32.dll, COLORREF WINAPI GetNearestColor(
 __in HDC hdc,
 __in COLORREF color
);

gdi32.dll, UINT WINAPI GetNearestPaletteIndex(
 __in HPALETTE h,
 __in COLORREF color
);

gdi32.dll, DWORD WINAPI GetObjectType(
 __in HGDIOBJ h
);

gdi32.dll, UINT WINAPI GetPaletteEntries(
   __in HPALETTE hpal,
                                            __in UINT iStart,
                                            __in UINT cEntries,
     __out_ecount_part_opt LPPALETTEENTRY pPalEntries
);

gdi32.dll, COLORREF WINAPI GetPixel(
__in HDC hdc,
 __in int x,
 __in int y
);

gdi32.dll, int WINAPI GetPixelFormat(
 __in HDC hdc
);

gdi32.dll, int WINAPI GetPolyFillMode(
 __in HDC hdc
);

gdi32.dll, BOOL WINAPI GetRasterizerCaps(
   __out_bcount LPRASTERIZER_STATUS lpraststat,
                                            __in UINT cjBytes
);

gdi32.dll, int WINAPI GetRandomRgn(
__in HDC hdc,
 __in HRGN hrgn,
 __in INT i
);

gdi32.dll, DWORD WINAPI GetRegionData(
   __in HRGN hrgn,
                                        __in DWORD nCount,
    __out_bcount_part_opt LPRGNDATA lpRgnData
);

gdi32.dll, int WINAPI GetRgnBox(
 __in HRGN hrgn,
  __out LPRECT lprc
);

gdi32.dll, HGDIOBJ WINAPI GetStockObject(
 __in int i
);

gdi32.dll, int WINAPI GetStretchBltMode(
__in HDC hdc
);

gdi32.dll, UINT WINAPI GetSystemPaletteEntries(
    __in HDC  hdc,
    __in UINT iStart,
    __in UINT cEntries,
    __out_ecount_opt LPPALETTEENTRY pPalEntries
);

gdi32.dll, UINT  WINAPI GetSystemPaletteUse(
__in HDC hdc
);

gdi32.dll, int WINAPI GetTextCharacterExtra(
__in HDC hdc
);

gdi32.dll, UINT WINAPI GetTextAlign(
__in HDC hdc
);

gdi32.dll, COLORREF WINAPI GetTextColor(
__in HDC hdc
);

gdi32.dll, int WINAPI GetTextCharset(
 __in HDC hdc
);

gdi32.dll, int WINAPI GetTextCharsetInfo(
 __in HDC hdc,
 __out_opt LPFONTSIGNATURE lpSig,
 __in DWORD dwFlags
);

gdi32.dll, BOOL WINAPI TranslateCharsetInfo(
 __inout DWORD FAR *lpSrc,
  __out LPCHARSETINFO lpCs,
 __in DWORD dwFlags
);

gdi32.dll, DWORD WINAPI GetFontLanguageInfo(
 __in HDC hdc
);

gdi32.dll, DWORD WINAPI GetCharacterPlacementA(
  __in HDC hdc,
 __in_ecount LPCSTR lpString,
 __in int nCount,
 __in int nMexExtent,
 __inout LPGCP_RESULTSA lpResults,
 __in DWORD dwFlags
);

gdi32.dll, DWORD WINAPI GetCharacterPlacementW(
  __in HDC hdc,
 __in_ecount LPCSTR lpString,
 __in int nCount,
 __in int nMexExtent,
 __inout LPGCP_RESULTSA lpResults,
 __in DWORD dwFlags
);

gdi32.dll, DWORD WINAPI GetFontUnicodeRanges(
 __in HDC hdc,
 __out_opt LPGLYPHSET lpgs
);

gdi32.dll, DWORD WINAPI GetGlyphIndicesA(
 __in HDC hdc,
 __in_ecount LPCSTR lpstr,
 __in int c,
 __out_ecount LPWORD pgi,
 __in DWORD fl
);

gdi32.dll, DWORD WINAPI GetGlyphIndicesW(
 __in HDC hdc,
 __in_ecount LPCSTR lpstr,
 __in int c,
 __out_ecount LPWORD pgi,
 __in DWORD fl
);

gdi32.dll, BOOL WINAPI GetTextExtentPointI(
__in HDC hdc,
 __in_ecount LPWORD pgiIn,
 __in int cgi,
 __out LPSIZE psize
);

gdi32.dll, BOOL WINAPI GetTextExtentExPointI(
  __in HDC hdc,
                                                __in_ecount LPWORD lpwszString,
                                                __in int cwchString,
                                                __in int nMaxExtent,
                                                __out_opt LPINT lpnFit,
                                                __out_ecount_part_opt LPINT lpnDx,
                                                __out LPSIZE lpSize
);

gdi32.dll, BOOL WINAPI GetCharWidthI(
   __in HDC hdc,
                                        __in UINT giFirst,
                                        __in UINT cgi,
                                        __in_ecount_opt LPWORD pgi,
                                        __out_ecount LPINT piWidths
);

gdi32.dll, BOOL WINAPI GetCharABCWidthsI(  __in HDC    hdc,
                                            __in UINT   giFirst,
                                            __in UINT   cgi,
                                            __in_ecount_opt LPWORD pgi,
                                            __out_ecount LPABC  pabc
);

gdi32.dll, int WINAPI AddFontResourceExA(
 __in LPCSTR name,
 __in DWORD fl,
 __reserved PVOID res
);

gdi32.dll, int WINAPI AddFontResourceExW(
 __in LPCSTR name,
 __in DWORD fl,
 __reserved PVOID res
);

gdi32.dll, BOOL WINAPI RemoveFontResourceExA(
 __in LPCSTR name,
 __in DWORD fl,
 __reserved PVOID pdv
);

gdi32.dll, BOOL WINAPI RemoveFontResourceExW(
 __in LPCSTR name,
 __in DWORD fl,
 __reserved PVOID pdv
);

gdi32.dll, HANDLE WINAPI AddFontMemResourceEx(
   __in_bcount PVOID pFileView,
                                                __in DWORD cjSize,
                                                __reserved PVOID pvResrved,
                                                __in DWORD* pNumFonts
);

gdi32.dll, BOOL WINAPI RemoveFontMemResourceEx(
 __in HANDLE h
);

gdi32.dll, HFONT WINAPI CreateFontIndirectEx(
 __in CONST ENUMLOGFONTEXDV bbb
);

gdi32.dll, BOOL WINAPI GetViewportExtEx(
 __in HDC hdc,
 __out LPSIZE lpsize
);

gdi32.dll, BOOL WINAPI GetViewportOrgEx(
 __in HDC hdc,
 __out LPPOINT lppoint
);

gdi32.dll, BOOL WINAPI GetWindowExtEx(
 __in HDC hdc,
 __out LPSIZE lpsize
);

gdi32.dll, BOOL WINAPI GetWindowOrgEx(
 __in HDC hdc,
 __out LPPOINT lppoint
);

gdi32.dll, BOOL WINAPI LineDDA(
 __in int xStart,
 __in int yStart,
 __in int xEnd,
 __in int yEnd,
 __in LINEDDAPROC lpProc,
 __in_opt LPARAM data
);

gdi32.dll, BOOL WINAPI MaskBlt(
 __in HDC hdcDest,
 __in int xDest,
 __in int yDest,
 __in int width,
 __in int height,
              __in HDC hdcSrc,
 __in int xSrc,
 __in int ySrc,
 __in HBITMAP hbmMask,
 __in int xMask,
 __in int yMask,
 __in DWORD rop
);

gdi32.dll, BOOL WINAPI PlgBlt(
 __in HDC hdcDest,
 __in_ecount CONST POINT * lpPoint,
 __in HDC hdcSrc,
 __in int xSrc,
 __in int ySrc,
 __in int width,
                     __in int height,
 __in_opt HBITMAP hbmMask,
 __in int xMask,
 __in int yMask
);

gdi32.dll, int WINAPI OffsetRgn(
__in HRGN hrgn,
 __in int x,
 __in int y
);

gdi32.dll, BOOL WINAPI PlayMetaFile(
__in HDC hdc,
 __in HMETAFILE hmf
);

gdi32.dll, BOOL WINAPI PtInRegion(
__in HRGN hrgn,
 __in int x,
 __in int y
);

gdi32.dll, BOOL WINAPI PtVisible(
__in HDC hdc,
 __in int x,
 __in int y
);

gdi32.dll, BOOL WINAPI RectInRegion(
__in HRGN hrgn,
 __in CONST RECT * lprect
);

gdi32.dll, BOOL WINAPI RectVisible(
__in HDC hdc,
 __in CONST RECT * lprect
);

gdi32.dll, BOOL WINAPI RemoveFontResourceA(
__in LPCSTR lpFileName
);

gdi32.dll, BOOL WINAPI RemoveFontResourceW(
__in LPCSTR lpFileName
);

gdi32.dll, int  WINAPI ExtSelectClipRgn(
__in HDC hdc,
 __in_opt HRGN hrgn,
 __in int mode
);

gdi32.dll, int WINAPI SetMetaRgn(
__in HDC hdc
);

gdi32.dll, COLORREF WINAPI SetDCBrushColor(
__in HDC hdc,
 __in COLORREF color
);

gdi32.dll, LONG WINAPI SetBitmapBits(
    __in HBITMAP hbm,
    __in DWORD cb,
    __in_bcount CONST VOID *pvBits
);

gdi32.dll, UINT WINAPI SetBoundsRect(
__in HDC hdc,
 __in_opt CONST RECT * lprect,
 __in UINT flags
);

gdi32.dll, int WINAPI SetDIBits(
__in_opt HDC hdc,
 __in HBITMAP hbm,
 __in UINT start,
 __in UINT cLines,
 __in CONST VOID *lpBits,
 __in CONST BITMAPINFO * lpbmi,
 __in UINT ColorUse
);

gdi32.dll, int WINAPI SetGraphicsMode(
__in HDC hdc,
 __in int iMode
);

gdi32.dll, DWORD WINAPI GetLayout(
__in HDC hdc
);

gdi32.dll, HMETAFILE WINAPI SetMetaFileBitsEx(
__in UINT cbBuffer,
 __in_bcount CONST BYTE *lpData
);

gdi32.dll, BOOL WINAPI SetPixelV(
__in HDC hdc,
 __in int x,
 __in int y,
 __in COLORREF color
);

gdi32.dll, BOOL WINAPI SetPixelFormat(
__in HDC hdc,
 __in int format,
 __in CONST PIXELFORMATDESCRIPTOR * ppfd
);

gdi32.dll, BOOL WINAPI SetRectRgn(
__in HRGN hrgn,
 __in int left,
 __in int top,
 __in int right,
 __in int bottom
);

gdi32.dll, UINT WINAPI SetSystemPaletteUse(
__in HDC hdc,
 __in UINT use
);

gdi32.dll, BOOL WINAPI UpdateColors(
__in HDC hdc
);

gdi32.dll, ULONG WINAPI GdiMarshalSize(
    VOID aaa
);

gdi32.dll, VOID WINAPI GdiMarshal(
DWORD dwProcessIdTo,
 __in HGDIOBJ hGdiObj,
 __inout PVOID pData,
 ULONG ulFlags
);

gdi32.dll, HGDIOBJ WINAPI GdiUnmarshal(
__in PVOID pData,
 ULONG ulFlags
);

gdi32.dll, BOOL WINAPI AlphaBlend(
    __in HDC hdcDest,
    __in int xoriginDest,
    __in int yoriginDest,
    __in int wDest,
    __in int hDest,
    __in HDC hdcSrc,
    __in int xoriginSrc,
    __in int yoriginSrc,
    __in int wSrc,
    __in int hSrc,
    __in BLENDFUNCTION ftn
);

gdi32.dll, BOOL WINAPI TransparentBlt(
    __in HDC hdcDest,
    __in int xoriginDest,
    __in int yoriginDest,
    __in int wDest,
    __in int hDest,
    __in HDC hdcSrc,
    __in int xoriginSrc,
    __in int yoriginSrc,
    __in int wSrc,
    __in int hSrc,
    __in UINT crTransparent
);

gdi32.dll, BOOL WINAPI GradientFill(
    __in HDC hdc,
    __in_ecount PTRIVERTEX pVertex,
    __in ULONG nVertex,
    __in PVOID pMesh,
    __in ULONG nMesh,
    __in ULONG ulMode
);

gdi32.dll, BOOL WINAPI GdiAlphaBlend(
__in HDC hdcDest,
 __in int xoriginDest,
 __in int yoriginDest,
 __in int wDest,
 __in int hDest,
 __in HDC hdcSrc,
 __in int xoriginSrc,
 __in int yoriginSrc,
 __in int wSrc,
 __in int hSrc,
 __in BLENDFUNCTION ftn
);

gdi32.dll, BOOL WINAPI GdiTransparentBlt(
__in HDC hdcDest,
__in int xoriginDest,
 __in int yoriginDest,
 __in int wDest,
 __in int hDest,
 __in HDC hdcSrc,
                                           __in int xoriginSrc,
 __in int yoriginSrc,
 __in int wSrc,
 __in int hSrc,
 __in UINT crTransparent
);

gdi32.dll, BOOL WINAPI GdiGradientFill(
 __in HDC hdc,
                                        __in_ecount PTRIVERTEX pVertex,
                                        __in ULONG nVertex,
                                        __in PVOID pMesh,
                                        __in ULONG nCount,
                                        __in ULONG ulMode
);

gdi32.dll, BOOL WINAPI PlayMetaFileRecord(
  __in HDC hdc,
                                            __in_ecount LPHANDLETABLE lpHandleTable,
                                            __in LPMETARECORD lpMR,
                                            __in UINT noObjs
);

gdi32.dll, BOOL WINAPI EnumMetaFile(
 __in HDC hdc,
 __in HMETAFILE hmf,
 __in MFENUMPROC proc,
 __in_opt LPARAM param
);

gdi32.dll, HENHMETAFILE WINAPI CloseEnhMetaFile(
 __in HDC hdc
);

gdi32.dll, HENHMETAFILE WINAPI CopyEnhMetaFileA(
 __in HENHMETAFILE hEnh,
 __in_opt LPCSTR lpFileName
);

gdi32.dll, HENHMETAFILE WINAPI CopyEnhMetaFileW(
 __in HENHMETAFILE hEnh,
 __in_opt LPCSTR lpFileName
);

gdi32.dll, HDC WINAPI CreateEnhMetaFileA(
 __in_opt HDC hdc,
 __in_opt LPCSTR lpFilename,
 __in_opt CONST RECT *lprc,
 __in_opt LPCSTR lpDesc
);

gdi32.dll, HDC WINAPI CreateEnhMetaFileW(
 __in_opt HDC hdc,
 __in_opt LPCSTR lpFilename,
 __in_opt CONST RECT *lprc,
 __in_opt LPCSTR lpDesc
);

gdi32.dll, BOOL WINAPI DeleteEnhMetaFile(
 __in_opt HENHMETAFILE hmf
);

gdi32.dll, BOOL WINAPI EnumEnhMetaFile(
 __in_opt HDC hdc,
 __in HENHMETAFILE hmf,
 __in ENHMFENUMPROC proc,
   __in_opt LPVOID param,
 __in_opt CONST RECT * lpRect
);

gdi32.dll, HENHMETAFILE WINAPI GetEnhMetaFileA(
 __in LPCSTR lpName
);

gdi32.dll, HENHMETAFILE WINAPI GetEnhMetaFileW(
 __in LPCSTR lpName
);

gdi32.dll, UINT WINAPI GetEnhMetaFileBits(
  __in HENHMETAFILE hEMF,
                                            __in UINT nSize,
                                            __out_bcount_opt LPBYTE lpData
);

gdi32.dll, UINT WINAPI GetEnhMetaFileDescriptionA(
  __in HENHMETAFILE hemf,
                                                    __in UINT cchBuffer,
    __out_ecount_opt LPSTR lpDescription
);

gdi32.dll, UINT WINAPI GetEnhMetaFileDescriptionW(
  __in HENHMETAFILE hemf,
                                                    __in UINT cchBuffer,
    __out_ecount_opt LPSTR lpDescription
);

gdi32.dll, UINT WINAPI GetEnhMetaFileHeader(
    __in HENHMETAFILE hemf,
                                                __in UINT nSize,
    __out_bcount_opt LPENHMETAHEADER lpEnhMetaHeader
);

gdi32.dll, UINT WINAPI GetEnhMetaFilePaletteEntries(
__in HENHMETAFILE hemf,
                                                    __in UINT nNumEntries,
    __out_ecount_opt LPPALETTEENTRY lpPaletteEntries
);

gdi32.dll, UINT WINAPI GetEnhMetaFilePixelFormat(
   __in HENHMETAFILE hemf,
                                                    __in UINT cbBuffer,
   __out_bcount_opt PIXELFORMATDESCRIPTOR *ppfd
);

gdi32.dll, UINT WINAPI GetWinMetaFileBits(
  __in HENHMETAFILE hemf,
                                            __in UINT cbData16,
                                            __out_bcount_opt LPBYTE pData16,
                                            __in INT iMapMode,
    __in HDC hdcRef
);

gdi32.dll, BOOL WINAPI PlayEnhMetaFile(
 __in HDC hdc,
 __in HENHMETAFILE hmf,
 __in CONST RECT * lprect
);

gdi32.dll, BOOL WINAPI PlayEnhMetaFileRecord(
   __in HDC hdc,
                                                __in_ecount LPHANDLETABLE pht,
                                                __in CONST ENHMETARECORD *pmr,
                                                __in UINT cht
);

gdi32.dll, HENHMETAFILE  WINAPI SetEnhMetaFileBits(
  __in UINT nSize,
    __in_bcount CONST BYTE * pb
);

gdi32.dll, HENHMETAFILE  WINAPI SetWinMetaFileBits(
  __in UINT nSize,
                                                    __in_bcount CONST BYTE *lpMeta16Data,
                                                    __in_opt HDC hdcRef,
    __in_opt CONST METAFILEPICT *lpMFP
);

gdi32.dll, BOOL  WINAPI GdiComment(
__in HDC hdc,
 __in UINT nSize,
 __in_bcount CONST BYTE *lpData
);

gdi32.dll, BOOL WINAPI GetTextMetricsA(
 __in HDC hdc,
 __out LPTEXTMETRICA lptm
);

gdi32.dll, BOOL WINAPI GetTextMetricsW(
 __in HDC hdc,
 __out LPTEXTMETRICA lptm
);

gdi32.dll, BOOL WINAPI AngleArc(
 __in HDC hdc,
 __in int x,
 __in int y,
 __in DWORD r,
 __in FLOAT StartAngle,
 __in FLOAT SweepAngle
);

gdi32.dll, BOOL WINAPI PolyPolyline(
__in HDC hdc,
 __in CONST POINT *apt,
 __in_ecount CONST DWORD *asz,
 __in DWORD csz
);

gdi32.dll, BOOL WINAPI GetWorldTransform(
 __in HDC hdc,
 __out LPXFORM lpxf
);

gdi32.dll, BOOL WINAPI SetWorldTransform(
 __in HDC hdc,
 __in CONST XFORM * lpxf
);

gdi32.dll, BOOL WINAPI ModifyWorldTransform(
 __in HDC hdc,
 __in_opt CONST XFORM * lpxf,
 __in DWORD mode
);

gdi32.dll, BOOL WINAPI CombineTransform(
 __out LPXFORM lpxfOut,
 __in CONST XFORM *lpxf1,
 __in CONST XFORM *lpxf2
);

gdi32.dll, HBITMAP WINAPI CreateDIBSection(
__in_opt HDC hdc,
 __in CONST BITMAPINFO *lpbmi,
 __in UINT usage,
 __deref_opt_out VOID **ppvBits,
 __in_opt HANDLE hSection,
 __in DWORD offset
);

gdi32.dll, UINT WINAPI GetDIBColorTable(
 __in HDC  hdc,
                                        __in UINT iStart,
                                        __in UINT cEntries,
     __out_ecount_part RGBQUAD *prgbq
);

gdi32.dll, UINT WINAPI SetDIBColorTable(
 __in HDC  hdc,
                                        __in UINT iStart,
                                        __in UINT cEntries,
   __in_ecount CONST RGBQUAD *prgbq
);

gdi32.dll, BOOL WINAPI SetColorAdjustment(
 __in HDC hdc,
 __in CONST COLORADJUSTMENT *lpca
);

gdi32.dll, BOOL WINAPI GetColorAdjustment(
 __in HDC hdc,
 __out LPCOLORADJUSTMENT lpca
);

gdi32.dll, HPALETTE WINAPI CreateHalftonePalette(
 __in_opt HDC hdc
);

gdi32.dll, int WINAPI SetAbortProc(
__in HDC hdc,
 __in ABORTPROC proc
);

gdi32.dll, BOOL WINAPI AbortPath(
__in HDC hdc
);

gdi32.dll, BOOL WINAPI ArcTo(
__in HDC hdc,
 __in int left,
 __in int top,
 __in int right,
 __in int bottom,
 __in int xr1,
 __in int yr1,
 __in int xr2,
 __in int yr2
);

gdi32.dll, BOOL WINAPI BeginPath(
__in HDC hdc
);

gdi32.dll, BOOL WINAPI CloseFigure(
__in HDC hdc
);

gdi32.dll, BOOL WINAPI EndPath(
__in HDC hdc
);

gdi32.dll, BOOL WINAPI FillPath(
__in HDC hdc
);

gdi32.dll, BOOL WINAPI FlattenPath(
__in HDC hdc
);

gdi32.dll, int WINAPI GetPath(
__in HDC hdc,
 __out_ecount_opt LPPOINT apt,
 __out_ecount_opt LPBYTE aj,
 int cpt
);

gdi32.dll, HRGN WINAPI PathToRegion(
__in HDC hdc
);

gdi32.dll, BOOL WINAPI SelectClipPath(
__in HDC hdc,
 __in int mode
);

gdi32.dll, int WINAPI SetArcDirection(
__in HDC hdc,
 __in int dir
);

gdi32.dll, BOOL WINAPI SetMiterLimit(
__in HDC hdc,
 __in FLOAT limit,
 __out_opt PFLOAT old
);

gdi32.dll, BOOL WINAPI StrokeAndFillPath(
__in HDC hdc
);

gdi32.dll, BOOL WINAPI StrokePath(
__in HDC hdc
);

gdi32.dll, BOOL WINAPI WidenPath(
__in HDC hdc
);

gdi32.dll, HPEN WINAPI ExtCreatePen(
 __in DWORD iPenStyle,
                                    __in DWORD cWidth,
                                    __in CONST LOGBRUSH *plbrush,
                                    __in DWORD cStyle,
   __in_ecount_opt CONST DWORD *pstyle
);

gdi32.dll, BOOL WINAPI GetMiterLimit(
__in HDC hdc,
 __out PFLOAT plimit
);

gdi32.dll, int WINAPI GetArcDirection(
__in HDC hdc
);

gdi32.dll, int WINAPI GetObjectA(
__in HANDLE h,
 __in int c,
 __out_bcount_opt LPVOID pv
);

gdi32.dll, int WINAPI GetObjectW(
__in HANDLE h,
 __in int c,
 __out_bcount_opt LPVOID pv
);

gdi32.dll, HRGN WINAPI CreatePolygonRgn(
    __in_ecount CONST POINT *pptl,
                                            __in int cPoint,
                                            __in int iMode
);

gdi32.dll, BOOL WINAPI DPtoLP(
 __in HDC hdc, __inout_ecount LPPOINT lppt, __in int c
);

gdi32.dll, BOOL WINAPI LPtoDP(
 __in HDC hdc,
 __inout_ecount LPPOINT lppt,
 __in int c
);

gdi32.dll, BOOL WINAPI PolyBezier(
__in HDC hdc,
 __in_ecount CONST POINT * apt,
 __in DWORD cpt
);

gdi32.dll, BOOL WINAPI PolyBezierTo(
__in HDC hdc,
 __in_ecount CONST POINT * apt,
 __in DWORD cpt
);

gdi32.dll, BOOL WINAPI PolylineTo(
__in HDC hdc,
 __in_ecount CONST POINT * apt,
 __in DWORD cpt
);

gdi32.dll, BOOL WINAPI SetBitmapDimensionEx(
 __in HBITMAP hbm,
 __in int w,
 __in int h,
 __out_opt LPSIZE lpsz
);

gdi32.dll, BOOL WINAPI SetBrushOrgEx(
 __in HDC hdc,
 __in int x,
 __in int y,
 __out_opt LPPOINT lppt
);

gdi32.dll, int WINAPI GetTextFaceA(
 __in HDC hdc,
 __in int c,
 __out_ecount_part_opt  LPSTR lpName
);

gdi32.dll, int WINAPI GetTextFaceW(
 __in HDC hdc,
 __in int c,
 __out_ecount_part_opt  LPSTR lpName
);

gdi32.dll, DWORD WINAPI GetKerningPairsA(
    __in HDC hdc,
                                            __in DWORD nPairs,
    __out_ecount_part_opt LPKERNINGPAIR   lpKernPair
);

gdi32.dll, DWORD WINAPI GetKerningPairsW(
    __in HDC hdc,
                                            __in DWORD nPairs,
    __out_ecount_part_opt LPKERNINGPAIR   lpKernPair
);

gdi32.dll, BOOL WINAPI GetDCOrgEx(
 __in HDC hdc,
 __out LPPOINT lppt
);

gdi32.dll, BOOL WINAPI FixBrushOrgEx(
 __in HDC hdc,
 __in int x,
 __in int y,
  __in_opt LPPOINT ptl
);

gdi32.dll, BOOL WINAPI UnrealizeObject(
 __in HGDIOBJ h
);

gdi32.dll, BOOL WINAPI GdiFlush(
    void aaa
);

gdi32.dll, DWORD WINAPI GdiSetBatchLimit(
 __in DWORD dw
);

gdi32.dll, DWORD WINAPI GdiGetBatchLimit(
    void aaa
);

gdi32.dll, int WINAPI SetICMMode(
 __in HDC hdc,
 __in int mode
);

gdi32.dll, BOOL WINAPI CheckColorsInGamut(
    __in HDC hdc,
                                                    __in_ecount LPRGBTRIPLE lpRGBTriple,
                                                    __out_bcount LPVOID dlpBuffer,
   __in DWORD nCount
);

gdi32.dll, HCOLORSPACE WINAPI GetColorSpace(
 __in HDC hdc
);

gdi32.dll, BOOL WINAPI GetLogColorSpaceA(
 __in HCOLORSPACE hColorSpace,
                                                __out_bcount LPLOGCOLORSPACEA lpBuffer,
     __in DWORD nSize
);

gdi32.dll, BOOL WINAPI GetLogColorSpaceW(
 __in HCOLORSPACE hColorSpace,
                                                __out_bcount LPLOGCOLORSPACEA lpBuffer,
     __in DWORD nSize
);

gdi32.dll, HCOLORSPACE WINAPI CreateColorSpaceA(
 __in LPLOGCOLORSPACEA lplcs
);

gdi32.dll, HCOLORSPACE WINAPI CreateColorSpaceW(
 __in LPLOGCOLORSPACEA lplcs
);

gdi32.dll, HCOLORSPACE WINAPI SetColorSpace(
 __in HDC hdc,
 __in HCOLORSPACE hcs
);

gdi32.dll, BOOL WINAPI DeleteColorSpace(
 __in HCOLORSPACE hcs
);

gdi32.dll, BOOL WINAPI GetICMProfileA(
    __in HDC hdc,
                                                __inout LPDWORD pBufSize,
    __out_ecount_opt LPSTR pszFilename
);

gdi32.dll, BOOL WINAPI GetICMProfileW(
    __in HDC hdc,
                                                __inout LPDWORD pBufSize,
    __out_ecount_opt LPSTR pszFilename
);

gdi32.dll, BOOL WINAPI SetICMProfileA(
 __in HDC hdc,
 __in LPSTR lpFileName
);

gdi32.dll, BOOL WINAPI SetICMProfileW(
 __in HDC hdc,
 __in LPSTR lpFileName
);

gdi32.dll, BOOL WINAPI GetDeviceGammaRamp(
 __in HDC hdc,
 __out_bcount LPVOID lpRamp
);

gdi32.dll, BOOL WINAPI SetDeviceGammaRamp(
 __in HDC hdc,
 __in_bcount  LPVOID lpRamp
);

gdi32.dll, BOOL WINAPI ColorMatchToTarget(
 __in HDC hdc,
 __in HDC hdcTarget,
 __in DWORD action
);

gdi32.dll, int WINAPI EnumICMProfilesA(
 __in HDC hdc,
 __in ICMENUMPROCA proc,
 __in_opt LPARAM param
);

gdi32.dll, int WINAPI EnumICMProfilesW(
 __in HDC hdc,
 __in ICMENUMPROCA proc,
 __in_opt LPARAM param
);

gdi32.dll, BOOL WINAPI UpdateICMRegKeyA(
 __reserved DWORD reserved,
 __in LPSTR lpszCMID,
 __in LPSTR lpszFileName,
 __in UINT command
);

gdi32.dll, BOOL WINAPI UpdateICMRegKeyW(
 __reserved DWORD reserved,
 __in LPSTR lpszCMID,
 __in LPSTR lpszFileName,
 __in UINT command
);

gdi32.dll, BOOL WINAPI ColorCorrectPalette(
 __in HDC hdc,
 __in HPALETTE hPal,
 __in DWORD deFirst,
 __in DWORD num
);



user32.dll, int WINAPI wvsprintfA(
    __out LPSTR bbb,
    __in LPCSTR ccc,
    __in va_list arglist
);

user32.dll, int WINAPI wvsprintfW(
    __out LPSTR bbb,
    __in LPCSTR ccc,
    __in va_list arglist
);

user32.dll, int WINAPIV wsprintfA(
    __out LPSTR bbb,
    __in LPCSTR ccc
);

user32.dll, int WINAPIV wsprintfW(
    __out LPSTR bbb,
    __in LPCSTR ccc
);

user32.dll, BOOL WINAPI ActivateKeyboardLayout(
    __in HKL hkl,
    __in UINT Flags
);

user32.dll, int WINAPI ToUnicodeExA(
    __in UINT wVirtKey,
    __in UINT wScanCode,
    __in_bcount CONST BYTE *lpKeyState,
    __out_ecount LPWSTR pwszBuff,
    __in int cchBuff,
    __in UINT wFlags,
    __in_opt HKL dwhkl
);

user32.dll, int WINAPI ToUnicodeExW(
    __in UINT wVirtKey,
    __in UINT wScanCode,
    __in_bcount CONST BYTE *lpKeyState,
    __out_ecount LPWSTR pwszBuff,
    __in int cchBuff,
    __in UINT wFlags,
    __in_opt HKL dwhkl
);

user32.dll, BOOL WINAPI UnloadKeyboardLayout(
    __in HKL hkl
);

user32.dll, BOOL WINAPI GetKeyboardLayoutNameA(
    __out_ecount LPSTR pwszKLID
);

user32.dll, BOOL WINAPI GetKeyboardLayoutNameW(
    __out_ecount LPSTR pwszKLID
);

user32.dll, int WINAPI GetKeyboardLayoutList(
    __in int nBuff,
    __out_ecount_part_opt HKL FAR *lpList
);

user32.dll, HKL WINAPI GetKeyboardLayout(
    __in DWORD idThread
);

user32.dll, int WINAPI GetMouseMovePointsEx(
    __in UINT cbSize,
    __in LPMOUSEMOVEPOINT lppt,
    __out_ecount LPMOUSEMOVEPOINT lpptBuf,
    __in int nBufPoints,
    __in DWORD resolution
);

user32.dll, HDESK WINAPI CreateDesktopA(
    __in LPCSTR lpszDesktop,
    __reserved LPCSTR lpszDevice,
    __reserved DEVMODEA* pDevmode,
    __in DWORD dwFlags,
    __in ACCESS_MASK dwDesiredAccess,
    __in_opt LPSECURITY_ATTRIBUTES lpsa
);

user32.dll, HDESK WINAPI CreateDesktopW(
    __in LPCSTR lpszDesktop,
    __reserved LPCSTR lpszDevice,
    __reserved DEVMODEA* pDevmode,
    __in DWORD dwFlags,
    __in ACCESS_MASK dwDesiredAccess,
    __in_opt LPSECURITY_ATTRIBUTES lpsa
);

user32.dll, HDESK WINAPI CreateDesktopExA(
    __in LPCSTR lpszDesktop,
    __reserved LPCSTR lpszDevice,
    __reserved DEVMODEA* pDevmode,
    __in DWORD dwFlags,
    __in ACCESS_MASK dwDesiredAccess,
    __in_opt LPSECURITY_ATTRIBUTES lpsa,
    __in ULONG ulHeapSize,
    __reserved PVOID pvoid
);

user32.dll, HDESK WINAPI CreateDesktopExW(
    __in LPCSTR lpszDesktop,
    __reserved LPCSTR lpszDevice,
    __reserved DEVMODEA* pDevmode,
    __in DWORD dwFlags,
    __in ACCESS_MASK dwDesiredAccess,
    __in_opt LPSECURITY_ATTRIBUTES lpsa,
    __in ULONG ulHeapSize,
    __reserved PVOID pvoid
);

user32.dll, HDESK WINAPI OpenDesktopA(
    __in LPCSTR lpszDesktop,
    __in DWORD dwFlags,
    __in BOOL fInherit,
    __in ACCESS_MASK dwDesiredAccess
);

user32.dll, HDESK WINAPI OpenDesktopW(
    __in LPCSTR lpszDesktop,
    __in DWORD dwFlags,
    __in BOOL fInherit,
    __in ACCESS_MASK dwDesiredAccess
);

user32.dll, HDESK WINAPI OpenInputDesktop(
    __in DWORD dwFlags,
    __in BOOL fInherit,
    __in ACCESS_MASK dwDesiredAccess
);

user32.dll, BOOL WINAPI EnumDesktopsA(
    __in_opt HWINSTA hwinsta,
    __in DESKTOPENUMPROCA lpEnumFunc,
    __in LPARAM lParam
);

user32.dll, BOOL WINAPI EnumDesktopsW(
    __in_opt HWINSTA hwinsta,
    __in DESKTOPENUMPROCA lpEnumFunc,
    __in LPARAM lParam
);

user32.dll, BOOL WINAPI EnumDesktopWindows(
    __in_opt HDESK hDesktop,
    __in WNDENUMPROC lpfn,
    __in LPARAM lParam
);

user32.dll, BOOL WINAPI SwitchDesktop(
    __in HDESK hDesktop
);

user32.dll, BOOL WINAPI SetThreadDesktop(
     __in HDESK hDesktop
);

user32.dll, BOOL WINAPI CloseDesktop(
    __in HDESK hDesktop
);

user32.dll, HDESK WINAPI GetThreadDesktop(
    __in DWORD dwThreadId
);

user32.dll, HWINSTA WINAPI CreateWindowStationA(
    __in_opt LPCSTR lpwinsta,
    __in DWORD dwFlags,
    __in ACCESS_MASK dwDesiredAccess,
    __in_opt LPSECURITY_ATTRIBUTES lpsa
);

user32.dll, HWINSTA WINAPI CreateWindowStationW(
    __in_opt LPCSTR lpwinsta,
    __in DWORD dwFlags,
    __in ACCESS_MASK dwDesiredAccess,
    __in_opt LPSECURITY_ATTRIBUTES lpsa
);

user32.dll, HWINSTA WINAPI OpenWindowStationA(
    __in LPCSTR lpszWinSta,
    __in BOOL fInherit,
    __in ACCESS_MASK dwDesiredAccess
);

user32.dll, HWINSTA WINAPI OpenWindowStationW(
    __in LPCSTR lpszWinSta,
    __in BOOL fInherit,
    __in ACCESS_MASK dwDesiredAccess
);

user32.dll, BOOL WINAPI EnumWindowStationsA(
    __in WINSTAENUMPROCA lpEnumFunc,
    __in LPARAM lParam
);

user32.dll, BOOL WINAPI EnumWindowStationsW(
    __in WINSTAENUMPROCA lpEnumFunc,
    __in LPARAM lParam
);

user32.dll, BOOL WINAPI CloseWindowStation(
    __in HWINSTA hWinSta
);

user32.dll, BOOL WINAPI SetProcessWindowStation(
    __in HWINSTA hWinSta
);

user32.dll, HWINSTA WINAPI GetProcessWindowStation(
    void aaa
);

user32.dll, BOOL WINAPI SetUserObjectSecurity(
    __in HANDLE hObj,
    __in PSECURITY_INFORMATION pSIRequested,
    __in PSECURITY_DESCRIPTOR pSID
);

user32.dll, BOOL WINAPI GetUserObjectSecurity(
    __in HANDLE hObj,
    __in PSECURITY_INFORMATION pSIRequested,
    __out_bcount_opt PSECURITY_DESCRIPTOR pSID,
    __in DWORD nLength,
    __out LPDWORD lpnLengthNeeded
);

user32.dll, BOOL WINAPI GetUserObjectInformationA(
    __in HANDLE hObj,
    __in int nIndex,
    __out_bcount_opt PVOID pvInfo,
    __in DWORD nLength,
    __out_opt LPDWORD lpnLengthNeeded
);

user32.dll, BOOL WINAPI GetUserObjectInformationW(
    __in HANDLE hObj,
    __in int nIndex,
    __out_bcount_opt PVOID pvInfo,
    __in DWORD nLength,
    __out_opt LPDWORD lpnLengthNeeded
);

user32.dll, BOOL WINAPI SetUserObjectInformationA(
    __in HANDLE hObj,
    __in int nIndex,
    __in_bcount PVOID pvInfo,
    __in DWORD nLength
);

user32.dll, BOOL WINAPI SetUserObjectInformationW(
    __in HANDLE hObj,
    __in int nIndex,
    __in_bcount PVOID pvInfo,
    __in DWORD nLength
);

user32.dll, BOOL WINAPI IsHungAppWindow(
    __in HWND hwnd
);

user32.dll, UINT WINAPI RegisterWindowMessageA(
    __in LPCSTR lpString
);

user32.dll, UINT WINAPI RegisterWindowMessageW(
    __in LPCSTR lpString
);

user32.dll, BOOL WINAPI TrackMouseEvent(
    __inout LPTRACKMOUSEEVENT lpEventTrack
);

user32.dll, BOOL WINAPI DrawEdge(
    __in HDC hdc,
    __inout LPRECT qrc,
    __in UINT edge,
    __in UINT grfFlags
);

user32.dll, BOOL WINAPI DrawFrameControl(
    __in HDC bbb,
    __inout LPRECT ccc,
    __in UINT ddd,
    __in UINT eee
);

user32.dll, BOOL WINAPI DrawCaption(
    __in HWND hwnd,
    __in HDC hdc,
    __in CONST RECT * lprect,
    __in UINT flags
);

user32.dll, BOOL WINAPI DrawAnimatedRects(
    __in_opt HWND hwnd,
    __in int idAni,
    __in CONST RECT *lprcFrom,
    __in CONST RECT *lprcTo
);

user32.dll, BOOL WINAPI GetMessageA(
    __out LPMSG lpMsg,
    __in_opt HWND hWnd,
    __in UINT wMsgFilterMin,
    __in UINT wMsgFilterMax
);

user32.dll, BOOL WINAPI GetMessageW(
    __out LPMSG lpMsg,
    __in_opt HWND hWnd,
    __in UINT wMsgFilterMin,
    __in UINT wMsgFilterMax
);

user32.dll, BOOL WINAPI TranslateMessage(
    __in CONST MSG *lpMsg
);

user32.dll, LRESULT WINAPI DispatchMessageA(
    __in CONST MSG *lpMsg
);

user32.dll, LRESULT WINAPI DispatchMessageW(
    __in CONST MSG *lpMsg
);

user32.dll, BOOL WINAPI SetMessageQueue(
    __in int cMessagesMax
);

user32.dll, BOOL WINAPI PeekMessageA(
    __out LPMSG lpMsg,
    __in_opt HWND hWnd,
    __in UINT wMsgFilterMin,
    __in UINT wMsgFilterMax,
    __in UINT wRemoveMsg
);

user32.dll, BOOL WINAPI PeekMessageW(
    __out LPMSG lpMsg,
    __in_opt HWND hWnd,
    __in UINT wMsgFilterMin,
    __in UINT wMsgFilterMax,
    __in UINT wRemoveMsg
);

user32.dll, BOOL WINAPI RegisterHotKey(
    __in_opt HWND hWnd,
    __in int id,
    __in UINT fsModifiers,
    __in UINT vk
);

user32.dll, BOOL WINAPI UnregisterHotKey(
    __in_opt HWND hWnd,
    __in int id
);

user32.dll, BOOL WINAPI ExitWindowsEx(
    __in UINT uFlags,
    __in DWORD dwReason
);

user32.dll, BOOL WINAPI SwapMouseButton(
    __in BOOL fSwap
);

user32.dll, DWORD WINAPI GetMessagePos(
    void aaa
);

user32.dll, LONG WINAPI GetMessageTime(
    void aaa
);

user32.dll, LPARAM WINAPI GetMessageExtraInfo(
    void aaa
);

user32.dll, BOOL WINAPI IsWow64Message(
    void aaa
);

user32.dll, LPARAM WINAPI SetMessageExtraInfo(
    __in LPARAM lParam
);

user32.dll, LRESULT WINAPI SendMessageA(
    __in HWND hWnd,
    __in UINT Msg,
    __in WPARAM wParam,
    __in LPARAM lParam
);

user32.dll, LRESULT WINAPI SendMessageW(
    __in HWND hWnd,
    __in UINT Msg,
    __in WPARAM wParam,
    __in LPARAM lParam
);

user32.dll, LRESULT WINAPI SendMessageTimeoutA(
    __in HWND hWnd,
    __in UINT Msg,
    __in WPARAM wParam,
    __in LPARAM lParam,
    __in UINT fuFlags,
    __in UINT uTimeout,
    __out_opt PDWORD_PTR lpdwResult
);

user32.dll, LRESULT WINAPI SendMessageTimeoutW(
    __in HWND hWnd,
    __in UINT Msg,
    __in WPARAM wParam,
    __in LPARAM lParam,
    __in UINT fuFlags,
    __in UINT uTimeout,
    __out_opt PDWORD_PTR lpdwResult
);

user32.dll, BOOL WINAPI SendNotifyMessageA(
    __in HWND hWnd,
    __in UINT Msg,
    __in WPARAM wParam,
    __in LPARAM lParam
);

user32.dll, BOOL WINAPI SendNotifyMessageW(
    __in HWND hWnd,
    __in UINT Msg,
    __in WPARAM wParam,
    __in LPARAM lParam
);

user32.dll, BOOL WINAPI SendMessageCallbackA(
    __in HWND hWnd,
    __in UINT Msg,
    __in WPARAM wParam,
    __in LPARAM lParam,
    __in SENDASYNCPROC lpResultCallBack,
    __in ULONG_PTR dwData
);

user32.dll, BOOL WINAPI SendMessageCallbackW(
    __in HWND hWnd,
    __in UINT Msg,
    __in WPARAM wParam,
    __in LPARAM lParam,
    __in SENDASYNCPROC lpResultCallBack,
    __in ULONG_PTR dwData
);

user32.dll, long WINAPI BroadcastSystemMessageExA(
    __in DWORD flags,
    __inout_opt LPDWORD lpInfo,
    __in UINT Msg,
    __in WPARAM wParam,
    __in LPARAM lParam,
    __out_opt PBSMINFO pbsmInfo
);

user32.dll, long WINAPI BroadcastSystemMessageExW(
    __in DWORD flags,
    __inout_opt LPDWORD lpInfo,
    __in UINT Msg,
    __in WPARAM wParam,
    __in LPARAM lParam,
    __out_opt PBSMINFO pbsmInfo
);

user32.dll, long WINAPI BroadcastSystemMessageA(
    __in DWORD flags,
    __inout_opt LPDWORD lpInfo,
    __in UINT Msg,
    __in WPARAM wParam,
    __in LPARAM lParam
);

user32.dll, long WINAPI BroadcastSystemMessageW(
    __in DWORD flags,
    __inout_opt LPDWORD lpInfo,
    __in UINT Msg,
    __in WPARAM wParam,
    __in LPARAM lParam
);

user32.dll, long WINAPI BroadcastSystemMessage(
    __in DWORD flags,
    __inout_opt LPDWORD lpInfo,
    __in UINT Msg,
    __in WPARAM wParam,
    __in LPARAM lParam
);

user32.dll, HDEVNOTIFY WINAPI RegisterDeviceNotificationA(
    __in HANDLE hRecipient,
    __in LPVOID NotificationFilter,
    __in DWORD Flags
);

user32.dll, HDEVNOTIFY WINAPI RegisterDeviceNotificationW(
    __in HANDLE hRecipient,
    __in LPVOID NotificationFilter,
    __in DWORD Flags
);

user32.dll, BOOL WINAPI UnregisterDeviceNotification(
    __in HDEVNOTIFY Handle
);

user32.dll, HPOWERNOTIFY WINAPI RegisterPowerSettingNotification(
    IN HANDLE hRecipient,
    IN LPCGUID PowerSettingGuid,
    IN DWORD Flags
);

user32.dll, BOOL WINAPI UnregisterPowerSettingNotification(
    IN HPOWERNOTIFY Handle
);

user32.dll, BOOL WINAPI PostMessageA(
    __in_opt HWND hWnd,
    __in UINT Msg,
    __in WPARAM wParam,
    __in LPARAM lParam
);

user32.dll, BOOL WINAPI PostMessageW(
    __in_opt HWND hWnd,
    __in UINT Msg,
    __in WPARAM wParam,
    __in LPARAM lParam
);

user32.dll, BOOL WINAPI PostThreadMessageA(
    __in DWORD idThread,
    __in UINT Msg,
    __in WPARAM wParam,
    __in LPARAM lParam
);

user32.dll, BOOL WINAPI PostThreadMessageW(
    __in DWORD idThread,
    __in UINT Msg,
    __in WPARAM wParam,
    __in LPARAM lParam
);

user32.dll, BOOL WINAPI AttachThreadInput(
    __in DWORD idAttach,
    __in DWORD idAttachTo,
    __in BOOL fAttach
);

user32.dll, BOOL WINAPI ReplyMessage(
    __in LRESULT lResult
);

user32.dll, BOOL WINAPI WaitMessage(
    void aaa
);

user32.dll, DWORD WINAPI WaitForInputIdle(
    __in HANDLE hProcess,
    __in DWORD dwMilliseconds
);

user32.dll, LRESULT CALLBACK DefWindowProcA(
    __in HWND hWnd,
    __in UINT Msg,
    __in WPARAM wParam,
    __in LPARAM lParam
);

user32.dll, LRESULT CALLBACK DefWindowProcW(
    __in HWND hWnd,
    __in UINT Msg,
    __in WPARAM wParam,
    __in LPARAM lParam
);

user32.dll, VOID WINAPI PostQuitMessage(
    __in int nExitCode
);

user32.dll, LRESULT WINAPI CallWindowProcA(
    __in WNDPROC lpPrevWndFunc,
    __in HWND hWnd,
    __in UINT Msg,
    __in WPARAM wParam,
    __in LPARAM lParam
);

user32.dll, LRESULT WINAPI CallWindowProcW(
    __in WNDPROC lpPrevWndFunc,
    __in HWND hWnd,
    __in UINT Msg,
    __in WPARAM wParam,
    __in LPARAM lParam
);

user32.dll, BOOL WINAPI InSendMessage(
    void aaa
);

user32.dll, DWORD WINAPI InSendMessageEx(
    __reserved LPVOID lpReserved
);

user32.dll, UINT WINAPI GetDoubleClickTime(
    void aaa
);

user32.dll, BOOL WINAPI SetDoubleClickTime(
    __in UINT bbb
);

user32.dll, ATOM WINAPI RegisterClassA(
    __in CONST WNDCLASSA *lpWndClass
);

user32.dll, ATOM WINAPI RegisterClassW(
    __in CONST WNDCLASSA *lpWndClass
);

user32.dll, BOOL WINAPI UnregisterClassA(
    __in LPCSTR lpClassName,
    __in_opt HINSTANCE hInstance
);

user32.dll, BOOL WINAPI UnregisterClassW(
    __in LPCSTR lpClassName,
    __in_opt HINSTANCE hInstance
);

user32.dll, BOOL WINAPI GetClassInfoA(
    __in_opt HINSTANCE hInstance,
    __in LPCSTR lpClassName,
    __out LPWNDCLASSA lpWndClass
);

user32.dll, BOOL WINAPI GetClassInfoW(
    __in_opt HINSTANCE hInstance,
    __in LPCSTR lpClassName,
    __out LPWNDCLASSA lpWndClass
);

user32.dll, ATOM WINAPI RegisterClassEx(
    __in CONST WNDCLASSEX bbb
);

user32.dll, BOOL WINAPI GetClassInfoExA(
    __in_opt HINSTANCE hInstance,
    __in LPCSTR lpszClass,
    __out LPWNDCLASSEXA lpwcx
);

user32.dll, BOOL WINAPI GetClassInfoExW(
    __in_opt HINSTANCE hInstance,
    __in LPCSTR lpszClass,
    __out LPWNDCLASSEXA lpwcx
);

user32.dll, HWND WINAPI CreateWindowExA(
    __in DWORD dwExStyle,
    __in_opt LPCSTR lpClassName,
    __in_opt LPCSTR lpWindowName,
    __in DWORD dwStyle,
    __in int X,
    __in int Y,
    __in int nWidth,
    __in int nHeight,
    __in_opt HWND hWndParent,
    __in_opt HMENU hMenu,
    __in_opt HINSTANCE hInstance,
    __in_opt LPVOID lpParam
);

user32.dll, HWND WINAPI CreateWindowExW(
    __in DWORD dwExStyle,
    __in_opt LPCSTR lpClassName,
    __in_opt LPCSTR lpWindowName,
    __in DWORD dwStyle,
    __in int X,
    __in int Y,
    __in int nWidth,
    __in int nHeight,
    __in_opt HWND hWndParent,
    __in_opt HMENU hMenu,
    __in_opt HINSTANCE hInstance,
    __in_opt LPVOID lpParam
);

user32.dll, BOOL WINAPI IsMenu(
    __in HMENU hMenu
);

user32.dll, BOOL WINAPI IsChild(
    __in HWND hWndParent,
    __in HWND hWnd
);

user32.dll, BOOL WINAPI GetLayeredWindowAttributes(
    __in HWND hwnd,
    __out_opt COLORREF* pcrKey,
    __out_opt BYTE* pbAlpha,
    __out_opt DWORD* pdwFlags
);

user32.dll, BOOL WINAPI SetLayeredWindowAttributes(
    __in HWND hwnd,
    __in COLORREF crKey,
    __in BYTE bAlpha,
    __in DWORD dwFlags
);

user32.dll, BOOL WINAPI ShowWindowAsync(
    __in  HWND hWnd,
    __in  int nCmdShow
);

user32.dll, BOOL WINAPI FlashWindowEx(
    __in PFLASHWINFO pfwi
);

user32.dll, BOOL WINAPI ShowOwnedPopups(
    __in  HWND hWnd,
    __in  BOOL fShow
);

user32.dll, BOOL WINAPI OpenIcon(
    __in  HWND hWnd
);

user32.dll, BOOL WINAPI SetWindowPos(
    __in HWND hWnd,
    __in_opt HWND hWndInsertAfter,
    __in int X,
    __in int Y,
    __in int cx,
    __in int cy,
    __in UINT uFlags
);

user32.dll, BOOL WINAPI GetWindowPlacement(
    __in HWND hWnd,
    __inout WINDOWPLACEMENT *lpwndpl
);

user32.dll, BOOL WINAPI SetWindowPlacement(
    __in HWND hWnd,
    __in CONST WINDOWPLACEMENT *lpwndpl
);

user32.dll, BOOL WINAPI GetWindowDisplayAffinity(
    __in HWND hWnd,
    __out DWORD* pdwAffinity
);

user32.dll, BOOL WINAPI SetWindowDisplayAffinity(
    __in HWND hWnd,
    __in DWORD dwAffinity
);

user32.dll, HDWP WINAPI BeginDeferWindowPos(
    __in int nNumWindows
);

user32.dll, HDWP WINAPI DeferWindowPos(
    __in HDWP hWinPosInfo,
    __in HWND hWnd,
    __in_opt HWND hWndInsertAfter,
    __in int x,
    __in int y,
    __in int cx,
    __in int cy,
    __in UINT uFlags
);

user32.dll, BOOL WINAPI EndDeferWindowPos(
    __in HDWP hWinPosInfo
);

user32.dll, BOOL WINAPI IsWindowVisible(
    __in HWND hWnd
);

user32.dll, BOOL WINAPI IsIconic(
    __in HWND hWnd
);

user32.dll, BOOL WINAPI AnyPopup(
    void aaa
);

user32.dll, BOOL WINAPI BringWindowToTop(
    __in HWND hWnd
);

user32.dll, BOOL WINAPI IsZoomed(
    __in HWND hWnd
);

user32.dll, HWND WINAPI CreateDialogParamA(
    __in_opt HINSTANCE hInstance,
    __in LPCSTR lpTemplateName,
    __in_opt HWND hWndParent,
    __in_opt DLGPROC lpDialogFunc,
    __in LPARAM dwInitParam
);

user32.dll, HWND WINAPI CreateDialogParamW(
    __in_opt HINSTANCE hInstance,
    __in LPCSTR lpTemplateName,
    __in_opt HWND hWndParent,
    __in_opt DLGPROC lpDialogFunc,
    __in LPARAM dwInitParam
);

user32.dll, HWND WINAPI CreateDialogIndirectParamA(
    __in_opt HINSTANCE hInstance,
    __in LPCDLGTEMPLATEA lpTemplate,
    __in_opt HWND hWndParent,
    __in_opt DLGPROC lpDialogFunc,
    __in LPARAM dwInitParam
);

user32.dll, HWND WINAPI CreateDialogIndirectParamW(
    __in_opt HINSTANCE hInstance,
    __in LPCDLGTEMPLATEA lpTemplate,
    __in_opt HWND hWndParent,
    __in_opt DLGPROC lpDialogFunc,
    __in LPARAM dwInitParam
);

user32.dll, INT_PTR WINAPI DialogBoxParamA(
    __in_opt HINSTANCE hInstance,
    __in LPCSTR lpTemplateName,
    __in_opt HWND hWndParent,
    __in_opt DLGPROC lpDialogFunc,
    __in LPARAM dwInitParam
);

user32.dll, INT_PTR WINAPI DialogBoxParamW(
    __in_opt HINSTANCE hInstance,
    __in LPCSTR lpTemplateName,
    __in_opt HWND hWndParent,
    __in_opt DLGPROC lpDialogFunc,
    __in LPARAM dwInitParam
);

user32.dll, INT_PTR WINAPI DialogBoxIndirectParamA(
    __in_opt HINSTANCE hInstance,
    __in LPCDLGTEMPLATEA hDialogTemplate,
    __in_opt HWND hWndParent,
    __in_opt DLGPROC lpDialogFunc,
    __in LPARAM dwInitParam
);

user32.dll, INT_PTR WINAPI DialogBoxIndirectParamW(
    __in_opt HINSTANCE hInstance,
    __in LPCDLGTEMPLATEA hDialogTemplate,
    __in_opt HWND hWndParent,
    __in_opt DLGPROC lpDialogFunc,
    __in LPARAM dwInitParam
);

user32.dll, BOOL WINAPI EndDialog(
    __in HWND hDlg,
    __in INT_PTR nResult
);

user32.dll, HWND WINAPI GetDlgItem(
    __in_opt HWND hDlg,
    __in int nIDDlgItem
);

user32.dll, BOOL WINAPI SetDlgItemInt(
    __in HWND hDlg,
    __in int nIDDlgItem,
    __in UINT uValue,
    __in BOOL bSigned
);

user32.dll, UINT WINAPI GetDlgItemInt(
    __in HWND hDlg,
    __in int nIDDlgItem,
    __out_opt BOOL *lpTranslated,
    __in BOOL bSigned
);

user32.dll, BOOL WINAPI SetDlgItemTextA(
    __in HWND hDlg,
    __in int nIDDlgItem,
    __in LPCSTR lpString
);

user32.dll, BOOL WINAPI SetDlgItemTextW(
    __in HWND hDlg,
    __in int nIDDlgItem,
    __in LPCSTR lpString
);

user32.dll, UINT WINAPI GetDlgItemTextA(
    __in HWND hDlg,
    __in int nIDDlgItem,
    __out_ecount LPWSTR lpString,
    __in int cchMax
);

user32.dll, UINT WINAPI GetDlgItemTextW(
    __in HWND hDlg,
    __in int nIDDlgItem,
    __out_ecount LPWSTR lpString,
    __in int cchMax
);

user32.dll, BOOL WINAPI CheckDlgButton(
    __in HWND hDlg,
    __in int nIDButton,
    __in UINT uCheck
);

user32.dll, BOOL WINAPI CheckRadioButton(
    __in HWND hDlg,
    __in int nIDFirstButton,
    __in int nIDLastButton,
    __in int nIDCheckButton
);

user32.dll, UINT WINAPI IsDlgButtonChecked(
    __in HWND hDlg,
    __in int nIDButton
);

user32.dll, LRESULT WINAPI SendDlgItemMessageA(
    __in HWND hDlg,
    __in int nIDDlgItem,
    __in UINT Msg,
    __in WPARAM wParam,
    __in LPARAM lParam
);

user32.dll, LRESULT WINAPI SendDlgItemMessageW(
    __in HWND hDlg,
    __in int nIDDlgItem,
    __in UINT Msg,
    __in WPARAM wParam,
    __in LPARAM lParam
);

user32.dll, HWND WINAPI GetNextDlgGroupItem(
    __in HWND hDlg,
    __in_opt HWND hCtl,
    __in BOOL bPrevious
);

user32.dll, HWND WINAPI GetNextDlgTabItem(
    __in HWND hDlg,
    __in_opt HWND hCtl,
    __in BOOL bPrevious
);

user32.dll, int WINAPI GetDlgCtrlID(
    __in HWND hWnd
);

user32.dll, long WINAPI GetDialogBaseUnits(
    void aaa
);

user32.dll, BOOL WINAPI CallMsgFilterA(
    __in LPMSG lpMsg,
    __in int nCode
);

user32.dll, BOOL WINAPI CallMsgFilterW(
    __in LPMSG lpMsg,
    __in int nCode
);

user32.dll, BOOL WINAPI OpenClipboard(
    __in_opt HWND hWndNewOwner
);

user32.dll, BOOL WINAPI CloseClipboard(
    void aaa
);

user32.dll, DWORD WINAPI GetClipboardSequenceNumber(
    void aaa
);

user32.dll, HWND WINAPI GetClipboardOwner(
    void aaa
);

user32.dll, HWND WINAPI SetClipboardViewer(
    __in HWND hWndNewViewer
);

user32.dll, HWND WINAPI GetClipboardViewer(
    void aaa
);

user32.dll, BOOL WINAPI ChangeClipboardChain(
    __in HWND hWndRemove,
    __in HWND hWndNewNext
);

user32.dll, HANDLE WINAPI SetClipboardData(
    __in UINT uFormat,
    __in_opt HANDLE hMem
);

user32.dll, HANDLE WINAPI GetClipboardData(
    __in UINT uFormat
);

user32.dll, UINT WINAPI RegisterClipboardFormatA(
    __in LPCSTR lpszFormat
);

user32.dll, UINT WINAPI RegisterClipboardFormatW(
    __in LPCSTR lpszFormat
);

user32.dll, int WINAPI CountClipboardFormats(
    void aaa
);

user32.dll, UINT WINAPI EnumClipboardFormats(
    __in UINT format
);

user32.dll, int WINAPI GetClipboardFormatNameA(
    __in UINT format,
    __out_ecount LPSTR lpszFormatName,
    __in int cchMaxCount
);

user32.dll, int WINAPI GetClipboardFormatNameW(
    __in UINT format,
    __out_ecount LPSTR lpszFormatName,
    __in int cchMaxCount
);

user32.dll, BOOL WINAPI EmptyClipboard(
    void aaa
);

user32.dll, BOOL WINAPI IsClipboardFormatAvailable(
    __in UINT format
);

user32.dll, int WINAPI GetPriorityClipboardFormat(
    __in_ecount UINT *paFormatPriorityList,
    __in int cFormats
);

user32.dll, BOOL WINAPI AddClipboardFormatListener(
    __in HWND hwnd
);

user32.dll, BOOL WINAPI RemoveClipboardFormatListener(
    __in HWND hwnd
);

user32.dll, BOOL WINAPI GetUpdatedClipboardFormats(
    __out_ecount PUINT lpuiFormats,
    __in UINT cFormats,
    __out PUINT pcFormatsOut
);

user32.dll, BOOL WINAPI CharToOemA(
    __in_xcount LPCSTR pSrc,
    __out_xcount LPSTR pDst
);

user32.dll, BOOL WINAPI CharToOemW(
    __in_xcount LPCSTR pSrc,
    __out_xcount LPSTR pDst
);

user32.dll, BOOL WINAPI OemToCharA(
    __in_xcount LPCSTR pSrc,
    __out_xcount LPSTR pDst
);

user32.dll, BOOL WINAPI OemToCharW(
    __in_xcount LPCSTR pSrc,
    __out_xcount LPSTR pDst
);

user32.dll,  BOOL WINAPI CharToOemBuffA(
    __in LPCSTR lpszSrc,
    __out_ecount LPSTR lpszDst,
    __in DWORD cchDstLength
);

user32.dll,  BOOL WINAPI CharToOemBuffW(
    __in LPCSTR lpszSrc,
    __out_ecount LPSTR lpszDst,
    __in DWORD cchDstLength
);

user32.dll, BOOL WINAPI OemToCharBuffA(
    __in LPCSTR lpszSrc,
    __out_ecount LPWSTR lpszDst,
    __in DWORD cchDstLength
);

user32.dll, BOOL WINAPI OemToCharBuffW(
    __in LPCSTR lpszSrc,
    __out_ecount LPWSTR lpszDst,
    __in DWORD cchDstLength
);

user32.dll, LPSTR WINAPI CharUpperA(
    __inout LPSTR lpsz
);

user32.dll, LPSTR WINAPI CharUpperW(
    __inout LPSTR lpsz
);

user32.dll, DWORD WINAPI CharUpperBuffA(
    __inout_ecount LPSTR lpsz,
    __in DWORD cchLength
);

user32.dll, DWORD WINAPI CharUpperBuffW(
    __inout_ecount LPSTR lpsz,
    __in DWORD cchLength
);

user32.dll, LPSTR WINAPI CharLowerA(
    __inout LPSTR lpsz
);

user32.dll, LPSTR WINAPI CharLowerW(
    __inout LPSTR lpsz
);

user32.dll,  DWORD WINAPI CharLowerBuffA(
    __inout_ecount LPSTR lpsz,
    __in DWORD cchLength
);

user32.dll,  DWORD WINAPI CharLowerBuffW(
    __inout_ecount LPSTR lpsz,
    __in DWORD cchLength
);

user32.dll, LPSTR WINAPI CharPrevA(
    __in LPCSTR lpszStart,
    __in LPCSTR lpszCurrent
);

user32.dll, LPSTR WINAPI CharPrevW(
    __in LPCSTR lpszStart,
    __in LPCSTR lpszCurrent
);

user32.dll, LPSTR WINAPI CharNextExA(
     __in WORD CodePage,
     __in LPCSTR lpCurrentChar,
     __in DWORD dwFlags
);

user32.dll, LPSTR WINAPI CharNextExW(
     __in WORD CodePage,
     __in LPCSTR lpCurrentChar,
     __in DWORD dwFlags
);

user32.dll, BOOL WINAPI IsCharAlphaA(
    __in CHAR ch
);

user32.dll, BOOL WINAPI IsCharAlphaW(
    __in CHAR ch
);

user32.dll, BOOL WINAPI IsCharAlphaNumericA(
    __in CHAR ch
);

user32.dll, BOOL WINAPI IsCharAlphaNumericW(
    __in CHAR ch
);

user32.dll, BOOL WINAPI IsCharUpperA(
    __in CHAR ch
);

user32.dll, BOOL WINAPI IsCharUpperW(
    __in CHAR ch
);

user32.dll, BOOL WINAPI IsCharLowerA(
    __in CHAR ch
);

user32.dll, BOOL WINAPI IsCharLowerW(
    __in CHAR ch
);

user32.dll, HWND WINAPI SetFocus(
    __in_opt HWND hWnd
);

user32.dll, HWND WINAPI GetFocus(
    void aaa
);

user32.dll, UINT WINAPI GetKBCodePage(
    void aaa
);

user32.dll, SHORT WINAPI GetKeyState(
    __in int nVirtKey
);

user32.dll, SHORT WINAPI GetAsyncKeyState(
    __in int vKey
);

user32.dll, BOOL WINAPI GetKeyboardState(
    __out_ecount PBYTE lpKeyState
);

user32.dll, BOOL WINAPI SetKeyboardState(
    __in_ecount LPBYTE lpKeyState
);

user32.dll, int WINAPI GetKeyNameTextA(
    __in LONG lParam,
    __out_ecount LPSTR lpString,
    __in int cchSize
);

user32.dll, int WINAPI GetKeyNameTextW(
    __in LONG lParam,
    __out_ecount LPSTR lpString,
    __in int cchSize
);

user32.dll, int WINAPI GetKeyboardType(
    __in int nTypeFlag
);

user32.dll, int WINAPI ToAscii(
    __in UINT uVirtKey,
    __in UINT uScanCode,
    __in_ecount_opt CONST BYTE *lpKeyState,
    __out LPWORD lpChar,
    __in UINT uFlags
);

user32.dll, int WINAPI ToAsciiEx(
    __in UINT uVirtKey,
    __in UINT uScanCode,
    __in_ecount_opt CONST BYTE *lpKeyState,
    __out LPWORD lpChar,
    __in UINT uFlags,
    __in_opt HKL dwhkl
);

user32.dll, int WINAPI ToUnicodeA(
    __in UINT wVirtKey,
    __in UINT wScanCode,
    __in_bcount_opt CONST BYTE *lpKeyState,
    __out_ecount LPWSTR pwszBuff,
    __in int cchBuff,
    __in UINT wFlags
);

user32.dll, int WINAPI ToUnicodeW(
    __in UINT wVirtKey,
    __in UINT wScanCode,
    __in_bcount_opt CONST BYTE *lpKeyState,
    __out_ecount LPWSTR pwszBuff,
    __in int cchBuff,
    __in UINT wFlags
);

user32.dll, DWORD WINAPI OemKeyScan(
    __in WORD wOemChar
);

user32.dll, SHORT WINAPI VkKeyScanA(
    __in CHAR ch
);

user32.dll, SHORT WINAPI VkKeyScanW(
    __in CHAR ch
);

user32.dll, SHORT WINAPI VkKeyScanExA(
    __in CHAR ch,
    __in HKL dwhkl
);

user32.dll, SHORT WINAPI VkKeyScanExW(
    __in CHAR ch,
    __in HKL dwhkl
);

user32.dll, VOID WINAPI keybd_event(
    __in BYTE bVk,
    __in BYTE bScan,
    __in DWORD dwFlags,
    __in ULONG_PTR dwExtraInfo
);

user32.dll, VOID WINAPI mouse_event(
    __in DWORD dwFlags,
    __in DWORD dx,
    __in DWORD dy,
    __in DWORD dwData,
    __in ULONG_PTR dwExtraInfo
);

user32.dll, UINT WINAPI SendInput(
    __in UINT cInputs,
    __in_ecount LPINPUT pInputs,
    __in int cbSize
);

user32.dll, BOOL WINAPI GetTouchInputInfo(
    __in HTOUCHINPUT hTouchInput,
    __in UINT cInputs,
    __out_ecount PTOUCHINPUT pInputs,
    __in int cbSize
);

user32.dll, BOOL WINAPI CloseTouchInputHandle(
    __in HTOUCHINPUT hTouchInput
);

user32.dll, BOOL WINAPI UnregisterTouchWindow(
    __in HWND hwnd
);

user32.dll, BOOL WINAPI GetLastInputInfo(
    __out PLASTINPUTINFO plii
);

user32.dll, UINT WINAPI MapVirtualKeyA(
    __in UINT uCode,
    __in UINT uMapType
);

user32.dll, UINT WINAPI MapVirtualKeyW(
    __in UINT uCode,
    __in UINT uMapType
);

user32.dll, UINT WINAPI MapVirtualKeyExA(
    __in UINT uCode,
    __in UINT uMapType,
    __in_opt HKL dwhkl
);

user32.dll, UINT WINAPI MapVirtualKeyExW(
    __in UINT uCode,
    __in UINT uMapType,
    __in_opt HKL dwhkl
);

user32.dll, BOOL WINAPI GetInputState(
    void aaa
);

user32.dll, DWORD WINAPI GetQueueStatus(
    __in UINT flags
);

user32.dll, HWND WINAPI GetCapture(
    void aaa
);

user32.dll, HWND WINAPI SetCapture(
    __in HWND hWnd
);

user32.dll, BOOL WINAPI ReleaseCapture(
    void aaa
);

user32.dll, DWORD WINAPI MsgWaitForMultipleObjects(
    __in DWORD nCount,
    __in_ecount_opt CONST HANDLE *pHandles,
    __in BOOL fWaitAll,
    __in DWORD dwMilliseconds,
    __in DWORD dwWakeMask
);

user32.dll, DWORD WINAPI MsgWaitForMultipleObjectsEx(
    __in DWORD nCount,
    __in_ecount_opt CONST HANDLE *pHandles,
    __in DWORD dwMilliseconds,
    __in DWORD dwWakeMask,
    __in DWORD dwFlags
);

user32.dll, UINT_PTR WINAPI SetTimer(
    __in_opt HWND hWnd,
    __in UINT_PTR nIDEvent,
    __in UINT uElapse,
    __in_opt TIMERPROC lpTimerFunc
);

user32.dll, BOOL WINAPI KillTimer(
    __in_opt HWND hWnd,
    __in UINT_PTR uIDEvent
);

user32.dll, BOOL WINAPI IsWindowUnicode(
    __in HWND hWnd
);

user32.dll, BOOL WINAPI IsWindowEnabled(
    __in HWND hWnd
);

user32.dll, HACCEL WINAPI LoadAcceleratorsA(
    __in_opt HINSTANCE hInstance,
    __in LPCSTR lpTableName
);

user32.dll, HACCEL WINAPI LoadAcceleratorsW(
    __in_opt HINSTANCE hInstance,
    __in LPCSTR lpTableName
);

user32.dll, HACCEL WINAPI CreateAcceleratorTableA(
    __in_ecount LPACCEL paccel,
    __in int cAccel
);

user32.dll, HACCEL WINAPI CreateAcceleratorTableW(
    __in_ecount LPACCEL paccel,
    __in int cAccel
);

user32.dll, BOOL WINAPI DestroyAcceleratorTable(
    __in HACCEL hAccel
);

user32.dll, int WINAPI CopyAcceleratorTableA(
    __in HACCEL hAccelSrc,
    __out_ecount_part_opt LPACCEL lpAccelDst,
    __in int cAccelEntries
);

user32.dll, int WINAPI CopyAcceleratorTableW(
    __in HACCEL hAccelSrc,
    __out_ecount_part_opt LPACCEL lpAccelDst,
    __in int cAccelEntries
);

user32.dll, int WINAPI TranslateAcceleratorA(
    __in HWND hWnd,
    __in HACCEL hAccTable,
    __in LPMSG lpMsg
);

user32.dll, int WINAPI TranslateAcceleratorW(
    __in HWND hWnd,
    __in HACCEL hAccTable,
    __in LPMSG lpMsg
);

user32.dll, int WINAPI GetSystemMetrics(
    __in int nIndex
);

user32.dll, HMENU WINAPI LoadMenuA(
    __in_opt HINSTANCE hInstance,
    __in LPCSTR lpMenuName
);

user32.dll, HMENU WINAPI LoadMenuW(
    __in_opt HINSTANCE hInstance,
    __in LPCSTR lpMenuName
);

user32.dll, HMENU WINAPI LoadMenuIndirectA(
    __in CONST MENUTEMPLATEA *lpMenuTemplate
);

user32.dll, HMENU WINAPI LoadMenuIndirectW(
    __in CONST MENUTEMPLATEA *lpMenuTemplate
);

user32.dll, HMENU WINAPI GetMenu(
    __in HWND hWnd
);

user32.dll, BOOL WINAPI SetMenu(
    __in HWND hWnd,
    __in_opt HMENU hMenu
);

user32.dll, BOOL WINAPI ChangeMenuA(
    __in HMENU hMenu,
    __in UINT cmd,
    __in_opt LPCSTR lpszNewItem,
    __in UINT cmdInsert,
    __in UINT flags
);

user32.dll, BOOL WINAPI ChangeMenuW(
    __in HMENU hMenu,
    __in UINT cmd,
    __in_opt LPCSTR lpszNewItem,
    __in UINT cmdInsert,
    __in UINT flags
);

user32.dll, BOOL WINAPI HiliteMenuItem(
    __in HWND hWnd,
    __in HMENU hMenu,
    __in UINT uIDHiliteItem,
    __in UINT uHilite
);

user32.dll, int WINAPI GetMenuStringA(
    __in HMENU hMenu,
    __in UINT uIDItem,
    __out_ecount_opt LPSTR lpString,
    __in int cchMax,
    __in UINT flags
);

user32.dll, int WINAPI GetMenuStringW(
    __in HMENU hMenu,
    __in UINT uIDItem,
    __out_ecount_opt LPSTR lpString,
    __in int cchMax,
    __in UINT flags
);

user32.dll, UINT WINAPI GetMenuState(
    __in HMENU hMenu,
    __in UINT uId,
    __in UINT uFlags
);

user32.dll, BOOL WINAPI DrawMenuBar(
    __in HWND hWnd
);

user32.dll, HMENU WINAPI GetSystemMenu(
    __in HWND hWnd,
    __in BOOL bRevert
);

user32.dll, HMENU WINAPI CreateMenu(
    void aaa
);

user32.dll, HMENU WINAPI CreatePopupMenu(
    void aaa
);

user32.dll, BOOL WINAPI DestroyMenu(
    __in HMENU hMenu
);

user32.dll, DWORD WINAPI CheckMenuItem(
    __in HMENU hMenu,
    __in UINT uIDCheckItem,
    __in UINT uCheck
);

user32.dll, BOOL WINAPI EnableMenuItem(
    __in HMENU hMenu,
    __in UINT uIDEnableItem,
    __in UINT uEnable
);

user32.dll, HMENU WINAPI GetSubMenu(
    __in HMENU hMenu,
    __in int nPos
);

user32.dll, UINT WINAPI GetMenuItemID(
    __in HMENU hMenu,
    __in int nPos
);

user32.dll, int WINAPI GetMenuItemCount(
    __in_opt HMENU hMenu
);

user32.dll, BOOL WINAPI InsertMenuA(
    __in HMENU hMenu,
    __in UINT uPosition,
    __in UINT uFlags,
    __in UINT_PTR uIDNewItem,
    __in_opt LPCSTR lpNewItem
);

user32.dll, BOOL WINAPI InsertMenuW(
    __in HMENU hMenu,
    __in UINT uPosition,
    __in UINT uFlags,
    __in UINT_PTR uIDNewItem,
    __in_opt LPCSTR lpNewItem
);

user32.dll, BOOL WINAPI AppendMenuA(
    __in HMENU hMenu,
    __in UINT uFlags,
    __in UINT_PTR uIDNewItem,
    __in_opt LPCSTR lpNewItem
);

user32.dll, BOOL WINAPI AppendMenuW(
    __in HMENU hMenu,
    __in UINT uFlags,
    __in UINT_PTR uIDNewItem,
    __in_opt LPCSTR lpNewItem
);

user32.dll, BOOL WINAPI ModifyMenuA(
    __in HMENU hMnu,
    __in UINT uPosition,
    __in UINT uFlags,
    __in UINT_PTR uIDNewItem,
    __in_opt LPCSTR lpNewItem
);

user32.dll, BOOL WINAPI ModifyMenuW(
    __in HMENU hMnu,
    __in UINT uPosition,
    __in UINT uFlags,
    __in UINT_PTR uIDNewItem,
    __in_opt LPCSTR lpNewItem
);

user32.dll, BOOL WINAPI RemoveMenu(
    __in HMENU hMenu,
    __in UINT uPosition,
    __in UINT uFlags
);

user32.dll, BOOL WINAPI DeleteMenu(
    __in HMENU hMenu,
    __in UINT uPosition,
    __in UINT uFlags
);

user32.dll, BOOL WINAPI SetMenuItemBitmaps(
    __in HMENU hMenu,
    __in UINT uPosition,
    __in UINT uFlags,
    __in_opt HBITMAP hBitmapUnchecked,
    __in_opt HBITMAP hBitmapChecked
);

user32.dll, LONG WINAPI GetMenuCheckMarkDimensions(
    void aaa
);

user32.dll, BOOL WINAPI TrackPopupMenu(
    __in HMENU hMenu,
    __in UINT uFlags,
    __in int x,
    __in int y,
    __in int nReserved,
    __in HWND hWnd,
    __in_opt CONST RECT *prcRect
);

user32.dll, BOOL WINAPI TrackPopupMenuEx(
    __in HMENU bbb,
    __in UINT ccc,
    __in int ddd,
    __in int eee,
    __in HWND fff,
    __in_opt LPTPMPARAMS ggg
);

user32.dll, BOOL WINAPI GetMenuInfo(
    __in HMENU bbb,
    __inout LPMENUINFO ccc
);

user32.dll, BOOL WINAPI SetMenuInfo(
    __in HMENU bbb,
    __in LPCMENUINFO ccc
);

user32.dll, BOOL WINAPI EndMenu(
        void aaa
);

user32.dll, BOOL WINAPI InsertMenuItemA(
    __in HMENU hmenu,
    __in UINT item,
    __in BOOL fByPosition,
    __in LPCMENUITEMINFOA lpmi
);

user32.dll, BOOL WINAPI InsertMenuItemW(
    __in HMENU hmenu,
    __in UINT item,
    __in BOOL fByPosition,
    __in LPCMENUITEMINFOA lpmi
);

user32.dll, BOOL WINAPI GetMenuItemInfoA(
    __in HMENU hmenu,
    __in UINT item,
    __in BOOL fByPosition,
    __inout LPMENUITEMINFOA lpmii
);

user32.dll, BOOL WINAPI GetMenuItemInfoW(
    __in HMENU hmenu,
    __in UINT item,
    __in BOOL fByPosition,
    __inout LPMENUITEMINFOA lpmii
);

user32.dll, BOOL WINAPI SetMenuItemInfoA(
    __in HMENU hmenu,
    __in UINT item,
    __in BOOL fByPositon,
    __in LPCMENUITEMINFOA lpmii
);

user32.dll, BOOL WINAPI SetMenuItemInfoW(
    __in HMENU hmenu,
    __in UINT item,
    __in BOOL fByPositon,
    __in LPCMENUITEMINFOA lpmii
);

user32.dll, UINT WINAPI GetMenuDefaultItem(
    __in HMENU hMenu,
    __in UINT fByPos,
    __in UINT gmdiFlags
);

user32.dll, BOOL WINAPI SetMenuDefaultItem(
    __in HMENU hMenu,
    __in UINT uItem,
    __in UINT fByPos
);

user32.dll, BOOL WINAPI GetMenuItemRect(
    __in_opt HWND hWnd,
    __in HMENU hMenu,
    __in UINT uItem,
    __out LPRECT lprcItem
);

user32.dll, int WINAPI MenuItemFromPoint(
    __in_opt HWND hWnd,
    __in HMENU hMenu,
    __in POINT ptScreen
);

user32.dll, DWORD WINAPI DragObject(
    __in HWND hwndParent,
    __in HWND hwndFrom,
    __in UINT fmt,
    __in ULONG_PTR data,
    __in_opt HCURSOR hcur
);

user32.dll, BOOL WINAPI DragDetect(
    __in HWND hwnd,
    __in POINT pt
);

user32.dll, BOOL WINAPI DrawIcon(
    __in HDC hDC,
    __in int X,
    __in int Y,
    __in HICON hIcon
);

user32.dll, int WINAPI DrawTextA(
    __in HDC hdc,
    __inout_ecount_opt LPCSTR lpchText,
    __in int cchText,
    __inout LPRECT lprc,
    __in UINT format
);

user32.dll, int WINAPI DrawTextW(
    __in HDC hdc,
    __inout_ecount_opt LPCSTR lpchText,
    __in int cchText,
    __inout LPRECT lprc,
    __in UINT format
);

user32.dll, int WINAPI DrawTextExA(
    __in HDC hdc,
    __inout_ecount_opt LPSTR lpchText,
    __in int cchText,
    __inout LPRECT lprc,
    __in UINT format,
    __in_opt LPDRAWTEXTPARAMS lpdtp
);

user32.dll, int WINAPI DrawTextExW(
    __in HDC hdc,
    __inout_ecount_opt LPSTR lpchText,
    __in int cchText,
    __inout LPRECT lprc,
    __in UINT format,
    __in_opt LPDRAWTEXTPARAMS lpdtp
);

user32.dll, BOOL WINAPI GrayStringA(
    __in HDC hDC,
    __in_opt HBRUSH hBrush,
    __in_opt GRAYSTRINGPROC lpOutputFunc,
    __in LPARAM lpData,
    __in int nCount,
    __in int X,
    __in int Y,
    __in int nWidth,
    __in int nHeight
);

user32.dll, BOOL WINAPI GrayStringW(
    __in HDC hDC,
    __in_opt HBRUSH hBrush,
    __in_opt GRAYSTRINGPROC lpOutputFunc,
    __in LPARAM lpData,
    __in int nCount,
    __in int X,
    __in int Y,
    __in int nWidth,
    __in int nHeight
);

user32.dll, BOOL WINAPI DrawStateA(
    __in HDC hdc,
    __in_opt HBRUSH hbrFore,
    __in_opt DRAWSTATEPROC qfnCallBack,
    __in LPARAM lData,
    __in WPARAM wData,
    __in int x,
    __in int y,
    __in int cx,
    __in int cy,
    __in UINT uFlags
);

user32.dll, BOOL WINAPI DrawStateW(
    __in HDC hdc,
    __in_opt HBRUSH hbrFore,
    __in_opt DRAWSTATEPROC qfnCallBack,
    __in LPARAM lData,
    __in WPARAM wData,
    __in int x,
    __in int y,
    __in int cx,
    __in int cy,
    __in UINT uFlags
);

user32.dll, LONG WINAPI TabbedTextOutA(
    __in HDC hdc,
    __in int x,
    __in int y,
    __in_ecount LPCSTR lpString,
    __in int chCount,
    __in int nTabPositions,
    __in_ecount_opt CONST INT *lpnTabStopPositions,
    __in int nTabOrigin
);

user32.dll, LONG WINAPI TabbedTextOutW(
    __in HDC hdc,
    __in int x,
    __in int y,
    __in_ecount LPCSTR lpString,
    __in int chCount,
    __in int nTabPositions,
    __in_ecount_opt CONST INT *lpnTabStopPositions,
    __in int nTabOrigin
);

user32.dll, DWORD WINAPI GetTabbedTextExtentA(
    __in HDC hdc,
    __in_ecount LPCSTR lpString,
    __in int chCount,
    __in int nTabPositions,
    __in_ecount_opt CONST INT *lpnTabStopPositions
);

user32.dll, DWORD WINAPI GetTabbedTextExtentW(
    __in HDC hdc,
    __in_ecount LPCSTR lpString,
    __in int chCount,
    __in int nTabPositions,
    __in_ecount_opt CONST INT *lpnTabStopPositions
);

user32.dll, BOOL WINAPI UpdateWindow(
    __in HWND hWnd
);

user32.dll, HWND WINAPI SetActiveWindow(
    __in HWND hWnd
);

user32.dll, HWND WINAPI GetForegroundWindow(
    void aaa
);

user32.dll, BOOL WINAPI PaintDesktop(
    __in HDC hdc
);

user32.dll, VOID WINAPI SwitchToThisWindow(
    __in HWND hwnd,
    __in BOOL fUnknown
);

user32.dll, BOOL WINAPI SetForegroundWindow(
    __in HWND hWnd
);

user32.dll, BOOL WINAPI AllowSetForegroundWindow(
    __in DWORD dwProcessId
);

user32.dll, BOOL WINAPI LockSetForegroundWindow(
    __in UINT uLockCode
);

user32.dll, HWND WINAPI WindowFromDC(
    __in HDC hDC
);

user32.dll, HDC WINAPI GetDC(
    __in_opt HWND hWnd
);

user32.dll, HDC WINAPI GetDCEx(
    __in_opt HWND hWnd,
    __in_opt HRGN hrgnClip,
    __in DWORD flags
);

user32.dll, HDC WINAPI GetWindowDC(
    __in_opt HWND hWnd
);

user32.dll, int WINAPI ReleaseDC(
    __in_opt HWND hWnd,
    __in HDC hDC
);

user32.dll, HDC WINAPI BeginPaint(
    __in HWND hWnd,
    __out LPPAINTSTRUCT lpPaint
);

user32.dll, BOOL WINAPI EndPaint(
    __in HWND hWnd,
    __in CONST PAINTSTRUCT *lpPaint
);

user32.dll, BOOL WINAPI GetUpdateRect(
    __in HWND hWnd,
    __out_opt LPRECT lpRect,
    __in BOOL bErase
);

user32.dll, int WINAPI GetUpdateRgn(
    __in HWND hWnd,
    __in HRGN hRgn,
    __in BOOL bErase
);

user32.dll, int WINAPI SetWindowRgn(
    __in HWND hWnd,
    __in_opt HRGN hRgn,
    __in BOOL bRedraw
);

user32.dll, int WINAPI GetWindowRgn(
    __in HWND hWnd,
    __in HRGN hRgn
);

user32.dll, int WINAPI GetWindowRgnBox(
    __in HWND hWnd,
    __out LPRECT lprc
);

user32.dll, int WINAPI ExcludeUpdateRgn(
    __in HDC hDC,
    __in HWND hWnd
);

user32.dll, BOOL WINAPI InvalidateRect(
    __in_opt HWND hWnd,
    __in_opt CONST RECT *lpRect,
    __in BOOL bErase
);

user32.dll, BOOL WINAPI ValidateRect(
    __in_opt HWND hWnd,
    __in_opt CONST RECT *lpRect
);

user32.dll, BOOL WINAPI InvalidateRgn(
    __in HWND hWnd,
    __in_opt HRGN hRgn,
    __in BOOL bErase
);

user32.dll, BOOL WINAPI ValidateRgn(
    __in HWND hWnd,
    __in_opt HRGN hRgn
);

user32.dll, BOOL WINAPI RedrawWindow(
    __in_opt HWND hWnd,
    __in_opt CONST RECT *lprcUpdate,
    __in_opt HRGN hrgnUpdate,
    __in UINT flags
);

user32.dll, BOOL WINAPI LockWindowUpdate(
    __in_opt HWND hWndLock
);

user32.dll, BOOL WINAPI ScrollWindow(
    __in HWND hWnd,
    __in int XAmount,
    __in int YAmount,
    __in_opt CONST RECT *lpRect,
    __in_opt CONST RECT *lpClipRect
);

user32.dll, BOOL WINAPI ScrollDC(
    __in HDC hDC,
    __in int dx,
    __in int dy,
    __in_opt CONST RECT *lprcScroll,
    __in_opt CONST RECT *lprcClip,
    __in_opt HRGN hrgnUpdate,
    __out_opt LPRECT lprcUpdate
);

user32.dll, int WINAPI ScrollWindowEx(
    __in HWND hWnd,
    __in int dx,
    __in int dy,
    __in_opt CONST RECT *prcScroll,
    __in_opt CONST RECT *prcClip,
    __in_opt HRGN hrgnUpdate,
    __out_opt LPRECT prcUpdate,
    __in UINT flags
);

user32.dll, int WINAPI SetScrollPos(
    __in HWND hWnd,
    __in int nBar,
    __in int nPos,
    __in BOOL bRedraw
);

user32.dll, int WINAPI GetScrollPos(
    __in HWND hWnd,
    __in int nBar
);

user32.dll, BOOL WINAPI SetScrollRange(
    __in HWND hWnd,
    __in int nBar,
    __in int nMinPos,
    __in int nMaxPos,
    __in BOOL bRedraw
);

user32.dll, BOOL WINAPI GetScrollRange(
    __in HWND hWnd,
    __in int nBar,
    __out LPINT lpMinPos,
    __out LPINT lpMaxPos
);

user32.dll, BOOL WINAPI ShowScrollBar(
    __in HWND hWnd,
    __in int wBar,
    __in BOOL bShow
);

user32.dll, BOOL WINAPI EnableScrollBar(
    __in HWND hWnd,
    __in UINT wSBflags,
    __in UINT wArrows
);

user32.dll, BOOL WINAPI SetPropA(
    __in HWND hWnd,
    __in LPCSTR lpString,
    __in_opt HANDLE hData
);

user32.dll, BOOL WINAPI SetPropW(
    __in HWND hWnd,
    __in LPCSTR lpString,
    __in_opt HANDLE hData
);

user32.dll, HANDLE WINAPI GetPropA(
    __in HWND hWnd,
    __in LPCSTR lpString
);

user32.dll, HANDLE WINAPI GetPropW(
    __in HWND hWnd,
    __in LPCSTR lpString
);

user32.dll, HANDLE WINAPI RemovePropA(
    __in HWND hWnd,
    __in LPCSTR lpString
);

user32.dll, HANDLE WINAPI RemovePropW(
    __in HWND hWnd,
    __in LPCSTR lpString
);

user32.dll, int WINAPI EnumPropsExA(
    __in HWND hWnd,
    __in PROPENUMPROCEXA lpEnumFunc,
    __in LPARAM lParam
);

user32.dll, int WINAPI EnumPropsExW(
    __in HWND hWnd,
    __in PROPENUMPROCEXA lpEnumFunc,
    __in LPARAM lParam
);

user32.dll, int WINAPI EnumPropsA(
    __in HWND hWnd,
    __in PROPENUMPROCA lpEnumFunc
);

user32.dll, int WINAPI EnumPropsW(
    __in HWND hWnd,
    __in PROPENUMPROCA lpEnumFunc
);

user32.dll, BOOL WINAPI SetWindowTextA(
    __in HWND hWnd,
    __in_opt LPCSTR lpString
);

user32.dll, BOOL WINAPI SetWindowTextW(
    __in HWND hWnd,
    __in_opt LPCSTR lpString
);

user32.dll, int WINAPI GetWindowTextA(
    __in HWND hWnd,
    __out_ecount LPSTR lpString,
    __in int nMaxCount
);

user32.dll, int WINAPI GetWindowTextW(
    __in HWND hWnd,
    __out_ecount LPSTR lpString,
    __in int nMaxCount
);

user32.dll, int WINAPI GetWindowTextLengthA(
    __in HWND hWnd
);

user32.dll, int WINAPI GetWindowTextLengthW(
    __in HWND hWnd
);

user32.dll, BOOL WINAPI GetClientRect(
    __in HWND hWnd,
    __out LPRECT lpRect
);

user32.dll, BOOL WINAPI GetWindowRect(
    __in HWND hWnd,
    __out LPRECT lpRect
);

user32.dll, BOOL WINAPI AdjustWindowRect(
    __inout LPRECT lpRect,
    __in DWORD dwStyle,
    __in BOOL bMenu
);

user32.dll, BOOL WINAPI AdjustWindowRectEx(
    __inout LPRECT lpRect,
    __in DWORD dwStyle,
    __in BOOL bMenu,
    __in DWORD dwExStyle
);

user32.dll, BOOL WINAPI SetWindowContextHelpId(
    __in HWND bbb,
    __in DWORD ccc
);

user32.dll, DWORD WINAPI GetWindowContextHelpId(
    __in HWND bbb
);

user32.dll, BOOL WINAPI SetMenuContextHelpId(
    __in HMENU bbb,
    __in DWORD ccc
);

user32.dll, DWORD WINAPI GetMenuContextHelpId(
    __in HMENU bbb
);

user32.dll, int WINAPI MessageBoxA(
    __in_opt HWND hWnd,
    __in_opt LPCSTR lpText,
    __in_opt LPCSTR lpCaption,
    __in UINT uType
);

user32.dll, int WINAPI MessageBoxW(
    __in_opt HWND hWnd,
    __in_opt LPCSTR lpText,
    __in_opt LPCSTR lpCaption,
    __in UINT uType
);

user32.dll, int WINAPI MessageBoxExA(
    __in_opt HWND hWnd,
    __in_opt LPCSTR lpText,
    __in_opt LPCSTR lpCaption,
    __in UINT uType,
    __in WORD wLanguageId
);

user32.dll, int WINAPI MessageBoxExW(
    __in_opt HWND hWnd,
    __in_opt LPCSTR lpText,
    __in_opt LPCSTR lpCaption,
    __in UINT uType,
    __in WORD wLanguageId
);

user32.dll, int WINAPI MessageBoxIndirectA(
    __in CONST MSGBOXPARAMSA * lpmbp
);

user32.dll, int WINAPI MessageBoxIndirectW(
    __in CONST MSGBOXPARAMSA * lpmbp
);

user32.dll, BOOL WINAPI MessageBeep(
    __in UINT uType
);

user32.dll, int WINAPI ShowCursor(
    __in BOOL bShow
);

user32.dll, BOOL WINAPI SetCursorPos(
    __in int X,
    __in int Y
);

user32.dll, BOOL WINAPI SetPhysicalCursorPos(
    __in int X,
    __in int Y
);

user32.dll, HCURSOR WINAPI SetCursor(
    __in_opt HCURSOR hCursor
);

user32.dll, BOOL WINAPI GetCursorPos(
    __out LPPOINT lpPoint
);

user32.dll, BOOL WINAPI GetPhysicalCursorPos(
    __out LPPOINT lpPoint
);

user32.dll, BOOL WINAPI ClipCursor(
    __in_opt CONST RECT *lpRect
);

user32.dll, BOOL WINAPI GetClipCursor(
    __out LPRECT lpRect
);

user32.dll, HCURSOR WINAPI GetCursor(
    void aaa
);

user32.dll, BOOL WINAPI CreateCaret(
    __in HWND hWnd,
    __in_opt HBITMAP hBitmap,
    __in int nWidth,
    __in int nHeight
);

user32.dll, UINT WINAPI GetCaretBlinkTime(
    void aaa
);

user32.dll, BOOL WINAPI SetCaretBlinkTime(
    __in UINT uMSeconds
);

user32.dll, BOOL WINAPI DestroyCaret(
    void aaa
);

user32.dll, BOOL WINAPI HideCaret(
    __in_opt HWND hWnd
);

user32.dll, BOOL WINAPI ShowCaret(
    __in_opt HWND hWnd
);

user32.dll, BOOL WINAPI SetCaretPos(
    __in int X,
    __in int Y
);

user32.dll, BOOL WINAPI GetCaretPos(
    __out LPPOINT lpPoint
);

user32.dll, BOOL WINAPI ClientToScreen(
    __in HWND hWnd,
    __inout LPPOINT lpPoint
);

user32.dll, BOOL WINAPI ScreenToClient(
    __in HWND hWnd,
    __inout LPPOINT lpPoint
);

user32.dll, BOOL WINAPI LogicalToPhysicalPoint(
    __in HWND hWnd,
    __inout LPPOINT lpPoint
);

user32.dll, BOOL WINAPI PhysicalToLogicalPoint(
    __in HWND hWnd,
    __inout LPPOINT lpPoint
);

user32.dll, int WINAPI MapWindowPoints(
    __in_opt HWND hWndFrom,
    __in_opt HWND hWndTo,
    __inout_ecount LPPOINT lpPoints,
    __in UINT cPoints
);

user32.dll, HWND WINAPI WindowFromPoint(
    __in POINT Point
);

user32.dll, HWND WINAPI ChildWindowFromPoint(
    __in HWND hWndParent,
    __in POINT Point
);

user32.dll, HWND WINAPI ChildWindowFromPointEx(
    __in HWND hwnd,
    __in POINT pt,
    __in UINT flags
);

user32.dll, DWORD WINAPI GetSysColor(
    __in int nIndex
);

user32.dll, HBRUSH WINAPI GetSysColorBrush(
    __in int nIndex
);

user32.dll, BOOL WINAPI SetSysColors(
    __in int cElements,
    __in_ecount CONST INT * lpaElements,
    __in_ecount CONST COLORREF * lpaRgbValues
);

user32.dll, BOOL WINAPI DrawFocusRect(
    __in HDC hDC,
    __in CONST RECT * lprc
);

user32.dll, int WINAPI FillRect(
    __in HDC hDC,
    __in CONST RECT *lprc,
    __in HBRUSH hbr
);

user32.dll, int WINAPI FrameRect(
    __in HDC hDC,
    __in CONST RECT *lprc,
    __in HBRUSH hbr
);

user32.dll, BOOL WINAPI InvertRect(
    __in HDC hDC,
    __in CONST RECT *lprc
);

user32.dll, BOOL WINAPI SetRect(
    __out LPRECT lprc,
    __in int xLeft,
    __in int yTop,
    __in int xRight,
    __in int yBottom
);

user32.dll, BOOL WINAPI SetRectEmpty(
    __out LPRECT lprc
);

user32.dll, BOOL WINAPI CopyRect(
    __out LPRECT lprcDst,
    __in CONST RECT *lprcSrc
);

user32.dll, BOOL WINAPI InflateRect(
    __inout LPRECT lprc,
    __in int dx,
    __in int dy
);

user32.dll, BOOL WINAPI IntersectRect(
    __out LPRECT lprcDst,
    __in CONST RECT *lprcSrc1,
    __in CONST RECT *lprcSrc2
);

user32.dll, BOOL WINAPI UnionRect(
    __out LPRECT lprcDst,
    __in CONST RECT *lprcSrc1,
    __in CONST RECT *lprcSrc2
);

user32.dll, BOOL WINAPI SubtractRect(
    __out LPRECT lprcDst,
    __in CONST RECT *lprcSrc1,
    __in CONST RECT *lprcSrc2
);

user32.dll, BOOL WINAPI OffsetRect(
    __inout LPRECT lprc,
    __in int dx,
    __in int dy
);

user32.dll, BOOL WINAPI IsRectEmpty(
    __in CONST RECT *lprc
);

user32.dll, BOOL WINAPI EqualRect(
    __in CONST RECT *lprc1,
    __in CONST RECT *lprc2
);

user32.dll, BOOL WINAPI PtInRect(
    __in CONST RECT *lprc,
    __in POINT pt
);

user32.dll, WORD WINAPI GetWindowWord(
    __in HWND hWnd,
    __in int nIndex
);

user32.dll, WORD WINAPI SetWindowWord(
    __in HWND hWnd,
    __in int nIndex,
    __in WORD wNewWord
);

user32.dll, LONG WINAPI GetWindowLongA(
    __in HWND hWnd,
    __in int nIndex
);

user32.dll, LONG WINAPI GetWindowLongW(
    __in HWND hWnd,
    __in int nIndex
);

user32.dll, LONG WINAPI SetWindowLongA(
    __in HWND hWnd,
    __in int nIndex,
    __in LONG dwNewLong
);

user32.dll, LONG WINAPI SetWindowLongW(
    __in HWND hWnd,
    __in int nIndex,
    __in LONG dwNewLong
);

user32.dll, LONG_PTR WINAPI GetWindowLongPtrA(
    __in HWND hWnd,
    __in int nIndex
);

user32.dll, LONG_PTR WINAPI GetWindowLongPtrW(
    __in HWND hWnd,
    __in int nIndex
);

user32.dll, LONG_PTR WINAPI SetWindowLongPtrA(
    __in HWND hWnd,
    __in int nIndex,
    __in LONG_PTR dwNewLong
);

user32.dll, LONG_PTR WINAPI SetWindowLongPtrW(
    __in HWND hWnd,
    __in int nIndex,
    __in LONG_PTR dwNewLong
);

user32.dll, WORD WINAPI GetClassWord(
    __in HWND hWnd,
    __in int nIndex
);

user32.dll, WORD WINAPI SetClassWord(
    __in HWND hWnd,
    __in int nIndex,
    __in WORD wNewWord
);

user32.dll, DWORD WINAPI GetClassLongA(
    __in HWND hWnd,
    __in int nIndex
);

user32.dll, DWORD WINAPI GetClassLongW(
    __in HWND hWnd,
    __in int nIndex
);

user32.dll, DWORD WINAPI SetClassLongA(
    __in HWND hWnd,
    __in int nIndex,
    __in LONG dwNewLong
);

user32.dll, DWORD WINAPI SetClassLongW(
    __in HWND hWnd,
    __in int nIndex,
    __in LONG dwNewLong
);

user32.dll, ULONG_PTR WINAPI GetClassLongPtrA(
    __in HWND hWnd,
    __in int nIndex
);

user32.dll, ULONG_PTR WINAPI GetClassLongPtrW(
    __in HWND hWnd,
    __in int nIndex
);

user32.dll, ULONG_PTR WINAPI SetClassLongPtrA(
    __in HWND hWnd,
    __in int nIndex,
    __in LONG_PTR dwNewLong
);

user32.dll, ULONG_PTR WINAPI SetClassLongPtrW(
    __in HWND hWnd,
    __in int nIndex,
    __in LONG_PTR dwNewLong
);

user32.dll, BOOL WINAPI GetProcessDefaultLayout(
    __out DWORD *pdwDefaultLayout
);

user32.dll, BOOL WINAPI SetProcessDefaultLayout(
    __in DWORD dwDefaultLayout
);

user32.dll, HWND WINAPI GetParent(
    __in HWND hWnd
);

user32.dll, HWND WINAPI SetParent(
    __in HWND hWndChild,
    __in_opt HWND hWndNewParent
);

user32.dll, BOOL WINAPI EnumChildWindows(
    __in_opt HWND hWndParent,
    __in WNDENUMPROC lpEnumFunc,
    __in LPARAM lParam
);

user32.dll, HWND WINAPI FindWindowA(
    __in_opt LPCSTR lpClassName,
    __in_opt LPCSTR lpWindowName
);

user32.dll, HWND WINAPI FindWindowW(
    __in_opt LPCWSTR lpClassName,
    __in_opt LPCWSTR lpWindowName
);

user32.dll, HWND WINAPI FindWindowExA(
    __in_opt HWND hWndParent,
    __in_opt HWND hWndChildAfter,
    __in_opt LPCSTR lpszClass,
    __in_opt LPCSTR lpszWindow
);

user32.dll, HWND WINAPI FindWindowExW(
    __in_opt HWND hWndParent,
    __in_opt HWND hWndChildAfter,
    __in_opt LPCSTR lpszClass,
    __in_opt LPCSTR lpszWindow
);

user32.dll, HWND WINAPI GetShellWindow(
    void aaa
);

user32.dll, BOOL WINAPI RegisterShellHookWindow(
    __in HWND hwnd
);

user32.dll, BOOL WINAPI DeregisterShellHookWindow(
    __in HWND hwnd
);

user32.dll, BOOL WINAPI EnumWindows(
    __in WNDENUMPROC lpEnumFunc,
    __in LPARAM lParam
);

user32.dll, BOOL WINAPI EnumThreadWindows(
    __in DWORD dwThreadId,
    __in WNDENUMPROC lpfn,
    __in LPARAM lParam
);

user32.dll, int WINAPI GetClassNameA(
    __in HWND hWnd,
    __out_ecount_part LPTSTR lpClassName,
    __in int nMaxCount
);

user32.dll, int WINAPI GetClassNameW(
    __in HWND hWnd,
    __out_ecount_part LPWSTR lpClassName,
    __in int nMaxCount
);

user32.dll, HWND WINAPI GetTopWindow(
    __in_opt HWND hWnd
);

user32.dll, DWORD WINAPI GetWindowThreadProcessId(
    __in HWND hWnd,
    __out_opt LPDWORD lpdwProcessId
);

user32.dll, BOOL WINAPI IsGUIThread(
    __in BOOL bConvert
);

user32.dll, HWND WINAPI GetLastActivePopup(
    __in HWND hWnd
);

user32.dll, HWND WINAPI GetWindow(
    __in HWND hWnd,
    __in UINT uCmd
);

user32.dll, HHOOK WINAPI SetWindowsHookA(
    __in int nFilterType,
    __in HOOKPROC pfnFilterProc
);

user32.dll, HHOOK WINAPI SetWindowsHookW(
    __in int nFilterType,
    __in HOOKPROC pfnFilterProc
);

user32.dll, HOOKPROC WINAPI SetWindowsHookExA(
__in  int idHook,
  __in  HOOKPROC lpfn,
  __in  HINSTANCE hMod,
  __in  DWORD dwThreadId
);

user32.dll, HOOKPROC WINAPI SetWindowsHookExW(
__in  int idHook,
  __in  HOOKPROC lpfn,
  __in  HINSTANCE hMod,
  __in  DWORD dwThreadId
);

user32.dll, BOOL WINAPI UnhookWindowsHook(
    __in int nCode,
    __in HOOKPROC pfnFilterProc
);

user32.dll, BOOL WINAPI UnhookWindowsHookEx(
    __in HHOOK hhk
);

user32.dll, LRESULT WINAPI CallNextHookEx(
    __in_opt HHOOK hhk,
    __in int nCode,
    __in WPARAM wParam,
    __in LPARAM lParam
);

user32.dll, BOOL WINAPI CheckMenuRadioItem(
    __in HMENU hmenu,
    __in UINT first,
    __in UINT last,
    __in UINT check,
    __in UINT flags
);

user32.dll, HBITMAP WINAPI LoadBitmapA(
    __in_opt HINSTANCE hInstance,
    __in LPCSTR lpBitmapName
);

user32.dll, HBITMAP WINAPI LoadBitmapW(
    __in_opt HINSTANCE hInstance,
    __in LPCSTR lpBitmapName
);

user32.dll, HCURSOR WINAPI LoadCursorA(
    __in_opt HINSTANCE hInstance,
    __in LPCSTR lpCursorName
);

user32.dll, HCURSOR WINAPI LoadCursorW(
    __in_opt HINSTANCE hInstance,
    __in LPCSTR lpCursorName
);

user32.dll, HCURSOR WINAPI LoadCursorFromFileA(
    __in LPCSTR lpFileName
);

user32.dll, HCURSOR WINAPI LoadCursorFromFileW(
    __in LPCSTR lpFileName
);

user32.dll, HCURSOR WINAPI CreateCursor(
    __in_opt HINSTANCE hInst,
    __in int xHotSpot,
    __in int yHotSpot,
    __in int nWidth,
    __in int nHeight,
    __in CONST VOID *pvANDPlane,
    __in CONST VOID *pvXORPlane
);

user32.dll, BOOL WINAPI DestroyCursor(
    __in HCURSOR hCursor
);

user32.dll, HCURSOR WINAPI CopyCursor(
    __in HCURSOR hCursor
);

user32.dll, BOOL WINAPI SetSystemCursor(
    __in HCURSOR hcur,
    __in DWORD id
);

user32.dll, HICON WINAPI LoadIconA(
    __in_opt HINSTANCE hInstance,
    __in LPCSTR lpIconName
);

user32.dll, HICON WINAPI LoadIconW(
    __in_opt HINSTANCE hInstance,
    __in LPCSTR lpIconName
);

user32.dll, UINT WINAPI PrivateExtractIconsA(
    __in LPCSTR szFileName,
    __in int nIconIndex,
    __in int cxIcon,
    __in int cyIcon,
    __out_ecount_part_opt HICON *phicon,
    __out_ecount_part_opt UINT *piconid,
    __in UINT nIcons,
    __in UINT flags
);


user32.dll, UINT WINAPI PrivateExtractIconsW(
    __in LPCSTR szFileName,
    __in int nIconIndex,
    __in int cxIcon,
    __in int cyIcon,
    __out_ecount_part_opt HICON *phicon,
    __out_ecount_part_opt UINT *piconid,
    __in UINT nIcons,
    __in UINT flags
);

user32.dll, HICON WINAPI CreateIcon(
    __in_opt HINSTANCE hInstance,
    __in int nWidth,
    __in int nHeight,
    __in BYTE cPlanes,
    __in BYTE cBitsPixel,
    __in CONST BYTE *lpbANDbits,
    __in CONST BYTE *lpbXORbits
);

user32.dll, BOOL WINAPI DestroyIcon(
    __in HICON hIcon
);

user32.dll, int WINAPI LookupIconIdFromDirectory(
    __in PBYTE presbits,
    __in BOOL fIcon
);

user32.dll, int WINAPI LookupIconIdFromDirectoryEx(
    __in PBYTE presbits,
    __in BOOL fIcon,
    __in int cxDesired,
    __in int cyDesired,
    __in UINT Flags
);

user32.dll, HICON WINAPI CreateIconFromResource(
    __in PBYTE presbits,
    __in DWORD dwResSize,
    __in BOOL fIcon,
    __in DWORD dwVer
);

user32.dll, HICON WINAPI CreateIconFromResourceEx(
    __in PBYTE presbits,
    __in DWORD dwResSize,
    __in BOOL fIcon,
    __in DWORD dwVer,
    __in int cxDesired,
    __in int cyDesired,
    __in UINT Flags
);

user32.dll, HANDLE WINAPI LoadImageA(
    __in_opt HINSTANCE hInst,
    __in LPCSTR name,
    __in UINT type,
    __in int cx,
    __in int cy,
    __in UINT fuLoad
);

user32.dll, HANDLE WINAPI LoadImageW(
    __in_opt HINSTANCE hInst,
    __in LPCSTR name,
    __in UINT type,
    __in int cx,
    __in int cy,
    __in UINT fuLoad
);

user32.dll, HANDLE WINAPI CopyImage(
    __in HANDLE h,
    __in UINT type,
    __in int cx,
    __in int cy,
    __in UINT flags
);

user32.dll,  BOOL WINAPI DrawIconEx(
    __in HDC hdc,
    __in int xLeft,
    __in int yTop,
    __in HICON hIcon,
    __in int cxWidth,
    __in int cyWidth,
    __in UINT istepIfAniCur,
    __in_opt HBRUSH hbrFlickerFreeDraw,
    __in UINT diFlags
);

user32.dll, HICON WINAPI CreateIconIndirect(
    __in PICONINFO piconinfo
);

user32.dll, HICON WINAPI CopyIcon(
    __in HICON hIcon
);

user32.dll, BOOL WINAPI GetIconInfo(
    __in HICON hIcon,
    __out PICONINFO piconinfo
);

user32.dll, BOOL WINAPI GetIconInfoExA(
    __in HICON hicon,
    __inout PICONINFOEXA piconinfo
);

user32.dll, BOOL WINAPI GetIconInfoExW(
    __in HICON hicon,
    __inout PICONINFOEXA piconinfo
);

user32.dll, int WINAPI LoadStringA(
    __in_opt HINSTANCE hInstance,
    __in UINT uID,
    __out_ecount_part LPSTR lpBuffer,
    __in int cchBufferMax
);

user32.dll, int WINAPI LoadStringW(
    __in_opt HINSTANCE hInstance,
    __in UINT uID,
    __out_ecount_part LPSTR lpBuffer,
    __in int cchBufferMax
);

user32.dll, BOOL WINAPI IsDialogMessageA(
    __in HWND hDlg,
    __in LPMSG lpMsg
);

user32.dll, BOOL WINAPI IsDialogMessageW(
    __in HWND hDlg,
    __in LPMSG lpMsg
);

user32.dll, BOOL WINAPI MapDialogRect(
    __in HWND hDlg,
    __inout LPRECT lpRect
);

user32.dll, int WINAPI DlgDirListA(
    __in HWND hDlg,
    __inout LPSTR lpPathSpec,
    __in int nIDListBox,
    __in int nIDStaticPath,
    __in UINT uFileType
);

user32.dll, int WINAPI DlgDirListW(
    __in HWND hDlg,
    __inout LPSTR lpPathSpec,
    __in int nIDListBox,
    __in int nIDStaticPath,
    __in UINT uFileType
);

user32.dll, BOOL WINAPI DlgDirSelectExA(
    __in HWND hwndDlg,
    __out_ecount LPSTR lpString,
    __in int chCount,
    __in int idListBox
);

user32.dll, BOOL WINAPI DlgDirSelectExW(
    __in HWND hwndDlg,
    __out_ecount LPSTR lpString,
    __in int chCount,
    __in int idListBox
);

user32.dll, int WINAPI DlgDirListComboBoxA(
    __in HWND hDlg,
    __inout LPSTR lpPathSpec,
    __in int nIDComboBox,
    __in int nIDStaticPath,
    __in UINT uFiletype
);

user32.dll, int WINAPI DlgDirListComboBoxW(
    __in HWND hDlg,
    __inout LPSTR lpPathSpec,
    __in int nIDComboBox,
    __in int nIDStaticPath,
    __in UINT uFiletype
);

user32.dll, BOOL WINAPI DlgDirSelectComboBoxExA(
    __in HWND hwndDlg,
    __out_ecount LPSTR lpString,
    __in int cchOut,
    __in int idComboBox
);

user32.dll, BOOL WINAPI DlgDirSelectComboBoxExW(
    __in HWND hwndDlg,
    __out_ecount LPSTR lpString,
    __in int cchOut,
    __in int idComboBox
);

user32.dll, int WINAPI SetScrollInfo(
    __in HWND hwnd,
    __in int nBar,
    __in LPCSCROLLINFO lpsi,
    __in BOOL redraw
);

user32.dll, BOOL WINAPI GetScrollInfo(
    __in HWND hwnd,
    __in int nBar,
    __inout LPSCROLLINFO lpsi
);

user32.dll, LRESULT WINAPI DefFrameProcA(
    __in HWND hWnd,
    __in_opt HWND hWndMDIClient,
    __in UINT uMsg,
    __in WPARAM wParam,
    __in LPARAM lParam
);

user32.dll, LRESULT WINAPI DefFrameProcW(
    __in HWND hWnd,
    __in_opt HWND hWndMDIClient,
    __in UINT uMsg,
    __in WPARAM wParam,
    __in LPARAM lParam
);

user32.dll, LRESULT CALLBACK DefMDIChildProcA(
    __in HWND hWnd,
    __in UINT uMsg,
    __in WPARAM wParam,
    __in LPARAM lParam
);

user32.dll, LRESULT CALLBACK DefMDIChildProcW(
    __in HWND hWnd,
    __in UINT uMsg,
    __in WPARAM wParam,
    __in LPARAM lParam
);

user32.dll, BOOL WINAPI TranslateMDISysAccel(
    __in HWND hWndClient,
    __in LPMSG lpMsg
);

user32.dll, UINT WINAPI ArrangeIconicWindows(
    __in HWND hWnd
);

user32.dll, HWND WINAPI CreateMDIWindowA(
    __in LPCWSTR lpClassName,
    __in LPCWSTR lpWindowName,
    __in DWORD dwStyle,
    __in int X,
    __in int Y,
    __in int nWidth,
    __in int nHeight,
    __in_opt HWND hWndParent,
    __in_opt HINSTANCE hInstance,
    __in LPARAM lParam
);

user32.dll, HWND WINAPI CreateMDIWindowW(
    __in LPCWSTR lpClassName,
    __in LPCWSTR lpWindowName,
    __in DWORD dwStyle,
    __in int X,
    __in int Y,
    __in int nWidth,
    __in int nHeight,
    __in_opt HWND hWndParent,
    __in_opt HINSTANCE hInstance,
    __in LPARAM lParam
);

user32.dll, WORD WINAPI TileWindows(
    __in_opt HWND hwndParent,
    __in UINT wHow,
    __in_opt CONST RECT * lpRect,
    __in UINT cKids,
    __in_ecount_opt const HWND FAR * lpKids
);

user32.dll, WORD WINAPI CascadeWindows(
    __in_opt HWND hwndParent,
    __in UINT wHow,
    __in_opt CONST RECT * lpRect,
    __in UINT cKids,
    __in_ecount_opt const HWND FAR * lpKids
);

user32.dll, BOOL WINAPI WinHelpA(
    __in_opt HWND hWndMain,
    __in_opt LPCSTR lpszHelp,
    __in UINT uCommand,
    __in ULONG_PTR dwData
);

user32.dll, BOOL WINAPI WinHelpW(
    __in_opt HWND hWndMain,
    __in_opt LPCSTR lpszHelp,
    __in UINT uCommand,
    __in ULONG_PTR dwData
);

user32.dll, LONG WINAPI ChangeDisplaySettingsA(
    __in_opt DEVMODEA* lpDevMode,
    __in DWORD dwFlags
);

user32.dll, LONG WINAPI ChangeDisplaySettingsW(
    __in_opt DEVMODEA* lpDevMode,
    __in DWORD dwFlags
);

user32.dll, LONG WINAPI ChangeDisplaySettingsExA(
    __in_opt LPCSTR lpszDeviceName,
    __in_opt DEVMODEA* lpDevMode,
    __reserved HWND hwnd,
    __in DWORD dwflags,
    __in_opt LPVOID lParam
);

user32.dll, LONG WINAPI ChangeDisplaySettingsExW(
    __in_opt LPCSTR lpszDeviceName,
    __in_opt DEVMODEA* lpDevMode,
    __reserved HWND hwnd,
    __in DWORD dwflags,
    __in_opt LPVOID lParam
);

user32.dll, BOOL WINAPI EnumDisplaySettingsA(
    __in_opt LPCSTR lpszDeviceName,
    __in DWORD iModeNum,
    __inout DEVMODEA* lpDevMode
);

user32.dll, BOOL WINAPI EnumDisplaySettingsW(
    __in_opt LPCSTR lpszDeviceName,
    __in DWORD iModeNum,
    __inout DEVMODEA* lpDevMode
);

user32.dll, BOOL WINAPI EnumDisplaySettingsExA(
    __in_opt LPCSTR lpszDeviceName,
    __in DWORD iModeNum,
    __inout DEVMODEA* lpDevMode,
    __in DWORD dwFlags
);

user32.dll, BOOL WINAPI EnumDisplaySettingsExW(
    __in_opt LPCSTR lpszDeviceName,
    __in DWORD iModeNum,
    __inout DEVMODEA* lpDevMode,
    __in DWORD dwFlags
);

user32.dll, BOOL WINAPI EnumDisplayDevicesA(
    __in_opt LPCSTR lpDevice,
    __in DWORD iDevNum,
    __inout PDISPLAY_DEVICEA lpDisplayDevice,
    __in DWORD dwFlags
);

user32.dll, BOOL WINAPI EnumDisplayDevicesW(
    __in_opt LPCSTR lpDevice,
    __in DWORD iDevNum,
    __inout PDISPLAY_DEVICEA lpDisplayDevice,
    __in DWORD dwFlags
);

user32.dll, LONG WINAPI GetDisplayConfigBufferSizes(
    __in UINT32 flags,
    __out UINT32* numPathArrayElements,
    __out UINT32* numModeInfoArrayElements
);

user32.dll, LONG WINAPI SetDisplayConfig(
    __in UINT32 numPathArrayElements,
    __in_ecount_opt DISPLAYCONFIG_PATH_INFO* pathArray,
    __in UINT32 numModeInfoArrayElements,
    __in_ecount_opt DISPLAYCONFIG_MODE_INFO* modeInfoArray,
    __in UINT32 flags
);

user32.dll, LONG WINAPI QueryDisplayConfig(
    __in UINT32 flags,
    __inout UINT32* numPathArrayElements,
    __out_ecount_part DISPLAYCONFIG_PATH_INFO* pathArray,
    __inout UINT32* numModeInfoArrayElements,
    __out_ecount_part DISPLAYCONFIG_MODE_INFO* modeInfoArray,
    __out DISPLAYCONFIG_TOPOLOGY_ID* currentTopologyId
);

user32.dll, LONG WINAPI DisplayConfigGetDeviceInfo(
    __inout DISPLAYCONFIG_DEVICE_INFO_HEADER* requestPacket
);

user32.dll, LONG WINAPI DisplayConfigSetDeviceInfo(
    __in DISPLAYCONFIG_DEVICE_INFO_HEADER* setPacket
);

user32.dll, BOOL WINAPI SystemParametersInfoA(
    __in UINT uiAction,
    __in UINT uiParam,
    __inout_opt PVOID pvParam,
    __in UINT fWinIni
);

user32.dll, BOOL WINAPI SystemParametersInfoW(
    __in UINT uiAction,
    __in UINT uiParam,
    __inout_opt PVOID pvParam,
    __in UINT fWinIni
);

user32.dll, VOID WINAPI SetLastErrorEx(
    __in DWORD dwErrCode,
    __in DWORD dwType
);

user32.dll, int WINAPI InternalGetWindowTextA(
    __in HWND hWnd,
    __out_ecount_part LPWSTR pString,
    __in int cchMaxCount
);

user32.dll, int WINAPI InternalGetWindowTextW(
    __in HWND hWnd,
    __out_ecount_part LPWSTR pString,
    __in int cchMaxCount
);

user32.dll, BOOL WINAPI EndTask(
    __in HWND hWnd,
    __in BOOL fShutDown,
    __in BOOL fForce
);

user32.dll, BOOL WINAPI CancelShutdown(
    void aaa
);

user32.dll, HMONITOR WINAPI MonitorFromPoint(
    __in POINT pt,
    __in DWORD dwFlags
);

user32.dll, HMONITOR WINAPI MonitorFromRect(
    __in LPCRECT lprc,
    __in DWORD dwFlags
);

user32.dll, HMONITOR WINAPI MonitorFromWindow(
    __in HWND hwnd,
    __in DWORD dwFlags
);

user32.dll, BOOL WINAPI GetMonitorInfoA(
    __in HMONITOR hMonitor,
    __inout LPMONITORINFO lpmi
);

user32.dll, BOOL WINAPI GetMonitorInfoW(
    __in HMONITOR hMonitor,
    __inout LPMONITORINFO lpmi
);

user32.dll, BOOL WINAPI EnumDisplayMonitors(
    __in_opt HDC hdc,
    __in_opt LPCRECT lprcClip,
    __in MONITORENUMPROC lpfnEnum,
    __in LPARAM dwData
);

user32.dll, VOID WINAPI NotifyWinEvent(
    __in DWORD event,
    __in HWND  hwnd,
    __in LONG  idObject,
    __in LONG  idChild
);

user32.dll, HWINEVENTHOOK WINAPI SetWinEventHook(
    __in DWORD eventMin,
    __in DWORD eventMax,
    __in_opt HMODULE hmodWinEventProc,
    __in WINEVENTPROC pfnWinEventProc,
    __in DWORD idProcess,
    __in DWORD idThread,
    __in DWORD dwFlags
);

user32.dll, BOOL WINAPI IsWinEventHookInstalled(
    __in DWORD event
);

user32.dll, BOOL WINAPI UnhookWinEvent(
    __in HWINEVENTHOOK hWinEventHook
);

user32.dll, BOOL WINAPI GetGUIThreadInfo(
    __in DWORD idThread,
    __inout PGUITHREADINFO pgui
);

user32.dll, BOOL WINAPI BlockInput(
    BOOL fBlockIt
);

user32.dll, BOOL WINAPI SetProcessDPIAware(
    void aaa
);

user32.dll, BOOL WINAPI IsProcessDPIAware(
    void aaa
);

user32.dll, UINT WINAPI GetWindowModuleFileNameA(
    __in HWND hwnd,
    __out_ecount_part LPSTR pszFileName,
    __in UINT cchFileNameMax
);

user32.dll, UINT WINAPI GetWindowModuleFileNameW(
    __in HWND hwnd,
    __out_ecount_part LPSTR pszFileName,
    __in UINT cchFileNameMax
);

user32.dll, BOOL WINAPI GetWindowInfo(
    __in HWND hwnd,
    __inout PWINDOWINFO pwi
);

user32.dll, BOOL WINAPI GetTitleBarInfo(
    __in HWND hwnd,
    __inout PTITLEBARINFO pti
);

user32.dll, BOOL WINAPI GetMenuBarInfo(
    __in HWND hwnd,
    __in LONG idObject,
    __in LONG idItem,
    __inout PMENUBARINFO pmbi
);

user32.dll, BOOL WINAPI GetScrollBarInfo(
    __in HWND hwnd,
    __in LONG idObject,
    __inout PSCROLLBARINFO psbi
);

user32.dll, BOOL WINAPI GetComboBoxInfo(
    __in HWND hwndCombo,
    __inout PCOMBOBOXINFO pcbi
);

user32.dll, HWND WINAPI GetAncestor(
    __in HWND hwnd,
    __in UINT gaFlags
);

user32.dll, HWND WINAPI RealChildWindowFromPoint(
    __in HWND hwndParent,
    __in POINT ptParentClientCoords
);

user32.dll, UINT WINAPIRealGetWindowClassA(
    __in HWND hwnd,
    __out_ecount_part LPSTR ptszClassName,
    __in UINT cchClassNameMax
);

user32.dll, UINT WINAPIRealGetWindowClassW(
    __in HWND hwnd,
    __out_ecount_part LPSTR ptszClassName,
    __in UINT cchClassNameMax
);

user32.dll, UINT WINAPI RealGetWindowClassA(
    __in HWND hwnd,
    __out_ecount_part LPWSTR ptszClassName,
    __in UINT cchClassNameMax
);

user32.dll, UINT WINAPI RealGetWindowClassW(
    __in HWND hwnd,
    __out_ecount_part LPWSTR ptszClassName,
    __in UINT cchClassNameMax
);

user32.dll, BOOL WINAPI GetAltTabInfoA(
    __in_opt HWND hwnd,
    __in int iItem,
    __inout PALTTABINFO pati,
    __out_ecount_opt LPSTR pszItemText,
    __in UINT cchItemText
);

user32.dll, BOOL WINAPI GetAltTabInfoW(
    __in_opt HWND hwnd,
    __in int iItem,
    __inout PALTTABINFO pati,
    __out_ecount_opt LPSTR pszItemText,
    __in UINT cchItemText
);

user32.dll, DWORD WINAPI GetListBoxInfo(
    __in HWND hwnd
);

user32.dll, BOOL WINAPI LockWorkStation(
    void aaa
);

user32.dll, BOOL WINAPI UserHandleGrantAccess(
    __in HANDLE hUserHandle,
    __in HANDLE hJob,
    __in BOOL   bGrant
);

user32.dll, UINT WINAPI GetRawInputDeviceInfoA(
    __in_opt HANDLE hDevice,
    __in UINT uiCommand,
    __inout_bcount_part_opt LPVOID pData,
    __inout PUINT pcbSize
);

user32.dll, UINT WINAPI GetRawInputDeviceInfoW(
    __in_opt HANDLE hDevice,
    __in UINT uiCommand,
    __inout_bcount_part_opt LPVOID pData,
    __inout PUINT pcbSize
);

user32.dll, UINT WINAPI GetRawInputBuffer(
    __out_bcount_opt PRAWINPUT pData,
    __inout PUINT pcbSize,
    __in UINT cbSizeHeader
);

user32.dll, BOOL WINAPI RegisterRawInputDevices(
    __in_ecount PCRAWINPUTDEVICE pRawInputDevices,
    __in UINT uiNumDevices,
    __in UINT cbSize
);

user32.dll, UINT WINAPI GetRegisteredRawInputDevices(
    __out_ecount_opt PRAWINPUTDEVICE pRawInputDevices,
    __inout PUINT puiNumDevices,
    __in UINT cbSize
);

user32.dll, UINT WINAPI GetRawInputDeviceList(
    __out_ecount_opt PRAWINPUTDEVICELIST pRawInputDeviceList,
    __inout PUINT puiNumDevices,
    __in UINT cbSize
);

user32.dll, LRESULT WINAPI DefRawInputProc(
    __in_ecount PRAWINPUT* paRawInput,
    __in INT nInput,
    __in UINT cbSizeHeader
);

user32.dll, BOOL WINAPI ChangeWindowMessageFilter(
    __in UINT message,
    __in DWORD dwFlag
);

user32.dll, BOOL WINAPI ChangeWindowMessageFilterEx(
    __in HWND hwnd,
    __in UINT message,
    __in DWORD action,
    __inout_opt PCHANGEFILTERSTRUCT pChangeFilterStruct
);

user32.dll, BOOL WINAPI GetGestureInfo(
    __in HGESTUREINFO hGestureInfo,
    __out PGESTUREINFO pGestureInfo
);

user32.dll, BOOL WINAPI GetGestureExtraArgs(
    __in HGESTUREINFO hGestureInfo,
    __in UINT cbExtraArgs,
    __out_bcount PBYTE pExtraArgs
);

user32.dll, BOOL WINAPI CloseGestureInfoHandle(
    __in HGESTUREINFO hGestureInfo
);

user32.dll, BOOL WINAPI SetGestureConfig(
    __in HWND hwnd,
    __in DWORD dwReserved,
    __in UINT cIDs,
    __in_ecount PGESTURECONFIG pGestureConfig,
    __in UINT cbSize
);

user32.dll, BOOL WINAPI GetGestureConfig(
    __in HWND hwnd,
    __in DWORD dwReserved,
    __in DWORD dwFlags,
    __in PUINT pcIDs,
    __inout_ecount PGESTURECONFIG pGestureConfig,
    __in UINT cbSize
);

user32.dll, BOOL WINAPI ShutdownBlockReasonCreateA(
    __in HWND hWnd,
    __in LPCWSTR pwszReason
);

user32.dll, BOOL WINAPI ShutdownBlockReasonCreateW(
    __in HWND hWnd,
    __in LPCWSTR pwszReason
);

user32.dll, BOOL WINAPI ShutdownBlockReasonQueryA(
    __in HWND hWnd,
    __out_ecount_opt LPWSTR pwszBuff,
    __inout DWORD *pcchBuff
);

user32.dll, BOOL WINAPI ShutdownBlockReasonQueryW(
    __in HWND hWnd,
    __out_ecount_opt LPWSTR pwszBuff,
    __inout DWORD *pcchBuff
);

user32.dll, BOOL WINAPIShutdownBlockReasonDestroy(
    __in HWND hWnd
);



advapi32.dll, BOOL WINAPI GetProcessorSystemCycleTime(
    __in USHORT Group,
    __out_bcount_part_opt PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION Buffer,
    __inout PDWORD ReturnedLength
);

advapi32.dll, BOOL WINAPI EncryptFileA(
    __in LPCSTR lpFileName
);

advapi32.dll, BOOL WINAPI EncryptFileW(
    __in LPCSTR lpFileName
);

advapi32.dll, BOOL WINAPI DecryptFileA(
    __in       LPCSTR lpFileName,
    __reserved DWORD dwReserved
);

advapi32.dll, BOOL WINAPI DecryptFileW(
    __in       LPCSTR lpFileName,
    __reserved DWORD dwReserved
);

advapi32.dll, BOOL WINAPI FileEncryptionStatusA(
    __in  LPCSTR lpFileName,
    __out LPDWORD  lpStatus
);

advapi32.dll, BOOL WINAPI FileEncryptionStatusW(
    __in  LPCSTR lpFileName,
    __out LPDWORD  lpStatus
);

advapi32.dll, DWORD WINAPI OpenEncryptedFileRawA(
    __in        LPCSTR lpFileName,
    __in        ULONG    ulFlags,
    __deref_out PVOID   *pvContext
);

advapi32.dll, DWORD WINAPI OpenEncryptedFileRawW(
    __in        LPCSTR lpFileName,
    __in        ULONG    ulFlags,
    __deref_out PVOID   *pvContext
);

advapi32.dll, DWORD WINAPI ReadEncryptedFileRaw(
    __in     PFE_EXPORT_FUNC pfExportCallback,
    __in_opt PVOID           pvCallbackContext,
    __in     PVOID           pvContext
);

advapi32.dll, DWORD WINAPI WriteEncryptedFileRaw(
    __in     PFE_IMPORT_FUNC pfImportCallback,
    __in_opt PVOID           pvCallbackContext,
    __in     PVOID           pvContext
);

advapi32.dll, VOID WINAPI CloseEncryptedFileRaw(
    __in PVOID           pvContext
);

advapi32.dll, BOOL WINAPI IsTextUnicode(
    __in_bcount CONST VOID* lpv,
    __in        int iSize,
    __inout_opt LPINT lpiResult
);

advapi32.dll, BOOL WINAPI AccessCheck(
    __in    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    __in    HANDLE ClientToken,
    __in    DWORD DesiredAccess,
    __in    PGENERIC_MAPPING GenericMapping,
    __out_bcount_part_opt PPRIVILEGE_SET PrivilegeSet,
    __inout LPDWORD PrivilegeSetLength,
    __out   LPDWORD GrantedAccess,
    __out   LPBOOL AccessStatus
);

advapi32.dll, BOOL WINAPI AccessCheckByType(
    __in     PSECURITY_DESCRIPTOR pSecurityDescriptor,
    __in_opt PSID PrincipalSelfSid,
    __in     HANDLE ClientToken,
    __in     DWORD DesiredAccess,
    __inout_ecount_opt POBJECT_TYPE_LIST ObjectTypeList,
    __in     DWORD ObjectTypeListLength,
    __in     PGENERIC_MAPPING GenericMapping,
    __out_bcount_part_opt PPRIVILEGE_SET PrivilegeSet,
    __inout  LPDWORD PrivilegeSetLength,
    __out    LPDWORD GrantedAccess,
    __out    LPBOOL AccessStatus
);

advapi32.dll, BOOL WINAPI AccessCheckByTypeResultList(
    __in     PSECURITY_DESCRIPTOR pSecurityDescriptor,
    __in_opt PSID PrincipalSelfSid,
    __in     HANDLE ClientToken,
    __in     DWORD DesiredAccess,
    __inout_ecount_opt POBJECT_TYPE_LIST ObjectTypeList,
    __in     DWORD ObjectTypeListLength,
    __in     PGENERIC_MAPPING GenericMapping,
    __out_bcount_part_opt PPRIVILEGE_SET PrivilegeSet,
    __inout  LPDWORD PrivilegeSetLength,
    __out    LPDWORD GrantedAccessList,
    __out    LPDWORD AccessStatusList
);

advapi32.dll, BOOL WINAPI AccessCheckAndAuditAlarmA(
    __in     LPCSTR SubsystemName,
    __in_opt LPVOID HandleId,
    __in     LPSTR ObjectTypeName,
    __in_opt LPSTR ObjectName,
    __in     PSECURITY_DESCRIPTOR SecurityDescriptor,
    __in     DWORD DesiredAccess,
    __in     PGENERIC_MAPPING GenericMapping,
    __in     BOOL ObjectCreation,
    __out    LPDWORD GrantedAccess,
    __out    LPBOOL AccessStatus,
    __out    LPBOOL pfGenerateOnClose
);

advapi32.dll, BOOL WINAPI AccessCheckAndAuditAlarmW(
    __in     LPCSTR SubsystemName,
    __in_opt LPVOID HandleId,
    __in     LPSTR ObjectTypeName,
    __in_opt LPSTR ObjectName,
    __in     PSECURITY_DESCRIPTOR SecurityDescriptor,
    __in     DWORD DesiredAccess,
    __in     PGENERIC_MAPPING GenericMapping,
    __in     BOOL ObjectCreation,
    __out    LPDWORD GrantedAccess,
    __out    LPBOOL AccessStatus,
    __out    LPBOOL pfGenerateOnClose
);

advapi32.dll, BOOL WINAPI AccessCheckByTypeAndAuditAlarmA(
    __in     LPCSTR SubsystemName,
    __in     LPVOID HandleId,
    __in     LPCSTR ObjectTypeName,
    __in_opt LPCSTR ObjectName,
    __in     PSECURITY_DESCRIPTOR SecurityDescriptor,
    __in_opt PSID PrincipalSelfSid,
    __in     DWORD DesiredAccess,
    __in     AUDIT_EVENT_TYPE AuditType,
    __in     DWORD Flags,
    __inout_ecount_opt POBJECT_TYPE_LIST ObjectTypeList,
    __in     DWORD ObjectTypeListLength,
    __in     PGENERIC_MAPPING GenericMapping,
    __in     BOOL ObjectCreation,
    __out    LPDWORD GrantedAccess,
    __out    LPBOOL AccessStatus,
    __out    LPBOOL pfGenerateOnClose
);

advapi32.dll, BOOL WINAPI AccessCheckByTypeAndAuditAlarmW(
    __in     LPCSTR SubsystemName,
    __in     LPVOID HandleId,
    __in     LPCSTR ObjectTypeName,
    __in_opt LPCSTR ObjectName,
    __in     PSECURITY_DESCRIPTOR SecurityDescriptor,
    __in_opt PSID PrincipalSelfSid,
    __in     DWORD DesiredAccess,
    __in     AUDIT_EVENT_TYPE AuditType,
    __in     DWORD Flags,
    __inout_ecount_opt POBJECT_TYPE_LIST ObjectTypeList,
    __in     DWORD ObjectTypeListLength,
    __in     PGENERIC_MAPPING GenericMapping,
    __in     BOOL ObjectCreation,
    __out    LPDWORD GrantedAccess,
    __out    LPBOOL AccessStatus,
    __out    LPBOOL pfGenerateOnClose
);

advapi32.dll, BOOL WINAPI AccessCheckByTypeResultListAndAuditAlarmA(
    __in     LPCSTR SubsystemName,
    __in     LPVOID HandleId,
    __in     LPCSTR ObjectTypeName,
    __in_opt LPCSTR ObjectName,
    __in     PSECURITY_DESCRIPTOR SecurityDescriptor,
    __in_opt PSID PrincipalSelfSid,
    __in     DWORD DesiredAccess,
    __in     AUDIT_EVENT_TYPE AuditType,
    __in     DWORD Flags,
    __inout_ecount_opt POBJECT_TYPE_LIST ObjectTypeList,
    __in     DWORD ObjectTypeListLength,
    __in     PGENERIC_MAPPING GenericMapping,
    __in     BOOL ObjectCreation,
    __out    LPDWORD GrantedAccess,
    __out    LPDWORD AccessStatusList,
    __out    LPBOOL pfGenerateOnClose
);

advapi32.dll, BOOL WINAPI AccessCheckByTypeResultListAndAuditAlarmW(
    __in     LPCSTR SubsystemName,
    __in     LPVOID HandleId,
    __in     LPCSTR ObjectTypeName,
    __in_opt LPCSTR ObjectName,
    __in     PSECURITY_DESCRIPTOR SecurityDescriptor,
    __in_opt PSID PrincipalSelfSid,
    __in     DWORD DesiredAccess,
    __in     AUDIT_EVENT_TYPE AuditType,
    __in     DWORD Flags,
    __inout_ecount_opt POBJECT_TYPE_LIST ObjectTypeList,
    __in     DWORD ObjectTypeListLength,
    __in     PGENERIC_MAPPING GenericMapping,
    __in     BOOL ObjectCreation,
    __out    LPDWORD GrantedAccess,
    __out    LPDWORD AccessStatusList,
    __out    LPBOOL pfGenerateOnClose
);

advapi32.dll, BOOL WINAPI AccessCheckByTypeResultListAndAuditAlarmByHandleA(
    __in     LPCSTR SubsystemName,
    __in     LPVOID HandleId,
    __in     HANDLE ClientToken,
    __in     LPCSTR ObjectTypeName,
    __in_opt LPCSTR ObjectName,
    __in     PSECURITY_DESCRIPTOR SecurityDescriptor,
    __in_opt PSID PrincipalSelfSid,
    __in     DWORD DesiredAccess,
    __in     AUDIT_EVENT_TYPE AuditType,
    __in     DWORD Flags,
    __inout_ecount_opt POBJECT_TYPE_LIST ObjectTypeList,
    __in     DWORD ObjectTypeListLength,
    __in     PGENERIC_MAPPING GenericMapping,
    __in     BOOL ObjectCreation,
    __out    LPDWORD GrantedAccess,
    __out    LPDWORD AccessStatusList,
    __out    LPBOOL pfGenerateOnClose
);

advapi32.dll, BOOL WINAPI AccessCheckByTypeResultListAndAuditAlarmByHandleW(
    __in     LPCSTR SubsystemName,
    __in     LPVOID HandleId,
    __in     HANDLE ClientToken,
    __in     LPCSTR ObjectTypeName,
    __in_opt LPCSTR ObjectName,
    __in     PSECURITY_DESCRIPTOR SecurityDescriptor,
    __in_opt PSID PrincipalSelfSid,
    __in     DWORD DesiredAccess,
    __in     AUDIT_EVENT_TYPE AuditType,
    __in     DWORD Flags,
    __inout_ecount_opt POBJECT_TYPE_LIST ObjectTypeList,
    __in     DWORD ObjectTypeListLength,
    __in     PGENERIC_MAPPING GenericMapping,
    __in     BOOL ObjectCreation,
    __out    LPDWORD GrantedAccess,
    __out    LPDWORD AccessStatusList,
    __out    LPBOOL pfGenerateOnClose
);

advapi32.dll, BOOL WINAPI AddAccessAllowedAce(
    __inout PACL pAcl,
    __in    DWORD dwAceRevision,
    __in    DWORD AccessMask,
    __in    PSID pSid
);

advapi32.dll, BOOL WINAPI AddAccessAllowedAceEx(
    __inout PACL pAcl,
    __in    DWORD dwAceRevision,
    __in    DWORD AceFlags,
    __in    DWORD AccessMask,
    __in    PSID pSid
);

advapi32.dll, BOOL WINAPI AddMandatoryAce(
    __inout PACL pAcl,
    __in    DWORD dwAceRevision,
    __in    DWORD AceFlags,
    __in    DWORD MandatoryPolicy,
    __in    PSID pLabelSid
);

advapi32.dll, BOOL WINAPI AddConditionalAce(
    __inout PACL pAcl,
    __in    DWORD dwAceRevision,
    __in    DWORD AceFlags,
    __in    UCHAR AceType,
    __in    DWORD AccessMask,
    __in    PSID pSid,
    __in    PWCHAR ConditionStr,
    __out DWORD *ReturnLength
);

advapi32.dll, BOOL WINAPI AddAccessDeniedAce(
    __inout PACL pAcl,
    __in    DWORD dwAceRevision,
    __in    DWORD AccessMask,
    __in    PSID pSid
);

advapi32.dll, BOOL WINAPI AddAccessDeniedAceEx(
    __inout PACL pAcl,
    __in    DWORD dwAceRevision,
    __in    DWORD AceFlags,
    __in    DWORD AccessMask,
    __in    PSID pSid
);

advapi32.dll, BOOL WINAPI AddAuditAccessAce(
    __inout PACL pAcl,
    __in    DWORD dwAceRevision,
    __in    DWORD dwAccessMask,
    __in    PSID pSid,
    __in    BOOL bAuditSuccess,
    __in    BOOL bAuditFailure
);

advapi32.dll, BOOL WINAPI AddAuditAccessAceEx(
    __inout PACL pAcl,
    __in    DWORD dwAceRevision,
    __in    DWORD AceFlags,
    __in    DWORD dwAccessMask,
    __in    PSID pSid,
    __in    BOOL bAuditSuccess,
    __in    BOOL bAuditFailure
);

advapi32.dll, BOOL WINAPI AddAccessAllowedObjectAce(
    __inout  PACL pAcl,
    __in     DWORD dwAceRevision,
    __in     DWORD AceFlags,
    __in     DWORD AccessMask,
    __in_opt GUID *ObjectTypeGuid,
    __in_opt GUID *InheritedObjectTypeGuid,
    __in     PSID pSid
);

advapi32.dll, BOOL WINAPI AddAccessDeniedObjectAce(
    __inout  PACL pAcl,
    __in     DWORD dwAceRevision,
    __in     DWORD AceFlags,
    __in     DWORD AccessMask,
    __in_opt GUID *ObjectTypeGuid,
    __in_opt GUID *InheritedObjectTypeGuid,
    __in     PSID pSid
);

advapi32.dll, BOOL WINAPI AddAuditAccessObjectAce(
    __inout  PACL pAcl,
    __in     DWORD dwAceRevision,
    __in     DWORD AceFlags,
    __in     DWORD AccessMask,
    __in_opt GUID *ObjectTypeGuid,
    __in_opt GUID *InheritedObjectTypeGuid,
    __in     PSID pSid,
    __in     BOOL bAuditSuccess,
    __in     BOOL bAuditFailure
);

advapi32.dll, BOOL APIENTRY SetThreadToken(
    __in_opt PHANDLE Thread,
    __in_opt HANDLE Token
);

advapi32.dll, BOOL WINAPI OpenProcessToken(
    __in        HANDLE ProcessHandle,
    __in        DWORD DesiredAccess,
    __deref_out PHANDLE TokenHandle
);

advapi32.dll, BOOL WINAPI OpenThreadToken(
    __in        HANDLE ThreadHandle,
    __in        DWORD DesiredAccess,
    __in        BOOL OpenAsSelf,
    __deref_out PHANDLE TokenHandle
);

advapi32.dll, BOOL WINAPI GetTokenInformation(
    __in      HANDLE TokenHandle,
    __in      TOKEN_INFORMATION_CLASS TokenInformationClass,
    __out_bcount_part_opt LPVOID TokenInformation,
    __in      DWORD TokenInformationLength,
    __out     PDWORD ReturnLength
);

advapi32.dll, BOOL WINAPI SetTokenInformation(
    __in HANDLE TokenHandle,
    __in TOKEN_INFORMATION_CLASS TokenInformationClass,
    __in_bcount LPVOID TokenInformation,
    __in DWORD TokenInformationLength
);

advapi32.dll, BOOL WINAPI AdjustTokenPrivileges(
    __in      HANDLE TokenHandle,
    __in      BOOL DisableAllPrivileges,
    __in_opt  PTOKEN_PRIVILEGES NewState,
    __in      DWORD BufferLength,
    __out_bcount_part_opt PTOKEN_PRIVILEGES PreviousState,
    __out_opt PDWORD ReturnLength
);

advapi32.dll, BOOL WINAPI AdjustTokenGroups(
    __in      HANDLE TokenHandle,
    __in      BOOL ResetToDefault,
    __in_opt  PTOKEN_GROUPS NewState,
    __in      DWORD BufferLength,
    __out_bcount_part_opt PTOKEN_GROUPS PreviousState,
    __out_opt PDWORD ReturnLength
);

advapi32.dll, BOOL WINAPI ObjectOpenAuditAlarmA(
    __in     LPCSTR SubsystemName,
    __in     LPVOID HandleId,
    __in     LPSTR ObjectTypeName,
    __in_opt LPSTR ObjectName,
    __in     PSECURITY_DESCRIPTOR pSecurityDescriptor,
    __in     HANDLE ClientToken,
    __in     DWORD DesiredAccess,
    __in     DWORD GrantedAccess,
    __in_opt PPRIVILEGE_SET Privileges,
    __in     BOOL ObjectCreation,
    __in     BOOL AccessGranted,
    __out    LPBOOL GenerateOnClose
);

advapi32.dll, BOOL WINAPI ObjectOpenAuditAlarmW(
    __in     LPCSTR SubsystemName,
    __in     LPVOID HandleId,
    __in     LPSTR ObjectTypeName,
    __in_opt LPSTR ObjectName,
    __in     PSECURITY_DESCRIPTOR pSecurityDescriptor,
    __in     HANDLE ClientToken,
    __in     DWORD DesiredAccess,
    __in     DWORD GrantedAccess,
    __in_opt PPRIVILEGE_SET Privileges,
    __in     BOOL ObjectCreation,
    __in     BOOL AccessGranted,
    __out    LPBOOL GenerateOnClose
);

advapi32.dll, BOOL WINAPI ObjectPrivilegeAuditAlarmA(
    __in LPCSTR SubsystemName,
    __in LPVOID HandleId,
    __in HANDLE ClientToken,
    __in DWORD DesiredAccess,
    __in PPRIVILEGE_SET Privileges,
    __in BOOL AccessGranted
);

advapi32.dll, BOOL WINAPI ObjectPrivilegeAuditAlarmW(
    __in LPCSTR SubsystemName,
    __in LPVOID HandleId,
    __in HANDLE ClientToken,
    __in DWORD DesiredAccess,
    __in PPRIVILEGE_SET Privileges,
    __in BOOL AccessGranted
);

advapi32.dll, BOOL WINAPI ObjectCloseAuditAlarmA(
    __in LPCSTR SubsystemName,
    __in LPVOID HandleId,
    __in BOOL GenerateOnClose
);

advapi32.dll, BOOL WINAPI ObjectCloseAuditAlarmW(
    __in LPCSTR SubsystemName,
    __in LPVOID HandleId,
    __in BOOL GenerateOnClose
);

advapi32.dll, BOOL WINAPI ObjectDeleteAuditAlarmA(
    __in LPCSTR SubsystemName,
    __in LPVOID HandleId,
    __in BOOL GenerateOnClose
);

advapi32.dll, BOOL WINAPI ObjectDeleteAuditAlarmW(
    __in LPCSTR SubsystemName,
    __in LPVOID HandleId,
    __in BOOL GenerateOnClose
);

advapi32.dll, BOOL WINAPI PrivilegedServiceAuditAlarmA(
    __in LPCSTR SubsystemName,
    __in LPCSTR ServiceName,
    __in HANDLE ClientToken,
    __in PPRIVILEGE_SET Privileges,
    __in BOOL AccessGranted
);

advapi32.dll, BOOL WINAPI PrivilegedServiceAuditAlarmW(
    __in LPCSTR SubsystemName,
    __in LPCSTR ServiceName,
    __in HANDLE ClientToken,
    __in PPRIVILEGE_SET Privileges,
    __in BOOL AccessGranted
);

advapi32.dll, BOOL WINAPI IsWellKnownSid(
    __in PSID pSid,
    __in WELL_KNOWN_SID_TYPE WellKnownSidType
);

advapi32.dll, BOOL WINAPI CreateWellKnownSid(
    __in     WELL_KNOWN_SID_TYPE WellKnownSidType,
    __in_opt PSID DomainSid,
    __out_bcount_part_opt PSID pSid,
    __inout  DWORD *cbSid
);

advapi32.dll, BOOL WINAPI EqualDomainSid(
    __in  PSID pSid1,
    __in  PSID pSid2,
    __out BOOL *pfEqual
);

advapi32.dll, BOOL WINAPI GetWindowsAccountDomainSid(
    __in    PSID pSid,
    __out_bcount_part_opt PSID pDomainSid,
    __inout DWORD* cbDomainSid
);

advapi32.dll, BOOL WINAPI IsValidSid(
    __in PSID pSid
);

advapi32.dll, BOOL WINAPI EqualSid(
    __in PSID pSid1,
    __in PSID pSid2
);

advapi32.dll, BOOL WINAPI EqualPrefixSid(
    __in PSID pSid1,
    __in PSID pSid2
);

advapi32.dll, DWORD WINAPI GetSidLengthRequired(
    __in UCHAR nSubAuthorityCount
);

advapi32.dll, BOOL WINAPI AllocateAndInitializeSid(
    __in        PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
    __in        BYTE nSubAuthorityCount,
    __in        DWORD nSubAuthority0,
    __in        DWORD nSubAuthority1,
    __in        DWORD nSubAuthority2,
    __in        DWORD nSubAuthority3,
    __in        DWORD nSubAuthority4,
    __in        DWORD nSubAuthority5,
    __in        DWORD nSubAuthority6,
    __in        DWORD nSubAuthority7,
    __deref_out PSID *pSid
);

advapi32.dll, PVOID WINAPI FreeSid(
    __in PSID pSid
);

advapi32.dll, BOOL WINAPI InitializeSid(
    __out PSID Sid,
    __in  PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
    __in  BYTE nSubAuthorityCount
);

advapi32.dll, PSID_IDENTIFIER_AUTHORITY WINAPI GetSidIdentifierAuthority(
    __in PSID pSid
);

advapi32.dll, PDWORD WINAPI GetSidSubAuthority(
    __in PSID pSid,
    __in DWORD nSubAuthority
);

advapi32.dll, PUCHAR WINAPI GetSidSubAuthorityCount(
    __in PSID pSid
);

advapi32.dll, DWORD WINAPI GetLengthSid(
    __in PSID pSid
);

advapi32.dll, BOOL WINAPI CopySid(
    __in DWORD nDestinationSidLength,
    __out_bcount PSID pDestinationSid,
    __in PSID pSourceSid
);

advapi32.dll, BOOL WINAPI AreAllAccessesGranted(
    __in DWORD GrantedAccess,
    __in DWORD DesiredAccess
);

advapi32.dll, BOOL WINAPI AreAnyAccessesGranted(
    __in DWORD GrantedAccess,
    __in DWORD DesiredAccess
);

advapi32.dll, BOOL WINAPI ClearEventLogA(
    __in     HANDLE hEventLog,
    __in_opt LPCSTR lpBackupFileName
);

advapi32.dll, BOOL WINAPI ClearEventLogW(
    __in     HANDLE hEventLog,
    __in_opt LPCSTR lpBackupFileName
);

advapi32.dll, BOOL WINAPI BackupEventLogA(
    __in HANDLE hEventLog,
    __in LPCSTR lpBackupFileName
);

advapi32.dll, BOOL WINAPI BackupEventLogW(
    __in HANDLE hEventLog,
    __in LPCSTR lpBackupFileName
);

advapi32.dll, BOOL WINAPI CloseEventLog(
    __in HANDLE hEventLog
);

advapi32.dll, BOOL WINAPI DeregisterEventSource(
    __in HANDLE hEventLog
);

advapi32.dll, BOOL WINAPI NotifyChangeEventLog(
    __in HANDLE  hEventLog,
    __in HANDLE  hEvent
);

advapi32.dll, BOOL WINAPI GetNumberOfEventLogRecords(
    __in  HANDLE hEventLog,
    __out PDWORD NumberOfRecords
);

advapi32.dll, BOOL WINAPI GetOldestEventLogRecord(
    __in  HANDLE hEventLog,
    __out PDWORD OldestRecord
);

advapi32.dll, HANDLE WINAPI OpenEventLogA(
    __in_opt LPCSTR lpUNCServerName,
    __in     LPCSTR lpSourceName
);

advapi32.dll, HANDLE WINAPI OpenEventLogW(
    __in_opt LPCSTR lpUNCServerName,
    __in     LPCSTR lpSourceName
);

advapi32.dll, HANDLE WINAPI RegisterEventSourceA(
    __in_opt LPCSTR lpUNCServerName,
    __in     LPCSTR lpSourceName
);

advapi32.dll, HANDLE WINAPI RegisterEventSourceW(
    __in_opt LPCSTR lpUNCServerName,
    __in     LPCSTR lpSourceName
);

advapi32.dll, HANDLE WINAPI OpenBackupEventLogA(
    __in_opt LPCSTR lpUNCServerName,
    __in     LPCSTR lpFileName
);

advapi32.dll, HANDLE WINAPI OpenBackupEventLogW(
    __in_opt LPCSTR lpUNCServerName,
    __in     LPCSTR lpFileName
);

advapi32.dll, BOOL WINAPI ReadEventLogA(
    __in  HANDLE     hEventLog,
    __in  DWORD      dwReadFlags,
    __in  DWORD      dwRecordOffset,
    __out_bcount_part LPVOID     lpBuffer,
    __in  DWORD      nNumberOfBytesToRead,
    __out DWORD      *pnBytesRead,
    __out DWORD      *pnMinNumberOfBytesNeeded
);

advapi32.dll, BOOL WINAPI ReadEventLogW(
    __in  HANDLE     hEventLog,
    __in  DWORD      dwReadFlags,
    __in  DWORD      dwRecordOffset,
    __out_bcount_part LPVOID     lpBuffer,
    __in  DWORD      nNumberOfBytesToRead,
    __out DWORD      *pnBytesRead,
    __out DWORD      *pnMinNumberOfBytesNeeded
);

advapi32.dll, BOOL WINAPI ReportEventA(
    __in     HANDLE     hEventLog,
    __in     WORD       wType,
    __in     WORD       wCategory,
    __in     DWORD      dwEventID,
    __in_opt PSID       lpUserSid,
    __in     WORD       wNumStrings,
    __in     DWORD      dwDataSize,
    __in_ecount_opt LPCSTR *lpStrings,
    __in_bcount_opt LPVOID lpRawData
);

advapi32.dll, BOOL WINAPI ReportEventW(
    __in     HANDLE     hEventLog,
    __in     WORD       wType,
    __in     WORD       wCategory,
    __in     DWORD      dwEventID,
    __in_opt PSID       lpUserSid,
    __in     WORD       wNumStrings,
    __in     DWORD      dwDataSize,
    __in_ecount_opt LPCSTR *lpStrings,
    __in_bcount_opt LPVOID lpRawData
);

advapi32.dll, BOOL WINAPI GetEventLogInformation(
    __in  HANDLE     hEventLog,
    __in  DWORD      dwInfoLevel,
    __out_bcount_part LPVOID lpBuffer,
    __in  DWORD      cbBufSize,
    __out LPDWORD    pcbBytesNeeded
);

advapi32.dll, BOOL WINAPI DuplicateToken(
    __in        HANDLE ExistingTokenHandle,
    __in        SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
    __deref_out PHANDLE DuplicateTokenHandle
);

advapi32.dll, BOOL WINAPI ConvertToAutoInheritPrivateObjectSecurity(
    __in_opt    PSECURITY_DESCRIPTOR ParentDescriptor,
    __in        PSECURITY_DESCRIPTOR CurrentSecurityDescriptor,
    __deref_out PSECURITY_DESCRIPTOR *NewSecurityDescriptor,
    __in_opt    GUID *ObjectType,
    __in        BOOLEAN IsDirectoryObject,
    __in        PGENERIC_MAPPING GenericMapping
);

advapi32.dll, BOOL WINAPI CreatePrivateObjectSecurityEx(
    __in_opt    PSECURITY_DESCRIPTOR ParentDescriptor,
    __in_opt    PSECURITY_DESCRIPTOR CreatorDescriptor,
    __deref_out PSECURITY_DESCRIPTOR * NewDescriptor,
    __in_opt    GUID *ObjectType,
    __in        BOOL IsContainerObject,
    __in        ULONG AutoInheritFlags,
    __in_opt    HANDLE Token,
    __in        PGENERIC_MAPPING GenericMapping
);

advapi32.dll, BOOL WINAPI CreatePrivateObjectSecurityWithMultipleInheritance(
    __in_opt    PSECURITY_DESCRIPTOR ParentDescriptor,
    __in_opt    PSECURITY_DESCRIPTOR CreatorDescriptor,
    __deref_out PSECURITY_DESCRIPTOR * NewDescriptor,
    __in_ecount_opt GUID **ObjectTypes,
    __in        ULONG GuidCount,
    __in        BOOL IsContainerObject,
    __in        ULONG AutoInheritFlags,
    __in_opt    HANDLE Token,
    __in        PGENERIC_MAPPING GenericMapping
);

advapi32.dll, BOOL WINAPI SetPrivateObjectSecurity(
    __in          SECURITY_INFORMATION SecurityInformation,
    __in          PSECURITY_DESCRIPTOR ModificationDescriptor,
    __deref_inout PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor,
    __in          PGENERIC_MAPPING GenericMapping,
    __in_opt      HANDLE Token
);

advapi32.dll, BOOL WINAPI SetPrivateObjectSecurityEx(
    __in          SECURITY_INFORMATION SecurityInformation,
    __in          PSECURITY_DESCRIPTOR ModificationDescriptor,
    __deref_inout PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor,
    __in          ULONG AutoInheritFlags,
    __in          PGENERIC_MAPPING GenericMapping,
    __in_opt      HANDLE Token
);

advapi32.dll, BOOL WINAPI GetPrivateObjectSecurity(
    __in  PSECURITY_DESCRIPTOR ObjectDescriptor,
    __in  SECURITY_INFORMATION SecurityInformation,
    __out_bcount_part_opt PSECURITY_DESCRIPTOR ResultantDescriptor,
    __in  DWORD DescriptorLength,
    __out PDWORD ReturnLength
);

advapi32.dll, BOOL WINAPI DestroyPrivateObjectSecurity(
    __deref PSECURITY_DESCRIPTOR * ObjectDescriptor
);

advapi32.dll, BOOL WINAPI CreateProcessAsUserA(
    __in_opt    HANDLE hToken,
    __in_opt    LPCSTR lpApplicationName,
    __inout_opt LPSTR lpCommandLine,
    __in_opt    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    __in_opt    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    __in        BOOL bInheritHandles,
    __in        DWORD dwCreationFlags,
    __in_opt    LPVOID lpEnvironment,
    __in_opt    LPCSTR lpCurrentDirectory,
    __in        LPSTARTUPINFOA lpStartupInfo,
    __out       LPPROCESS_INFORMATION lpProcessInformation
);

advapi32.dll, BOOL WINAPI CreateProcessAsUserW(
    __in_opt    HANDLE hToken,
    __in_opt    LPCSTR lpApplicationName,
    __inout_opt LPSTR lpCommandLine,
    __in_opt    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    __in_opt    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    __in        BOOL bInheritHandles,
    __in        DWORD dwCreationFlags,
    __in_opt    LPVOID lpEnvironment,
    __in_opt    LPCSTR lpCurrentDirectory,
    __in        LPSTARTUPINFOA lpStartupInfo,
    __out       LPPROCESS_INFORMATION lpProcessInformation
);

advapi32.dll, BOOL APIENTRY ImpersonateAnonymousToken(
    __in HANDLE ThreadHandle
);

advapi32.dll, BOOL WINAPI DuplicateTokenEx(
    __in        HANDLE hExistingToken,
    __in        DWORD dwDesiredAccess,
    __in_opt    LPSECURITY_ATTRIBUTES lpTokenAttributes,
    __in        SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
    __in        TOKEN_TYPE TokenType,
    __deref_out PHANDLE phNewToken
);

advapi32.dll, BOOL APIENTRY CreateRestrictedToken(
    __in        HANDLE ExistingTokenHandle,
    __in        DWORD Flags,
    __in        DWORD DisableSidCount,
    __in_ecount_opt PSID_AND_ATTRIBUTES SidsToDisable,
    __in        DWORD DeletePrivilegeCount,
    __in_ecount_opt PLUID_AND_ATTRIBUTES PrivilegesToDelete,
    __in        DWORD RestrictedSidCount,
    __in_ecount_opt PSID_AND_ATTRIBUTES SidsToRestrict,
    __deref_out PHANDLE NewTokenHandle
);

advapi32.dll, BOOL WINAPI IsTokenRestricted(
    __in HANDLE TokenHandle
);

advapi32.dll, BOOL WINAPI IsTokenUntrusted(
    __in HANDLE TokenHandle
);

advapi32.dll, BOOL APIENTRY CheckTokenMembership(
    __in_opt HANDLE TokenHandle,
    __in     PSID SidToCheck,
    __out    PBOOL IsMember
);

advapi32.dll, BOOL WINAPI RegisterWaitForSingleObject(
    __deref_out PHANDLE phNewWaitObject,
    __in        HANDLE hObject,
    __in        WAITORTIMERCALLBACK Callback,
    __in_opt    PVOID Context,
    __in        ULONG dwMilliseconds,
    __in        ULONG dwFlags
);

advapi32.dll, HANDLE WINAPI RegisterWaitForSingleObjectEx(
    __in     HANDLE hObject,
    __in     WAITORTIMERCALLBACK Callback,
    __in_opt PVOID Context,
    __in     ULONG dwMilliseconds,
    __in     ULONG dwFlags
);

advapi32.dll, BOOL WINAPI UnregisterWait(
    __in HANDLE WaitHandle
);

advapi32.dll, BOOL WINAPI UnregisterWaitEx(
    __in     HANDLE WaitHandle,
    __in_opt HANDLE CompletionEvent
);

advapi32.dll, BOOL WINAPI PrivilegeCheck(
    __in    HANDLE ClientToken,
    __inout PPRIVILEGE_SET RequiredPrivileges,
    __out   LPBOOL pfResult
);

advapi32.dll, VOID WINAPI MapGenericMask(
    __inout PDWORD AccessMask,
    __in    PGENERIC_MAPPING GenericMapping
);

advapi32.dll, BOOL WINAPI IsValidAcl(
    __in PACL pAcl
);

advapi32.dll, BOOL WINAPI InitializeAcl(
    __out_bcount PACL pAcl,
    __in DWORD nAclLength,
    __in DWORD dwAclRevision
);

advapi32.dll, BOOL WINAPI GetAclInformation(
    __in PACL pAcl,
    __out_bcount LPVOID pAclInformation,
    __in DWORD nAclInformationLength,
    __in ACL_INFORMATION_CLASS dwAclInformationClass
);

advapi32.dll, BOOL WINAPI SetAclInformation(
    __inout PACL pAcl,
    __in_bcount LPVOID pAclInformation,
    __in    DWORD nAclInformationLength,
    __in    ACL_INFORMATION_CLASS dwAclInformationClass
);

advapi32.dll, BOOL WINAPI AddAce(
    __inout PACL pAcl,
    __in    DWORD dwAceRevision,
    __in    DWORD dwStartingAceIndex,
    __in_bcount LPVOID pAceList,
    __in    DWORD nAceListLength
);

advapi32.dll, BOOL WINAPI DeleteAce(
    __inout PACL pAcl,
    __in    DWORD dwAceIndex
);

advapi32.dll, BOOL WINAPI GetAce(
    __in        PACL pAcl,
    __in        DWORD dwAceIndex,
    __deref_out LPVOID *pAce
);

advapi32.dll, BOOL WINAPI FindFirstFreeAce(
    __in        PACL pAcl,
    __deref_out LPVOID *pAce
);

advapi32.dll, BOOL WINAPI InitializeSecurityDescriptor(
    __out PSECURITY_DESCRIPTOR pSecurityDescriptor,
    __in  DWORD dwRevision
);

advapi32.dll, BOOL WINAPI IsValidSecurityDescriptor(
    __in PSECURITY_DESCRIPTOR pSecurityDescriptor
);

advapi32.dll, BOOL WINAPI IsValidRelativeSecurityDescriptor(
    __in PSECURITY_DESCRIPTOR pSecurityDescriptor,
    __in ULONG SecurityDescriptorLength,
    __in SECURITY_INFORMATION RequiredInformation
);

advapi32.dll, DWORD WINAPI GetSecurityDescriptorLength(
    __in PSECURITY_DESCRIPTOR pSecurityDescriptor
);

advapi32.dll, BOOL WINAPI GetSecurityDescriptorControl(
    __in  PSECURITY_DESCRIPTOR pSecurityDescriptor,
    __out PSECURITY_DESCRIPTOR_CONTROL pControl,
    __out LPDWORD lpdwRevision
);

advapi32.dll, BOOL WINAPI SetSecurityDescriptorControl(
    __in PSECURITY_DESCRIPTOR pSecurityDescriptor,
    __in SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest,
    __in SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet
);

advapi32.dll, BOOL WINAPI SetSecurityDescriptorDacl(
    __inout  PSECURITY_DESCRIPTOR pSecurityDescriptor,
    __in     BOOL bDaclPresent,
    __in_opt PACL pDacl,
    __in     BOOL bDaclDefaulted
);

advapi32.dll, BOOL WINAPI GetSecurityDescriptorDacl(
    __in        PSECURITY_DESCRIPTOR pSecurityDescriptor,
    __out       LPBOOL lpbDaclPresent,
    __deref_out PACL *pDacl,
    __out       LPBOOL lpbDaclDefaulted
);

advapi32.dll, BOOL WINAPI SetSecurityDescriptorSacl(
    __inout  PSECURITY_DESCRIPTOR pSecurityDescriptor,
    __in     BOOL bSaclPresent,
    __in_opt PACL pSacl,
    __in     BOOL bSaclDefaulted
);

advapi32.dll, BOOL WINAPI GetSecurityDescriptorSacl(
    __in        PSECURITY_DESCRIPTOR pSecurityDescriptor,
    __out       LPBOOL lpbSaclPresent,
    __deref_out PACL *pSacl,
    __out       LPBOOL lpbSaclDefaulted
);

advapi32.dll, BOOL WINAPI SetSecurityDescriptorOwner(
    __inout  PSECURITY_DESCRIPTOR pSecurityDescriptor,
    __in_opt PSID pOwner,
    __in     BOOL bOwnerDefaulted
);

advapi32.dll, BOOL WINAPI GetSecurityDescriptorOwner(
    __in        PSECURITY_DESCRIPTOR pSecurityDescriptor,
    __deref_out PSID *pOwner,
    __out       LPBOOL lpbOwnerDefaulted
);

advapi32.dll, BOOL WINAPI SetSecurityDescriptorGroup(
    __inout  PSECURITY_DESCRIPTOR pSecurityDescriptor,
    __in_opt PSID pGroup,
    __in     BOOL bGroupDefaulted
);

advapi32.dll, BOOL WINAPI GetSecurityDescriptorGroup(
    __in        PSECURITY_DESCRIPTOR pSecurityDescriptor,
    __deref_out PSID *pGroup,
    __out       LPBOOL lpbGroupDefaulted
);

advapi32.dll, DWORD WINAPI SetSecurityDescriptorRMControl(
    __inout  PSECURITY_DESCRIPTOR SecurityDescriptor,
    __in_opt PUCHAR RMControl
);

advapi32.dll, DWORD WINAPI GetSecurityDescriptorRMControl(
    __in  PSECURITY_DESCRIPTOR SecurityDescriptor,
    __out PUCHAR RMControl
);

advapi32.dll, BOOL WINAPI CreatePrivateObjectSecurity(
    __in_opt    PSECURITY_DESCRIPTOR ParentDescriptor,
    __in_opt    PSECURITY_DESCRIPTOR CreatorDescriptor,
    __deref_out PSECURITY_DESCRIPTOR * NewDescriptor,
    __in        BOOL IsDirectoryObject,
    __in_opt    HANDLE Token,
    __in        PGENERIC_MAPPING GenericMapping
);

advapi32.dll, BOOL WINAPI MakeSelfRelativeSD(
    __in    PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
    __out_bcount_part_opt PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
    __inout LPDWORD lpdwBufferLength
);

advapi32.dll, BOOL WINAPI MakeAbsoluteSD(
    __in    PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
    __out_bcount_part_opt PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
    __inout LPDWORD lpdwAbsoluteSecurityDescriptorSize,
    __out_bcount_part_opt PACL pDacl,
    __inout LPDWORD lpdwDaclSize,
    __out_bcount_part_opt PACL pSacl,
    __inout LPDWORD lpdwSaclSize,
    __out_bcount_part_opt PSID pOwner,
    __inout LPDWORD lpdwOwnerSize,
    __out_bcount_part_opt PSID pPrimaryGroup,
    __inout LPDWORD lpdwPrimaryGroupSize
);

advapi32.dll, BOOL WINAPI MakeAbsoluteSD2(
    __inout_bcount_part PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
    __inout LPDWORD lpdwBufferSize
);

advapi32.dll, VOID WINAPI QuerySecurityAccessMask(
    __in SECURITY_INFORMATION SecurityInformation,
    __out LPDWORD DesiredAccess
);

advapi32.dll, VOID WINAPI SetSecurityAccessMask(
    __in SECURITY_INFORMATION SecurityInformation,
    __out LPDWORD DesiredAccess
);

advapi32.dll, BOOL WINAPI SetFileSecurityA(
    __in LPCSTR lpFileName,
    __in SECURITY_INFORMATION SecurityInformation,
    __in PSECURITY_DESCRIPTOR pSecurityDescriptor
);

advapi32.dll, BOOL WINAPI SetFileSecurityW(
    __in LPCSTR lpFileName,
    __in SECURITY_INFORMATION SecurityInformation,
    __in PSECURITY_DESCRIPTOR pSecurityDescriptor
);

advapi32.dll, BOOL WINAPI GetFileSecurityA(
    __in  LPCSTR lpFileName,
    __in  SECURITY_INFORMATION RequestedInformation,
    __out_bcount_part_opt PSECURITY_DESCRIPTOR pSecurityDescriptor,
    __in  DWORD nLength,
    __out LPDWORD lpnLengthNeeded
);

advapi32.dll, BOOL WINAPI GetFileSecurityW(
    __in  LPCSTR lpFileName,
    __in  SECURITY_INFORMATION RequestedInformation,
    __out_bcount_part_opt PSECURITY_DESCRIPTOR pSecurityDescriptor,
    __in  DWORD nLength,
    __out LPDWORD lpnLengthNeeded
);

advapi32.dll, BOOL WINAPI SetKernelObjectSecurity(
    __in HANDLE Handle,
    __in SECURITY_INFORMATION SecurityInformation,
    __in PSECURITY_DESCRIPTOR SecurityDescriptor
);

advapi32.dll, HRESULT WINAPI RegisterApplicationRecoveryCallback(
    __in  APPLICATION_RECOVERY_CALLBACK pRecoveyCallback,
    __in_opt  PVOID pvParameter,
    __in DWORD dwPingInterval,
    __in DWORD dwFlags
);

advapi32.dll, HRESULT WINAPI UnregisterApplicationRecoveryCallback(
    void aaa
);

advapi32.dll, HRESULT WINAPI RegisterApplicationRestart(
    __in_opt PCWSTR pwzCommandline,
    __in DWORD dwFlags
);

advapi32.dll, HRESULT WINAPI UnregisterApplicationRestart(
    void aaa
);

advapi32.dll, BOOL WINAPI LookupAccountSidA(
    __in_opt LPCSTR lpSystemName,
    __in PSID Sid,
    __out_ecount_part_opt LPSTR Name,
    __inout  LPDWORD cchName,
    __out_ecount_part_opt LPSTR ReferencedDomainName,
    __inout LPDWORD cchReferencedDomainName,
    __out PSID_NAME_USE peUse
);

advapi32.dll, BOOL WINAPI LookupAccountSidW(
    __in_opt LPCSTR lpSystemName,
    __in PSID Sid,
    __out_ecount_part_opt LPSTR Name,
    __inout  LPDWORD cchName,
    __out_ecount_part_opt LPSTR ReferencedDomainName,
    __inout LPDWORD cchReferencedDomainName,
    __out PSID_NAME_USE peUse
);

advapi32.dll, BOOL WINAPI LookupAccountSidLocalA(
    __in PSID Sid,
    __out_ecount_part_opt LPSTR Name,
    __inout  LPDWORD cchName,
    __out_ecount_part_opt LPSTR ReferencedDomainName,
    __inout LPDWORD cchReferencedDomainName,
    __out PSID_NAME_USE peUse
);

advapi32.dll, BOOL WINAPI LookupAccountSidLocalW(
    __in PSID Sid,
    __out_ecount_part_opt LPSTR Name,
    __inout  LPDWORD cchName,
    __out_ecount_part_opt LPSTR ReferencedDomainName,
    __inout LPDWORD cchReferencedDomainName,
    __out PSID_NAME_USE peUse
);

advapi32.dll, BOOL WINAPI LookupAccountNameA(
    __in_opt LPCSTR lpSystemName,
    __in     LPCSTR lpAccountName,
    __out_bcount_part_opt PSID Sid,
    __inout  LPDWORD cbSid,
    __out_ecount_part_opt LPSTR ReferencedDomainName,
    __inout  LPDWORD cchReferencedDomainName,
    __out    PSID_NAME_USE peUse
);

advapi32.dll, BOOL WINAPI LookupAccountNameW(
    __in_opt LPCSTR lpSystemName,
    __in     LPCSTR lpAccountName,
    __out_bcount_part_opt PSID Sid,
    __inout  LPDWORD cbSid,
    __out_ecount_part_opt LPSTR ReferencedDomainName,
    __inout  LPDWORD cchReferencedDomainName,
    __out    PSID_NAME_USE peUse
);

advapi32.dll, BOOL WINAPI LookupAccountNameLocalA(
    __in     LPCSTR lpAccountName,
    __out_bcount_part_opt PSID Sid,
    __inout  LPDWORD cbSid,
    __out_ecount_part_opt LPSTR ReferencedDomainName,
    __inout  LPDWORD cchReferencedDomainName,
    __out    PSID_NAME_USE peUse
);

advapi32.dll, BOOL WINAPI LookupAccountNameLocalW(
    __in     LPCSTR lpAccountName,
    __out_bcount_part_opt PSID Sid,
    __inout  LPDWORD cbSid,
    __out_ecount_part_opt LPSTR ReferencedDomainName,
    __inout  LPDWORD cchReferencedDomainName,
    __out    PSID_NAME_USE peUse
);

advapi32.dll, BOOL WINAPI LookupPrivilegeValueA(
    __in_opt LPCSTR lpSystemName,
    __in     LPCSTR lpName,
    __out    PLUID   lpLuid
);

advapi32.dll, BOOL WINAPI LookupPrivilegeValueW(
    __in_opt LPCSTR lpSystemName,
    __in     LPCSTR lpName,
    __out    PLUID   lpLuid
);

advapi32.dll, BOOL WINAPI LookupPrivilegeNameA(
    __in_opt LPCSTR lpSystemName,
    __in     PLUID   lpLuid,
    __out_ecount_part_opt LPSTR lpName,
    __inout  LPDWORD cchName
);

advapi32.dll, BOOL WINAPI LookupPrivilegeNameW(
    __in_opt LPCSTR lpSystemName,
    __in     PLUID   lpLuid,
    __out_ecount_part_opt LPSTR lpName,
    __inout  LPDWORD cchName
);

advapi32.dll, BOOL WINAPI LookupPrivilegeDisplayNameA(
    __in_opt LPCSTR lpSystemName,
    __in     LPCSTR lpName,
    __out_ecount_part_opt LPSTR lpDisplayName,
    __inout  LPDWORD cchDisplayName,
    __out    LPDWORD lpLanguageId
);

advapi32.dll, BOOL WINAPI LookupPrivilegeDisplayNameW(
    __in_opt LPCSTR lpSystemName,
    __in     LPCSTR lpName,
    __out_ecount_part_opt LPSTR lpDisplayName,
    __inout  LPDWORD cchDisplayName,
    __out    LPDWORD lpLanguageId
);

advapi32.dll, BOOL WINAPIAllocateLocallyUniqueId(
    __out PLUID Luid
);

advapi32.dll, BOOL WINAPI GetKernelObjectSecurity(
    __in  HANDLE Handle,
    __in  SECURITY_INFORMATION RequestedInformation,
    __out_bcount_opt PSECURITY_DESCRIPTOR pSecurityDescriptor,
    __in  DWORD nLength,
    __out LPDWORD lpnLengthNeeded
);

advapi32.dll, BOOL WINAPI ImpersonateNamedPipeClient(
    __in HANDLE hNamedPipe
);

advapi32.dll, BOOL WINAPI ImpersonateSelf(
    __in SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
);

advapi32.dll, BOOL WINAPI RevertToSelf(
    void aaa
);

advapi32.dll, BOOL WINAPI GetUserNameA(
    __out_ecount_part_opt LPSTR lpBuffer,
    __inout LPDWORD pcbBuffer
);

advapi32.dll, BOOL WINAPI GetUserNameW(
    __out_ecount_part_opt LPSTR lpBuffer,
    __inout LPDWORD pcbBuffer
);

advapi32.dll, BOOL WINAPI LogonUserA(
    __in        LPCSTR lpszUsername,
    __in_opt    LPCSTR lpszDomain,
    __in        LPCSTR lpszPassword,
    __in        DWORD dwLogonType,
    __in        DWORD dwLogonProvider,
    __deref_out PHANDLE phToken
);

advapi32.dll, BOOL WINAPI LogonUserW(
    __in        LPCSTR lpszUsername,
    __in_opt    LPCSTR lpszDomain,
    __in        LPCSTR lpszPassword,
    __in        DWORD dwLogonType,
    __in        DWORD dwLogonProvider,
    __deref_out PHANDLE phToken
);

advapi32.dll, BOOL WINAPI LogonUserExA(
    __in            LPCSTR lpszUsername,
    __in_opt        LPCSTR lpszDomain,
    __in            LPCSTR lpszPassword,
    __in            DWORD dwLogonType,
    __in            DWORD dwLogonProvider,
    __deref_opt_out PHANDLE phToken,
    __deref_opt_out PSID  *ppLogonSid,
    __deref_opt_out_bcount_full PVOID *ppProfileBuffer,
    __out_opt       LPDWORD pdwProfileLength,
    __out_opt       PQUOTA_LIMITS pQuotaLimits
);

advapi32.dll, BOOL WINAPI LogonUserExW(
    __in            LPCSTR lpszUsername,
    __in_opt        LPCSTR lpszDomain,
    __in            LPCSTR lpszPassword,
    __in            DWORD dwLogonType,
    __in            DWORD dwLogonProvider,
    __deref_opt_out PHANDLE phToken,
    __deref_opt_out PSID  *ppLogonSid,
    __deref_opt_out_bcount_full PVOID *ppProfileBuffer,
    __out_opt       LPDWORD pdwProfileLength,
    __out_opt       PQUOTA_LIMITS pQuotaLimits
);

advapi32.dll, BOOL WINAPI ImpersonateLoggedOnUser(
    __in HANDLE  hToken
);

advapi32.dll, BOOL WINAPI GetCurrentHwProfileA(
    __out LPHW_PROFILE_INFOA  lpHwProfileInfo
);

advapi32.dll, BOOL WINAPI GetCurrentHwProfileW(
    __out LPHW_PROFILE_INFOA  lpHwProfileInfo
);
